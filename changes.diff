diff --git a/README.md b/README.md
index fb21f84..298db45 100644
--- a/README.md
+++ b/README.md
@@ -1,135 +1,428 @@
 # Fresh API Tester
 
-Das **Fresh API Tester**-Projekt ist ein Testwerkzeug, das API-Endpunkte
-validiert und deren Antwortstruktur überprüft. Es nutzt Deno, um API-Anfragen zu
-stellen, die Antworten mit einer vordefinierten Struktur zu vergleichen und dann
-die Ergebnisse zu speichern und zu berichten. Bei Bedarf können auch
-Slack-Benachrichtigungen mit Buttons zum Genehmigen von Änderungen an der
-Antwortstruktur gesendet werden.
+Das **Fresh API Tester**-Projekt ist ein Tool, das API-Endpunkte validiert und
+deren Antwortstruktur überprüft. Es nutzt Deno, um API-Anfragen zu stellen,
+Antworten mit vordefinierten Strukturen zu vergleichen und die Ergebnisse zu
+speichern und zu berichten. Bei Bedarf können Slack-Benachrichtigungen mit
+Buttons zum Genehmigen von Änderungen an der Antwortstruktur gesendet werden.
 
 ## Funktionsübersicht
 
-- **API Tests**: Führt API-Tests auf Endpunkten durch, vergleicht die
+- **API-Tests**: Führt API-Tests auf Endpunkten durch, vergleicht die
   Antwortstrukturen und speichert die Ergebnisse.
 - **Datenbank-Integration (Deno KV)**: Speichert und verwaltet genehmigte
-  Änderungen an der Struktur der API-Antworten.
+  Änderungen an den API-Antwortstrukturen.
 - **Slack-Benachrichtigungen**: Sendet Benachrichtigungen an Slack mit den
-  Testergebnissen, einschließlich der Möglichkeit, eine Änderung der Struktur zu
-  genehmigen.
-- **PIN-basierte Verifizierung**: Bevor Änderungen an der Struktur übernommen
-  werden, müssen sie über Slack mit einer PIN verifiziert werden.
+  Testergebnissen, inklusive Buttons für die Genehmigung von Strukturänderungen.
+- **PIN-basierte Verifizierung**: Änderungen müssen über Slack per PIN bestätigt
+  werden, bevor sie übernommen werden.
 
 ## Installationsanleitung
 
 ### Voraussetzungen
 
 - [Deno](https://deno.land/) installiert (Version `1.18` oder höher).
-- Eine Slack-App, um Benachrichtigungen zu senden (mit dem `SLACK_BOT_TOKEN`,
-  `SLACK_CHANNEL_ID`, und `SLACK_SIGNING_SECRET`).
+- Eine Slack-App für Benachrichtigungen (mit `SLACK_BOT_TOKEN`,
+  `SLACK_CHANNEL_ID` und `SLACK_SIGNING_SECRET`).
 
 ### 1. Deno installieren
 
-Falls du Deno noch nicht installiert hast, kannst du es
-[hier herunterladen](https://deno.land/#installation) oder es mit folgendem
-Befehl installieren:
+Falls Deno noch nicht installiert ist, kann es (https://deno.land/#installation)
+heruntergeladen oder mit:
 
-```bash
 curl -fsSL https://deno.land/x/install/install.sh | sh
-2. Umgebungsvariablen einrichten
-Lege die folgenden Umgebungsvariablen fest:
-
-bash
-Kopieren
-Bearbeiten
-export SLACK_BOT_TOKEN_1=<DEIN_BOT_TOKEN>
-export SLACK_CHANNEL_ID_1=<DEIN_SLACK_CHANNEL_ID>
-export SLACK_SIGNING_SECRET_1=<DEIN_SLACK_SIGNING_SECRET>
-export SLACK_APPROVE_PIN=<DEINE_PIN>  # Default-PIN für die Genehmigung
-3. Deno-Module installieren und konfigurieren
-Lade die benötigten Deno-Module herunter:
-
-bash
-Kopieren
-Bearbeiten
+
+installiert werden.
+
+## Umgebungsvariablen einrichten
+
+Folgende Umgebungsvariablen müssen gesetzt werden:
+
+export SLACK_BOT_TOKEN_1=<DEIN_BOT_TOKEN> export
+SLACK_CHANNEL_ID_1=<DEIN_SLACK_CHANNEL_ID> export
+SLACK_SIGNING_SECRET_1=<DEIN_SLACK_SIGNING_SECRET> export
+SLACK_APPROVE_PIN=<DEINE_PIN> # Standard-PIN für Genehmigungen export
+GITHUB_OWNER=<DEIN_GITHUB_OWNER> export GITHUB_REPO=<DEIN_GITHUB_REPO> export
+GITHUB_BRANCH=<ZWEIGNAME> # (optional; Standard: main)
+
+## Deno-Module cachen
+
 deno cache --unstable src/api-tester/core/*.ts
-4. Testausführung
-Du kannst den API-Test ausführen, indem du folgenden Befehl verwendest:
 
-bash
-Kopieren
-Bearbeiten
-deno run --unstable-kv -A run-test-single.ts "Get View Product"
-Struktur des Projekts
-Das Projekt ist so aufgebaut, dass die API-Tests durchgeführt, die Ergebnisse gespeichert und die Benutzer in Slack benachrichtigt werden. Hier ist eine Übersicht der Projektstruktur:
+## Testausführung
+
+Einen einzelnen API-Test führst du so aus:
+
+bash: deno run --unstable-kv -A run-test-single.ts "Get View Product"
+
+Für einen Batch-Durchlauf aller Endpunkte:
+
+bash: deno run --unstable --unstable-kv -A run-tests.ts
+
+Falls du nur Dry-Run möchtest (kein Git-Push, keine echten Slack-Posts):
+
+Setze DRY_RUN=true und/oder LOCAL_MODE=true in der Umgebung.
+
+# Projektstruktur
+
+api-tester-fresh/ ├── README.md # Diese Datei ├── deno.json # Deno-Konfiguration
+├── run-test-single.ts # Skript für Einzeltests ├── run-tests.ts # Skript für
+Batch-Tests ├── src/ │ ├── api-tester/ │ │ ├── core/ │ │ │ ├── apiCaller.ts #
+API-Request- und Vergleichslogik │ │ │ ├── configLoader.ts # Lädt config.json │
+│ │ ├── kv.ts # Deno KV-Integration │ │ │ ├── compareStructures.ts # Vergleicht
+zwei JSON-Schemata │ │ │ ├── structureAnalyzer.ts # Analysiert und speichert
+Strukturen │ │ │ ├── versionChecker.ts # Prüft auf neue API-Versionen │ │ │ ├──
+gitPush.ts # Push neuer Schemata nach GitHub │ │ │ ├── slack/ │ │ │ │ ├──
+sendSlackReport.ts # Sendet Testbericht an Slack │ │ │ │ ├──
+handlePinSubmission.ts # Verarbeitet Slack-PIN-Submission │ │ │ │ ├──
+openPinModal.ts # Öffnet PIN-Modal in Slack │ │ │ │ ├── slackWorkspaces.ts #
+Liest Slack-Konfiguration │ │ │ │ ├── validateSignature.ts # Prüft
+Slack-Signatur │ │ │ │ └── debugStore.ts # Speichert Debug-Events in Memory │ │
+│ ├── utils.ts # Hilfsfunktionen (Pfad, Ersetzungen) │ │ │ └── types.ts #
+Gemeinsame Typdefinitionen │ │ └── default-ids.json # Standard-IDs für Endpunkte
+│ ├── main.ts # Einstiegspunkt für Fresh-Server (optional) │ └── routes/ #
+Fresh-Routen (Slack, KV-Dump, etc.) ├── .gitignore # Git-Ignore-Datei └──
+config.json # Konfigurationsdatei für API-Endpunkte
+
+# Erläuterung wichtiger Dateien
+
+## apiCaller.ts
+
+Sendet HTTP-Anfragen an die konfigurierten Endpunkte, liest den JSON-Body,
+vergleicht die Antwort mit dem erwarteten Schema und erstellt ein TestResult.
+
+## configLoader.ts
+
+Lädt config.json aus einem der vordefinierten Pfade oder aus CONFIG_PATH.
+Validiert, dass endpoints ein nicht-leeres Array ist, und liest optional gitRepo
+oder Umgebungsvariablen GITHUB_OWNER/GITHUB_REPO/GITHUB_BRANCH.
+
+## kv.ts
+
+Initialisiert eine Deno KV-Instanz. In Deno Deploy wird globalThis.KV genutzt.
+Lokal mit --unstable-kv wird Deno.openKv() verwendet. Für CI oder SKIP_KV=true
+existiert ein In-Memory-Stub, der get, set, delete, list, getMany usw. als
+vereinfachte Methoden bereitstellt.
+
+## compareStructures.ts
+
+Vergleicht zwei JSON-Schemata (erwartet vs. aktuell). Findet fehlende,
+zusätzliche Felder sowie Typabweichungen und gibt ein CompareResult zurück.
+
+## structureAnalyzer.ts
+
+Lädt das erwartete Schema entweder aus KV (["expected", key]) oder aus der
+Datei. Führt compareStructures aus, speichert bei Abweichungen das neue Schema
+in KV unter ["schema-update-pending", key]. Falls nur Typabweichungen vorliegen,
+wird das neue Schema direkt in der Datei bzw. als KV-Ersatz gespeichert.
+
+## versionChecker.ts
+
+Prüft, ob die URL des Endpunkts eine Versionsnummer (/v1/, /v2/ etc.) enthält,
+versuch, /v(next)/ zu erreichen. Wenn HTTP 200 mit einer validen Antwort, wird
+versionChanged=true zurückgegeben und der Aufrufer startet keinen weiteren Test.
+
+## gitPush.ts
+
+Nimmt ein oder mehrere SchemaUpdate-Objekte, generiert einen Stub (alle Strings
+= "string", Zahlen = 0, Booleans = false, null bleibt null, Array nur erstes
+Element), und pusht sie mit @octokit/rest in das GitHub-Repository. Aktualisiert
+anschließend src/api-tester/config.json, um expectedStructure auf den neuen Pfad
+zu setzen.
+
+## slack/sendSlackReport.ts
+
+Erzeugt Slack Block-Kit-Blöcke für Header, neue Versionen, Body (Issues) und
+Statistik. Wandelt jede Ziffer in Keycap-Emoji um (z. B. 16 → 1️⃣6️⃣). Speichert
+für jede offene Issue die rohen Blöcke in KV unter ["rawBlocks", key], damit
+später die Buttons entfernt werden können. Versendet paginierte Nachrichten mit
+chat.postMessage an alle konfigurierten Workspaces.
+
+## slack/openPinModal.ts
+
+Öffnet ein Slack-Modal, in dem der User einen PIN eingibt, um die Genehmigung
+der Strukturänderung zu bestätigen. Das Modal enthält im private_metadata alle
+Daten zum Endpoint (Name, Methode, fehlende/zusätzliche Felder, Typabweichungen,
+ts, channel).
+
+## slack/handlePinSubmission.ts
+
+Verarbeitet das view_submission-Event von Slack. Liest den PIN, validiert gegen
+SLACK_APPROVE_PIN, speichert "approved" in KV unter ["approvals"][key], liest
+aus KV unter ["pendingUpdates"] das passende SchemaUpdate, pusht das Schema mit
+gitPush, entfernt diesen Eintrag aus ["pendingUpdates"], aktualisiert die
+ursprüngliche Slack-Nachricht (entfernt Buttons, hängt „AKTUALISIERT • <Zeit>“
+und „✅ Freigegeben durch <user>“ an), schreibt die neuen Blöcke zurück in
+["rawBlocks", key], und startet run-tests.ts erneut.
+
+## slack/slackWorkspaces.ts
+
+Liest Umgebungsvariablen SLACK_BOT_TOKEN_1, SLACK_CHANNEL_ID_1,
+SLACK_SIGNING_SECRET_1, SLACK_BOT_TOKEN_2, … und liefert ein Array von Objekten
+{ token, channel, signingSecret }.
+
+## slack/validateSignature.ts
+
+Prüft, ob eine eingehende Slack-Request gültig ist: Liest x-slack-signature und
+x-slack-request-timestamp, erstellt das HMAC-SHA256-Signaturziel und vergleicht
+es constant-time mit dem Header-Wert.
+
+## slack/debugStore.ts
+
+Speichert bis zu 20 Slack-Events im Memory-Array slackDebugEvents, um sie später
+über einen Endpunkt (z. B. kv-dump) anzusehen.
+
+## utils.ts
+
+resolveProjectPath(...): Löst Pfade relativ zum Projekt-Root (Deno.cwd()).
+
+replaceWithFallback(value, fallback): Gibt fallback zurück, wenn value
+null/undefined ist.
+
+safeReplace(template, replacements): Ersetzt ${KEY} in Strings durch Werte aus
+replacements.
+
+## types.ts
+
+Gemeinsame Typen:
+
+export type Schema = Record<string, unknown>;
+
+export interface TypeMismatch { path: string; expected: string; actual: string;
+}
+
+export interface Diff { missingFields: string[]; extraFields: string[];
+typeMismatches: TypeMismatch[]; updatedSchema: Schema; }
+
+## run-test-single.ts
+
+Skript für Einzeltest:
+
+1. Lädt config.json
+
+2. Findet den angegebenen Endpoint
+
+3. Führt runSingleEndpoint(...) aus
+
+4. Gibt HTTP-Status, Strukturvergleich, erwartetes und tatsächliches JSON in der
+   Konsole aus
+
+5. Sendet einen einzelnen Slack-Report (sofern DISABLE_SLACK ≠ "true").
+
+## run-tests.ts
+
+Batch-Skript:
+
+1. Lädt config.json
+
+2. Iteriert über alle konfigurierten Endpunkte und ruft runSingleEndpoint(...)
+   auf
+
+3. Sammelt alle TestResult und VersionUpdate
+
+4. Sendet einen Slack-Report (mit aufgelisteten offenen Issues) oder leitet zu
+   Dry-Run/DISABLE_SLACK um
+
+5. Pusht alle SchemaUpdates ins GitHub-Repo bei Bedarf
+
+6. Bereinigt KV-Einträge:
+
+- Entfernt freigegebene rawBlocks
+
+- Setzt ["approvals"][key] = "approved"
+
+- Aktualisiert ["pending"] bzw. ["schema-update-pending"]
+
+## main.ts
+
+Einstiegspunkt für Fresh (falls das Projekt als Web-App dient). Kann Cron-Jobs
+anlegen, um run-tests.ts periodisch auszuführen, oder Endpunkte für manuelle
+Ausführung bereitstellen.
+
+## routes/api/... (Fresh-Routen)
+
+actions.ts: Verarbeitet Slack-Interaktionen auf HTTP-Ebene (Signatur-Check,
+Button-Clicks, View-Submissions).
+
+cron-log.ts: Gibt den Zeitstempel des letzten Cron-Laufs zurück.
+
+kv-dump.ts: Listet aktuelle KV-Einträge (approvals, rawBlocks,
+schema-update-pending, expected) zur Debug-Ausgabe.
+
+reset-approvals.ts: Löscht ["approvals"].
+
+reset-expected.ts: Löscht ["expected", key] in KV (nur ein Eintrag).
+
+reset-pending.ts: Löscht ["pending"] sowie alle Einträge unter
+["schema-update-pending"].
+
+run-tests.ts: Löst runTests per HTTP-Aufruf aus.
+
+slack.ts: Hört auf Slack-Events:
+
+1. Verifiziert Signatur (validateSignature)
+
+2. Bei url_verification antwortet mit challenge
+
+3. Bei view_submission ruft handlePinSubmission auf
+
+4. Bei block_actions ruft openPinModal auf
+
+# Funktionen und Arbeitsweise
+
+API-Testdurchführung
+
+runSingleEndpoint sendet die HTTP-Anfrage, liest die Antwort als Text, parst
+JSON oder behält Text bei, vergleicht mit dem erwarteten Schema, korreliert
+missingFields, extraFields, typeMismatches und generiert ggf. neue
+Schema-Entwürfe (SchemaUpdate).
+
+Speichern von Abweichungen
+
+structureAnalyzer.analyzeResponse lädt das vorhandene Schema
+(loadExpectedSchema), transformiert den Response mit transformValues, vergleicht
+Strukturen, schreibt bei Abweichungen ["schema-update-pending", key] =
+actualSchema in KV.
+
+Nur Typabweichungen ohne fehlende/zusätzliche Felder werden direkt per
+saveUpdatedSchema in Datei bzw. KV aktualisiert.
+
+Slack-Benachrichtigung
+
+sendSlackReport baut aus allen TestResult und VersionUpdate eine Slack-Message:
+
+Header (renderHeaderBlock)
+
+(falls vorhanden) Version-Abschnitt (renderVersionBlocks)
+
+Jeder offene Issue als seitenweise paginierte Blöcke:
+
+Section mit Keycap-Emoji + EndpointName + Icon
+
+Kontext-Blöcke für Fehlende/Neue Felder und Typabweichungen
+
+Action-Block mit Buttons ✅ Einverstanden (value = JSON mit allen Details) und
+⏸️ Warten (value = key)
+
+Divider
+
+Speichert dazu alle rohen Blöcke in ["rawBlocks", key], damit
+handlePinSubmission sie später bearbeiten kann.
+
+Genehmigung über Slack
+
+Klick auf ✅ Einverstanden öffnet ein Modal (openPinModal) mit private_metadata
+= JSON-Bahn aller Details + ts + channel.
+
+In handlePinSubmission:
+
+PIN einlesen, prüfen gegen SLACK_APPROVE_PIN
+
+In KV ["approvals"][key] = "approved" speichern
+
+Aus ["pendingUpdates"] den passenden SchemaUpdate holen, ins Git pushen (via
+pushExpectedSchemaToGit), ["pendingUpdates"] bereinigen
+
+Original-Slack Nachricht updaten:
+
+["rawBlocks", key] abrufen
+
+Buttons (block_id="decision_buttons_<key>") entfernen
+
+Neuen Divider verwerfen, falls vorhanden
+
+Abschnitt „AKTUALISIERT • <Zeit>“ + Detail-Infos der Abweichungen + „✅
+Freigegeben durch <userName>“ anhängen
+
+chat.update an Slack senden
+
+["rawBlocks", key] = updatedBlocks speichern
+
+run-tests.ts erneut starten (mit Deno.Command), um alle Tests jetzt mit
+genehmigten Schemas neu auszuführen.
+
+Datenmanagement mit Deno KV
+
+["approvals"]: Record<key, "approved" | "waiting">
+
+["rawBlocks", key]: Array<SlackBlock> (unveränderte Blöcke der ursprünglichen Report-Nachricht)
+["schema-update-pending", key]: Schema (wenn fehlende/zusätzliche Felder existierten)
+["pendingUpdates"]: Array<SchemaUpdate> (gesammelte Entwürfe, die gepusht werden sollen)
+
+["expected", key]: Schema, falls Datei nicht verfügbar oder KV als Fallback
+
+Cron-Jobs / Automatisierung
+
+In main.ts (Fresh-Server) kann ein Cron-Job wie Deno.cron("run-tests-every-12h",
+"0 */12 * * *", runAllTests) angelegt werden, um halb­täglich Tests auszuführen.
+
+Alternativ per HTTP über routes/api/run-tests.ts manuell triggern.
+
+Rücksetzer-Routen
+
+reset-approvals: Löscht ["approvals"] (setzt alle Genehmigungen zurück).
+
+reset-pending: Löscht ["pending"] und alle Einträge unter
+["schema-update-pending"].
+
+reset-expected: Löscht gezielt ["expected", key].
+
+kv-dump: Gibt aktuellen Inhalt von approvals, rawBlocks, pending, expected als
+JSON zurück (nur zu Debug-Zwecken).
+
+Ablauf eines typischen Tests Batch-Durchlauf (runTests)
+
+Lädt config.json.
 
-plaintext
-Kopieren
-Bearbeiten
-api-tester-fresh/
-├── README.md                          # Diese Datei
-├── deno.json                           # Konfigurationsdatei für Deno
-├── src/
-│   ├── api-tester/
-│   │   ├── core/
-│   │   │   ├── apiCaller.ts            # API-Test-Logik
-│   │   │   ├── configLoader.ts         # Lädt die Konfigurationsdatei
-│   │   │   ├── kv.ts                   # Deno KV Integration
-│   │   │   ├── slack/
-│   │   │   │   ├── handlePinSubmission.ts  # Verarbeitet die Slack-PIN-Verifizierung
-│   │   │   │   ├── sendSlackReport.ts      # Sendet den Testbericht an Slack
-│   │   │   │   └── slackWorkspaces.ts      # Handhabt die Konfiguration der Slack-Arbeitsbereiche
-│   │   │   └── structureAnalyzer.ts      # Analysiert und speichert die Antwortstrukturen
-│   │   ├── run-test-single.ts           # Einzeln durchgeführter API-Test
-│   │   ├── run-tests.ts                # Batch-Verarbeitung aller API-Tests
-│   └── main.ts                         # Einstiegspunkt für das API-Testsystem
-├── .gitignore                          # Git-Ignore-Datei
-└── config.json                         # Konfigurationsdatei für API-Endpunkte und erwartete Strukturen
-Erklärung der Hauptdateien:
-apiCaller.ts: Enthält die Logik zum Senden von API-Anfragen und zum Vergleichen der Antwortstruktur mit einer erwarteten Struktur.
+Für jeden Endpoint:
 
-configLoader.ts: Lädt die Konfiguration für die API-Endpunkte und die zugehörigen erwarteten Strukturen.
+runSingleEndpoint (Versionserkennung; wenn neue Version → pushen & überspringen;
+sonst)
 
-kv.ts: Speichert die Zustimmungen und die "rawBlocks"-Daten im Deno KV.
+testEndpoint in apiCaller.ts (HTTP-Request → JSON-Parsing → Schema-Vergleich).
 
-handlePinSubmission.ts: Verarbeitet die PIN-Eingabe von Slack-Nutzern und genehmigt Änderungen an der Antwortstruktur.
+Bei Abweichungen: neue Entwürfe in schemaUpdates und
+["schema-update-pending", key] = actualSchema in KV.
 
-sendSlackReport.ts: Sendet den API-Testbericht an Slack und ermöglicht die Interaktion mit Slack-Buttons zur Bestätigung der Antwortstruktur.
+Alle TestResult und VersionUpdate sammeln.
 
-slackWorkspaces.ts: Liest die konfigurierten Slack-Arbeitsbereiche aus und stellt die API für Slack zur Verfügung.
+sendSlackReport für offene Issues:
 
-structureAnalyzer.ts: Analysiert und transformiert die API-Antworten, um sie mit der erwarteten Struktur zu vergleichen und aktualisierte Strukturen zu speichern.
+pendingIssues = allIssues.filter(approvals[key] ∈ {undefined, "pending"})
 
-run-test-single.ts: Führt einen einzelnen API-Test aus.
+Blöcke bauen, Buttons mit JSON-Payload, rawBlocks in KV speichern, Chat-Post.
 
-run-tests.ts: Führt mehrere API-Tests aus.
+Falls schemaUpdates.length > 0:
 
-Funktionen und Arbeitsweise
-API-Testdurchführung:
+pushExpectedSchemaToGit für alle Entwürfe (Stubify + GitHub → Commit).
 
-Das System führt API-Anfragen gemäß der Konfiguration aus.
+["pendingUpdates"] aktualisieren (nur unbestätigte belassen).
 
-Die Antworten werden mit der erwarteten Struktur verglichen, und alle Unterschiede werden erfasst (fehlende Felder, unerwartete Felder, Typabweichungen).
+In ["approvals", key] = "approved", ["rawBlocks", key] löschen.
 
-Speichern von Abweichungen:
+Slack-Interaktion
 
-Wenn Abweichungen festgestellt werden, wird die neue Struktur im Deno KV und lokal gespeichert.
+User klickt „Einverstanden“ → openPinModal öffnet Modal mit Details im
+private_metadata.
 
-Slack-Benachrichtigungen:
+User gibt PIN ein → handlePinSubmission: PIN prüfen → KV ["approvals"][key] =
+"approved" → passenden SchemaUpdate aus ["pendingUpdates"] holen →
+pushExpectedSchemaToGit → ["pendingUpdates"] bereinigen → Slack-Nachricht
+updaten (Buttons entfernen, „Freigegeben“ anhängen) → run-tests.ts neu starten.
 
-Die Ergebnisse werden über Slack an den konfigurierten Arbeitsbereich gesendet.
+Genehmigte Änderungen
 
-Slack-Nutzer müssen mit einem Button bestätigen, ob sie die Änderungen an der Struktur genehmigen.
+Nach Genehmigung schreibt pushExpectedSchemaToGit den Stub ins GitHub-Repo
+(expected/<endpoint>_vN.json)
 
-Datenmanagement mit Deno KV:
+config.json wird aktualisiert, damit expectedStructure auf das neue JSON zeigt.
 
-Die Zustimmungen und Änderungen werden im Deno KV gespeichert, um eine dauerhafte Speicherung der Benutzereingaben zu ermöglichen.
+Beim nächsten Durchlauf wird die neue Datei als Referenz genutzt.
 
-PIN-Verifizierung:
+Feedbek und Fehlersuche
 
-Eine PIN muss in Slack eingegeben werden, um eine Änderung an der Struktur zu genehmigen.
+kv-dump zeigt aktuellen KV-Inhalt (Approvals, rawBlocks, pending, expected) an.
 
-Weitere Funktionen
-Deno KV: Ermöglicht es, Daten wie Zustimmungen und rawBlocks sicher zu speichern.
+slackDebugEvents speichert letzte Events, abrufbar für Diagnosen.
 
-Slack-Interaktivität: Bietet Buttons zur Interaktion mit den Nutzern, um die Strukturänderungen zu genehmigen oder abzulehnen.
-```
+reset-*-Routen erlauben manuelles Zurücksetzen von KV-Einträgen.
diff --git a/app.ts b/app.ts
new file mode 100644
index 0000000..55f3e8f
--- /dev/null
+++ b/app.ts
@@ -0,0 +1,15 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+/// <reference lib="deno.unstable" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+import config from "./fresh.config.ts";
+
+/**
+ * Fresh-Server starten (HTTP-Endpunkte: /api/…, /, /_frsh etc.)
+ */
+await start(manifest, config);
diff --git a/main.ts b/main.ts
index c7d6775..37a014f 100644
--- a/main.ts
+++ b/main.ts
@@ -1,25 +1,14 @@
 // main.ts
-/// <reference no-default-lib="true" />
-/// <reference lib="dom" />
-/// <reference lib="dom.iterable" />
-/// <reference lib="dom.asynciterable" />
-/// <reference lib="deno.ns" />
-/// <reference lib="deno.unstable" />
 
-import "$std/dotenv/load.ts";
+// ─── 1) Alle Environment-Variablen laden (u. a. SLACK_PIN, GITHUB_OWNER, …) ──────────
+import "https://deno.land/std@0.216.0/dotenv/load.ts";
 
-import { start } from "$fresh/server.ts";
-import manifest from "./fresh.gen.ts";
-import config from "./fresh.config.ts";
-
-// --- Neu: importiere deine Test-Runner Funktion ---
+// ─── 2) Cron-Job auf Top-Level (muss VOR allen anderen Imports stehen!) ────────────
 import { runAllTests } from "./run-tests.ts";
 
-// Cron-Job: führe deine Tests jede Stunde aus.
-// Name = "run-tests-every-hour", Schedule = "0 * * * *"
 Deno.cron(
-  "run-tests-every-hour",
-  "0 * * * *",
+  "run-tests-every-12h",
+  "0 */12 * * *",
   async () => {
     console.log("⏰ [Cron] Starte API-Tests…");
     try {
@@ -31,4 +20,5 @@ Deno.cron(
   },
 );
 
-await start(manifest, config);
+// ─── 3) Fresh-App (HTTP-Server) starten → in app.ts definiert ───────────────────────
+import "./app.ts";
diff --git a/responses/Delete Product.json b/responses/Delete Product.json
new file mode 100644
index 0000000..e16c76d
--- /dev/null
+++ b/responses/Delete Product.json	
@@ -0,0 +1 @@
+""
diff --git a/src/api-tester/responses/Get_List_Customers_response.json b/responses/Get List Customers.json
similarity index 89%
rename from src/api-tester/responses/Get_List_Customers_response.json
rename to responses/Get List Customers.json
index f0de185..13e0fb0 100644
--- a/src/api-tester/responses/Get_List_Customers_response.json
+++ b/responses/Get List Customers.json	
@@ -4,6 +4,7 @@
       "id": "5",
       "uuid": "",
       "number": "10002",
+      "deviatingCustomerNumber": "666",
       "customerType": "person",
       "name": "Kassen Mitarbeiter",
       "firstname": "",
@@ -29,15 +30,14 @@
       "salesManager": {
         "id": "1"
       },
-      "lead": {
-        "isLead": false,
-        "status": ""
-      }
+      "isLead": false,
+      "contactPerson": ""
     },
     {
       "id": "7",
       "uuid": "",
       "number": "10003",
+      "deviatingCustomerNumber": "78888",
       "customerType": "person",
       "name": "Testkunde ABC",
       "firstname": "",
@@ -66,21 +66,20 @@
       "salesManager": {
         "id": "5"
       },
-      "lead": {
-        "isLead": false,
-        "status": ""
-      }
+      "isLead": false,
+      "contactPerson": ""
     },
     {
       "id": "8",
       "uuid": "",
       "number": "10004",
+      "deviatingCustomerNumber": "123",
       "customerType": "person",
       "name": "Christian Hofmann",
       "firstname": "",
       "lastname": "",
       "title": "",
-      "salutation": "other",
+      "salutation": "mr",
       "birthdate": null,
       "department": "",
       "subDepartment": "",
@@ -98,15 +97,14 @@
       },
       "accountManager": null,
       "salesManager": null,
-      "lead": {
-        "isLead": false,
-        "status": ""
-      }
+      "isLead": false,
+      "contactPerson": ""
     },
     {
       "id": "9",
       "uuid": "",
       "number": "10023",
+      "deviatingCustomerNumber": "777",
       "customerType": "person",
       "name": "EDI Testkunde Pascal mit GLN 4304768000002",
       "firstname": "",
@@ -132,15 +130,14 @@
       "salesManager": {
         "id": "1"
       },
-      "lead": {
-        "isLead": false,
-        "status": ""
-      }
+      "isLead": false,
+      "contactPerson": ""
     },
     {
       "id": "13",
       "uuid": "",
       "number": "10005",
+      "deviatingCustomerNumber": "777",
       "customerType": "person",
       "name": "Kunde AT",
       "firstname": "",
@@ -166,15 +163,14 @@
       "salesManager": {
         "id": "1"
       },
-      "lead": {
-        "isLead": false,
-        "status": ""
-      }
+      "isLead": false,
+      "contactPerson": ""
     },
     {
       "id": "14",
       "uuid": "",
       "number": "10006",
+      "deviatingCustomerNumber": "",
       "customerType": "person",
       "name": "Kunde mit US$ Währung",
       "firstname": "",
@@ -200,15 +196,14 @@
       "salesManager": {
         "id": "5"
       },
-      "lead": {
-        "isLead": false,
-        "status": ""
-      }
+      "isLead": false,
+      "contactPerson": ""
     },
     {
       "id": "15",
       "uuid": "",
       "number": "10007",
+      "deviatingCustomerNumber": "666",
       "customerType": "person",
       "name": "Lawn Care",
       "firstname": "",
@@ -232,15 +227,14 @@
       },
       "accountManager": null,
       "salesManager": null,
-      "lead": {
-        "isLead": false,
-        "status": null
-      }
+      "isLead": false,
+      "contactPerson": "Patrick Raschle"
     },
     {
       "id": "17",
       "uuid": "",
       "number": "10008",
+      "deviatingCustomerNumber": "78888",
       "customerType": "person",
       "name": "Ricki",
       "firstname": "",
@@ -389,15 +383,14 @@
       "salesManager": {
         "id": "1"
       },
-      "lead": {
-        "isLead": false,
-        "status": ""
-      }
+      "isLead": false,
+      "contactPerson": ""
     },
     {
       "id": "18",
       "uuid": "",
       "number": "19329",
+      "deviatingCustomerNumber": "777",
       "customerType": "company",
       "name": "T4D",
       "firstname": "",
@@ -423,15 +416,14 @@
       "salesManager": {
         "id": "1"
       },
-      "lead": {
-        "isLead": false,
-        "status": ""
-      }
+      "isLead": false,
+      "contactPerson": ""
     },
     {
       "id": "19",
       "uuid": "",
       "number": "10009",
+      "deviatingCustomerNumber": "",
       "customerType": "person",
       "name": "Laufkundschaft",
       "firstname": "",
@@ -457,14 +449,12 @@
       "salesManager": {
         "id": "1"
       },
-      "lead": {
-        "isLead": false,
-        "status": ""
-      }
+      "isLead": false,
+      "contactPerson": ""
     }
   ],
   "extra": {
-    "totalCount": 252,
+    "totalCount": 256,
     "page": {
       "number": 1,
       "size": 10
diff --git a/src/api-tester/responses/Get_List_Invoices_response.json b/responses/Get List Invoices.json
similarity index 97%
rename from src/api-tester/responses/Get_List_Invoices_response.json
rename to responses/Get List Invoices.json
index 1bd44fe..a51b09f 100644
--- a/src/api-tester/responses/Get_List_Invoices_response.json
+++ b/responses/Get List Invoices.json	
@@ -155,7 +155,7 @@
       "additionalFields": [],
       "dunningSettings": {
         "level": "reminder1",
-        "date": "2025-03-31",
+        "date": "2025-05-20",
         "comment": "",
         "sent": false
       }
@@ -195,7 +195,7 @@
       "additionalFields": [],
       "dunningSettings": {
         "level": "reminder1",
-        "date": "2025-03-31",
+        "date": "2025-05-20",
         "comment": "",
         "sent": false
       }
@@ -235,7 +235,7 @@
       "additionalFields": [],
       "dunningSettings": {
         "level": "reminder1",
-        "date": "2025-03-31",
+        "date": "2025-05-20",
         "comment": "",
         "sent": false
       }
@@ -275,7 +275,7 @@
       "additionalFields": [],
       "dunningSettings": {
         "level": "reminder1",
-        "date": "2025-03-31",
+        "date": "2025-05-20",
         "comment": "",
         "sent": false
       }
@@ -355,7 +355,7 @@
       "additionalFields": [],
       "dunningSettings": {
         "level": "reminder1",
-        "date": "2025-03-31",
+        "date": "2025-05-20",
         "comment": "",
         "sent": false
       }
@@ -395,14 +395,14 @@
       "additionalFields": [],
       "dunningSettings": {
         "level": "reminder1",
-        "date": "2025-03-31",
+        "date": "2025-05-20",
         "comment": "",
         "sent": false
       }
     }
   ],
   "extra": {
-    "totalCount": 558,
+    "totalCount": 623,
     "page": {
       "number": 1,
       "size": 10
diff --git a/src/api-tester/responses/Get_List_Products_response.json b/responses/Get List Products.json
similarity index 93%
rename from src/api-tester/responses/Get_List_Products_response.json
rename to responses/Get List Products.json
index 495bf32..e222005 100644
--- a/src/api-tester/responses/Get_List_Products_response.json
+++ b/responses/Get List Products.json	
@@ -1,12 +1,12 @@
 {
   "data": [
     {
-      "id": "1420",
-      "uuid": "0195ec0c-a5f4-75af-b2b4-25bd4225a5ef",
+      "id": "1735",
+      "uuid": "0196ecb5-18f8-7aa4-a639-668ae27623cd",
       "name": "Testprodukt API",
       "description": "Dieses Produkt wurde über die API erstellt.",
       "shortDescription": null,
-      "number": "1000021000343",
+      "number": "1000021000640",
       "project": {
         "id": "3",
         "name": "Kasse"
@@ -18,15 +18,27 @@
       "standardSupplier": null,
       "stockCount": 0,
       "stockStats": {
-        "purchasedCount": null,
+        "purchasedCount": "0.0000",
         "totalCount": null,
-        "availableCount": null,
-        "inProductionCount": null
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
       },
-      "purchasePriceNet": null,
-      "purchasePriceGross": null,
-      "salesPriceNet": null,
-      "salesPriceGross": null,
       "shopPriceDisplay": null,
       "ean": "1234567890123",
       "manufacturerName": "",
@@ -103,15 +115,15 @@
       "unit": {
         "name": ""
       },
-      "updatedAt": "2025-03-31T13:53:26+02:00"
+      "updatedAt": "2025-05-20T10:21:05+02:00"
     },
     {
-      "id": "1419",
-      "uuid": "0195ebdc-75f5-7e00-a7f1-b5574e9b12a8",
+      "id": "1734",
+      "uuid": "0196e78e-c176-7c07-b310-ed5f894130f2",
       "name": "Testprodukt API",
       "description": "Dieses Produkt wurde über die API erstellt.",
       "shortDescription": null,
-      "number": "1000021000342",
+      "number": "1000021000639",
       "project": {
         "id": "3",
         "name": "Kasse"
@@ -220,15 +232,15 @@
       "unit": {
         "name": ""
       },
-      "updatedAt": "2025-03-31T13:07:05+02:00"
+      "updatedAt": "2025-05-19T10:04:04+02:00"
     },
     {
-      "id": "1418",
-      "uuid": "0195ebda-69cb-7983-8a7a-e3241ea93570",
+      "id": "1733",
+      "uuid": "0196d911-3fae-731a-90c6-52a3bfaddc90",
       "name": "Testprodukt API",
       "description": "Dieses Produkt wurde über die API erstellt.",
       "shortDescription": null,
-      "number": "1000021000341",
+      "number": "1000021000638",
       "project": {
         "id": "3",
         "name": "Kasse"
@@ -337,15 +349,15 @@
       "unit": {
         "name": ""
       },
-      "updatedAt": "2025-03-31T13:07:05+02:00"
+      "updatedAt": "2025-05-16T14:54:09+02:00"
     },
     {
-      "id": "1417",
-      "uuid": "0195ebd8-412c-7b33-82f2-13582b0418bb",
+      "id": "1732",
+      "uuid": "0196d2f5-4a31-7674-9750-421c2b1b08f7",
       "name": "Testprodukt API",
       "description": "Dieses Produkt wurde über die API erstellt.",
       "shortDescription": null,
-      "number": "1000021000340",
+      "number": "1000021000637",
       "project": {
         "id": "3",
         "name": "Kasse"
@@ -454,15 +466,15 @@
       "unit": {
         "name": ""
       },
-      "updatedAt": "2025-03-31T13:07:05+02:00"
+      "updatedAt": "2025-05-15T10:27:04+02:00"
     },
     {
-      "id": "1416",
-      "uuid": "0195ebd2-1c10-7921-96e1-9058d1b83f1d",
+      "id": "1731",
+      "uuid": "0196cdce-f0e9-7626-b161-04b030faae98",
       "name": "Testprodukt API",
       "description": "Dieses Produkt wurde über die API erstellt.",
       "shortDescription": null,
-      "number": "1000021000339",
+      "number": "1000021000636",
       "project": {
         "id": "3",
         "name": "Kasse"
@@ -571,15 +583,15 @@
       "unit": {
         "name": ""
       },
-      "updatedAt": "2025-03-31T13:07:05+02:00"
+      "updatedAt": "2025-05-14T10:10:09+02:00"
     },
     {
-      "id": "1415",
-      "uuid": "0195ebd1-c7ac-77c5-8623-583263eeec62",
+      "id": "1730",
+      "uuid": "0196ca4f-6eda-7eba-b2f0-d49dd1a082ef",
       "name": "Testprodukt API",
       "description": "Dieses Produkt wurde über die API erstellt.",
       "shortDescription": null,
-      "number": "1000021000338",
+      "number": "1000021000635",
       "project": {
         "id": "3",
         "name": "Kasse"
@@ -688,15 +700,15 @@
       "unit": {
         "name": ""
       },
-      "updatedAt": "2025-03-31T13:07:05+02:00"
+      "updatedAt": "2025-05-13T18:09:05+02:00"
     },
     {
-      "id": "1414",
-      "uuid": "0195ebcc-6e90-76cf-b97c-69f4f9f59df2",
+      "id": "1729",
+      "uuid": "0196ca4f-1af4-75f6-9f21-bb6cefc35053",
       "name": "Testprodukt API",
       "description": "Dieses Produkt wurde über die API erstellt.",
       "shortDescription": null,
-      "number": "1000021000337",
+      "number": "1000021000634",
       "project": {
         "id": "3",
         "name": "Kasse"
@@ -805,15 +817,15 @@
       "unit": {
         "name": ""
       },
-      "updatedAt": "2025-03-31T13:07:05+02:00"
+      "updatedAt": "2025-05-13T18:09:05+02:00"
     },
     {
-      "id": "1413",
-      "uuid": "0195ebc0-dbe8-773e-b22b-7cf978efd4fc",
+      "id": "1728",
+      "uuid": "0196ca4d-b70b-70de-a036-c499fd0dd56a",
       "name": "Testprodukt API",
       "description": "Dieses Produkt wurde über die API erstellt.",
       "shortDescription": null,
-      "number": "1000021000336",
+      "number": "1000021000633",
       "project": {
         "id": "3",
         "name": "Kasse"
@@ -922,15 +934,15 @@
       "unit": {
         "name": ""
       },
-      "updatedAt": "2025-03-31T12:36:05+02:00"
+      "updatedAt": "2025-05-13T18:09:05+02:00"
     },
     {
-      "id": "1412",
-      "uuid": "0195ebc0-0507-7190-a402-144cafcc3ee6",
+      "id": "1727",
+      "uuid": "0196ca4d-5934-7d56-9045-13cc3790284a",
       "name": "Testprodukt API",
       "description": "Dieses Produkt wurde über die API erstellt.",
       "shortDescription": null,
-      "number": "1000021000335",
+      "number": "1000021000632",
       "project": {
         "id": "3",
         "name": "Kasse"
@@ -1039,15 +1051,15 @@
       "unit": {
         "name": ""
       },
-      "updatedAt": "2025-03-31T12:36:05+02:00"
+      "updatedAt": "2025-05-13T18:09:05+02:00"
     },
     {
-      "id": "1411",
-      "uuid": "0195ebb8-970f-73fd-a356-e3482b2a7290",
+      "id": "1726",
+      "uuid": "0196ca4b-d67e-7e99-a458-eae50140b3d4",
       "name": "Testprodukt API",
       "description": "Dieses Produkt wurde über die API erstellt.",
       "shortDescription": null,
-      "number": "1000021000334",
+      "number": "1000021000631",
       "project": {
         "id": "3",
         "name": "Kasse"
@@ -1156,11 +1168,11 @@
       "unit": {
         "name": ""
       },
-      "updatedAt": "2025-03-31T12:36:05+02:00"
+      "updatedAt": "2025-05-13T18:09:05+02:00"
     }
   ],
   "extra": {
-    "totalCount": 920,
+    "totalCount": 1149,
     "page": {
       "number": 1,
       "size": 10
diff --git a/responses/Get List Projects.json b/responses/Get List Projects.json
new file mode 100644
index 0000000..5291fad
--- /dev/null
+++ b/responses/Get List Projects.json	
@@ -0,0 +1,541 @@
+{
+  "data": [
+    {
+      "id": "1",
+      "name": "Standard Projekt",
+      "keyName": "STANDARD",
+      "description": "Standard Projekt",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteWarehouseScan",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": "1"
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": "1"
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "2",
+      "name": "Golfshop",
+      "keyName": "GOLFSHOP",
+      "description": "Standard Projekt",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteWarehouse",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "3",
+      "name": "Kasse",
+      "keyName": "KASSE",
+      "description": "Standard Projekt",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "orderPos",
+      "pickingProcess": "shipmentNoteScan",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "4",
+      "name": "Knut Test",
+      "keyName": "DM",
+      "description": "",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteWarehouse",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "5",
+      "name": "Paul",
+      "keyName": "PR",
+      "description": "",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteWarehouseScan",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": "3"
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "6",
+      "name": "test",
+      "keyName": "TEST",
+      "description": "",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteWarehouse",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "9",
+      "name": "OneDayBaby",
+      "keyName": "STANDARD-1",
+      "description": "Standard Projekt",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNote",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "12",
+      "name": "POS",
+      "keyName": "POS",
+      "description": "",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "order",
+      "pickingProcess": "shipmentNote",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "17",
+      "name": "Pascal",
+      "keyName": "PASCAL",
+      "description": "",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "orderPos",
+      "pickingProcess": "shipmentNoteWarehouseScan",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "18",
+      "name": "Christian",
+      "keyName": "CH-1",
+      "description": "Standard Projekt",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteScan",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": "0"
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": "0"
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    }
+  ],
+  "extra": {
+    "totalCount": 42,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/responses/Get List Purchase Orders.json b/responses/Get List Purchase Orders.json
new file mode 100644
index 0000000..8ba2674
--- /dev/null
+++ b/responses/Get List Purchase Orders.json	
@@ -0,0 +1,941 @@
+{
+  "data": [
+    {
+      "id": "1",
+      "date": "2023-01-13",
+      "project": {
+        "id": "33"
+      },
+      "status": "created",
+      "documentNumber": "",
+      "supplier": {
+        "id": "20",
+        "number": "70015",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Paul Kunde",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "Turmweg 23",
+        "zipCode": "79341",
+        "city": "Kenzingen",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "0.0000"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": false,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Musterfirma GmbH",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "Eric-Stumpf-Platz 6",
+          "zipCode": "21432",
+          "city": "Münster",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "3",
+      "date": "2023-01-31",
+      "project": {
+        "id": "1"
+      },
+      "status": "canceled",
+      "documentNumber": "100000",
+      "supplier": {
+        "id": "3",
+        "number": "70000",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Schrauben Meier",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "113.0500"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": false,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Musterfirma GmbH",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "Eric-Stumpf-Platz 6",
+          "zipCode": "21432",
+          "city": "Münster",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "4",
+      "date": "2023-02-03",
+      "project": {
+        "id": "1"
+      },
+      "status": "completed",
+      "documentNumber": "100001",
+      "supplier": {
+        "id": "12",
+        "number": "70002",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Lieferant AT",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "AT",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "3.0000"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "EU delivery",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": true,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Lager AT",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "",
+          "zipCode": "",
+          "city": "",
+          "state": "",
+          "country": "AT",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "5",
+      "date": "2023-02-03",
+      "project": {
+        "id": "1"
+      },
+      "status": "created",
+      "documentNumber": "",
+      "supplier": {
+        "id": "12",
+        "number": "70002",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Lieferant AT",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "AT",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "0.0000"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "EU delivery",
+          "vatId": "AT232323",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": true,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Lager AT",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "",
+          "zipCode": "",
+          "city": "",
+          "state": "",
+          "country": "AT",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "6",
+      "date": "2023-02-08",
+      "project": {
+        "id": "1"
+      },
+      "status": "completed",
+      "documentNumber": "B-2332",
+      "supplier": {
+        "id": "11",
+        "number": "70001",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": true,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "AUD",
+          "amount": "157.0800"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": " 1234",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": false,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Musterfirma GmbH",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "Eric-Stumpf-Platz 6",
+          "zipCode": "21432",
+          "city": "Münster",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "7",
+      "date": "2023-02-08",
+      "project": {
+        "id": "1"
+      },
+      "status": "completed",
+      "documentNumber": "100002",
+      "supplier": {
+        "id": "11",
+        "number": "70001",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "3.5700"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": true
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": false,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Musterfirma GmbH",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "Eric-Stumpf-Platz 6",
+          "zipCode": "21432",
+          "city": "Münster",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "8",
+      "date": "2023-03-06",
+      "project": {
+        "id": "1"
+      },
+      "status": "completed",
+      "documentNumber": "100003",
+      "supplier": {
+        "id": "11",
+        "number": "70001",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "17.8500"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": false,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Musterfirma GmbH",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "Eric-Stumpf-Platz 6",
+          "zipCode": "21432",
+          "city": "Münster",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "9",
+      "date": "2023-03-07",
+      "project": {
+        "id": "11"
+      },
+      "status": "completed",
+      "documentNumber": "100004",
+      "supplier": {
+        "id": "11",
+        "number": "",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "5.9500"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": true
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": true,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Testkunde ABC",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "",
+          "zipCode": "",
+          "city": "",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "10",
+      "date": "2023-03-07",
+      "project": {
+        "id": "11"
+      },
+      "status": "completed",
+      "documentNumber": "100005",
+      "supplier": {
+        "id": "11",
+        "number": "",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "5.9500"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": true
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": true,
+        "deliveryAddress": {
+          "honorific": "Dr.",
+          "name": "Karlo Kunde",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "Angelegt durch die API",
+          "street": "Beispielstrasse 1",
+          "zipCode": "81245",
+          "city": "München",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "11",
+      "date": "2023-03-07",
+      "project": {
+        "id": "11"
+      },
+      "status": "completed",
+      "documentNumber": "100006",
+      "supplier": {
+        "id": "11",
+        "number": "",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "8.3300"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": true
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": true,
+        "deliveryAddress": {
+          "honorific": "Dr.",
+          "name": "Karlo Kunde",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "Angelegt durch die API",
+          "street": "Beispielstrasse 1",
+          "zipCode": "81245",
+          "city": "München",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    }
+  ],
+  "extra": {
+    "totalCount": 251,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/responses/Get List Returns.json b/responses/Get List Returns.json
new file mode 100644
index 0000000..d96c2c0
--- /dev/null
+++ b/responses/Get List Returns.json	
@@ -0,0 +1,267 @@
+{
+  "data": [
+    {
+      "id": "1",
+      "date": "2023-01-23",
+      "customer": {
+        "id": "8",
+        "number": "10004"
+      },
+      "documentNumber": "500001",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "19"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "2",
+      "date": "2023-01-23",
+      "customer": {
+        "id": "8",
+        "number": "10004"
+      },
+      "documentNumber": "500002",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "20"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "3",
+      "date": "2023-01-25",
+      "customer": {
+        "id": "8",
+        "number": "10004"
+      },
+      "documentNumber": "500003",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "21"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "4",
+      "date": "2023-02-02",
+      "customer": {
+        "id": "7",
+        "number": "10003"
+      },
+      "documentNumber": "500005",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": null,
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "5",
+      "date": "2023-01-31",
+      "customer": {
+        "id": "8",
+        "number": "10004"
+      },
+      "documentNumber": "500004",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "33"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "6",
+      "date": "2023-02-02",
+      "customer": {
+        "id": "8",
+        "number": "10004"
+      },
+      "documentNumber": "500006",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "33"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "8",
+      "date": "2024-08-07",
+      "customer": {
+        "id": "4",
+        "number": "100018"
+      },
+      "documentNumber": "DE20245008",
+      "tags": [
+        {
+          "id": "20",
+          "name": "Neues Tag via API",
+          "color": "a9ca45"
+        }
+      ],
+      "status": "released",
+      "salesOrder": {
+        "id": "79"
+      },
+      "progress": "announced",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "5",
+        "name": "Paul"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "9",
+      "date": "2023-02-28",
+      "customer": {
+        "id": "4",
+        "number": "100018"
+      },
+      "documentNumber": "500007",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "79"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "5",
+        "name": "Paul"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "10",
+      "date": "2025-04-10",
+      "customer": {
+        "id": "2",
+        "number": "10000"
+      },
+      "documentNumber": "2025 - 500046",
+      "tags": [
+        {
+          "id": "20",
+          "name": "Neues Tag via API",
+          "color": "a9ca45"
+        }
+      ],
+      "status": "released",
+      "salesOrder": null,
+      "progress": "announced",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "11",
+      "date": "2023-04-27",
+      "customer": {
+        "id": "17",
+        "number": "10008"
+      },
+      "documentNumber": "1",
+      "tags": [],
+      "status": "released",
+      "salesOrder": null,
+      "progress": "announced",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "4",
+        "name": "Knut Test"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    }
+  ],
+  "extra": {
+    "totalCount": 83,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/api-tester/responses/Get_List_Sales_Orders_response.json b/responses/Get List Sales Orders.json
similarity index 96%
rename from src/api-tester/responses/Get_List_Sales_Orders_response.json
rename to responses/Get List Sales Orders.json
index 5a8a5da..daba68a 100644
--- a/src/api-tester/responses/Get_List_Sales_Orders_response.json
+++ b/responses/Get List Sales Orders.json	
@@ -36,6 +36,7 @@
           "id": "13"
         },
         "currency": "EUR",
+        "costCenter": null,
         "billingAddress": {
           "name": "DimasTest",
           "department": "",
@@ -70,6 +71,8 @@
         "shippingMethod": {
           "id": "1"
         },
+        "preferredWarehouse": null,
+        "storageCountry": null,
         "shippingAddress": {
           "name": "DimasTest",
           "department": "",
diff --git a/responses/Get View Address.json b/responses/Get View Address.json
new file mode 100644
index 0000000..00a8f7c
--- /dev/null
+++ b/responses/Get View Address.json	
@@ -0,0 +1,25 @@
+{
+  "data": {
+    "id": "2",
+    "type": "masterdata",
+    "name": "Karlo Kunde GmbH & Co. KG",
+    "street": "Beispielstrasse 1",
+    "zip": "81245",
+    "city": "München",
+    "country": "DE",
+    "state": "BY",
+    "addressSupplement": "Adresszusatz",
+    "department": "Geschäftsführung",
+    "subDepartment": "Unterabteilung",
+    "contactDetails": {
+      "email": "me@example.com",
+      "phone": "089 111222333",
+      "gln": null
+    },
+    "deliveryDetails": null
+  },
+  "links": {
+    "self": "https://636a1d639f14e.xentral.biz/api/v2/customers/2/addresses/masterdata",
+    "customer": "https://636a1d639f14e.xentral.biz/api/v2/customers/2"
+  }
+}
diff --git a/responses/Get View Credit Note.json b/responses/Get View Credit Note.json
new file mode 100644
index 0000000..6c25561
--- /dev/null
+++ b/responses/Get View Credit Note.json	
@@ -0,0 +1,71 @@
+{
+  "data": {
+    "id": "1",
+    "number": "900000",
+    "date": "2023-01-23",
+    "createdAt": "2023-01-23T11:02:56+01:00",
+    "createdBy": {
+      "name": "Kassen Mitarbeiter"
+    },
+    "sentAt": null,
+    "sentBy": null,
+    "updatedAt": "2023-04-26T16:40:36+02:00",
+    "grossValue": {
+      "amount": "48.20",
+      "currency": "EUR"
+    },
+    "netValue": {
+      "amount": "40.50",
+      "currency": "EUR"
+    },
+    "costCenter": "",
+    "status": "approved",
+    "tags": [],
+    "project": {
+      "id": "1",
+      "name": "Standard Projekt"
+    },
+    "customer": {
+      "id": "8",
+      "name": "Test Kunde"
+    },
+    "externalOrderReference": "10035",
+    "devCustomer": "",
+    "billingAddress": {
+      "name": "Test Kunde",
+      "contactPerson": "",
+      "department": "",
+      "subdivision": "",
+      "street": "Werner-von-Siemens-Straße 6",
+      "additionalDetails": "Gebäude 15 L",
+      "city": "Augsburg",
+      "zipCode": "86159",
+      "country": "DE"
+    },
+    "paymentMethodName": "payment_in_advance",
+    "paymentStatus": "unknown",
+    "gln": "",
+    "taxation": 0,
+    "positions": [
+      {
+        "id": 1,
+        "position": 1,
+        "salesOrderPosition": {
+          "id": "2"
+        },
+        "createdAt": "2023-01-31T10:49:08+01:00",
+        "productId": 89,
+        "productNumber": "700001",
+        "description": "Schraube M10x20",
+        "quantity": 3,
+        "price": {
+          "amount": "15.00000000",
+          "currency": "EUR"
+        },
+        "vatCategory": "",
+        "taxRate": -1,
+        "discount": 10
+      }
+    ]
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Customer_response.json b/responses/Get View Customer.json
similarity index 91%
rename from src/api-tester/responses/Get_View_Customer_response.json
rename to responses/Get View Customer.json
index 04675f6..a4d04b1 100644
--- a/src/api-tester/responses/Get_View_Customer_response.json
+++ b/responses/Get View Customer.json	
@@ -3,6 +3,7 @@
     "id": "440",
     "uuid": "",
     "number": "16",
+    "deviatingCustomerNumber": "",
     "customerType": "person",
     "name": "DimasTest",
     "firstname": "",
@@ -29,10 +30,8 @@
     },
     "accountManager": null,
     "salesManager": null,
-    "lead": {
-      "isLead": false,
-      "status": ""
-    }
+    "isLead": false,
+    "contactPerson": ""
   },
   "links": {
     "self": "https://636a1d639f14e.xentral.biz/api/v2/customers/440",
diff --git a/responses/Get View Delivery Note.json b/responses/Get View Delivery Note.json
new file mode 100644
index 0000000..5d6cca2
--- /dev/null
+++ b/responses/Get View Delivery Note.json	
@@ -0,0 +1,227 @@
+{
+  "data": {
+    "id": "1",
+    "documentNumber": "300000",
+    "salesOrder": {
+      "id": "19"
+    },
+    "customerOrderNumber": "",
+    "updatedAt": "2024-08-13 12:01:14",
+    "date": "2023-01-23",
+    "status": "sent",
+    "customer": {
+      "id": "8",
+      "number": "10004"
+    },
+    "comment": "",
+    "project": {
+      "id": "1"
+    },
+    "bodyOutroduction": "",
+    "bodyIntroduction": "",
+    "internalDesignation": "",
+    "language": {
+      "iso2": "DE"
+    },
+    "delivery": {
+      "shippingMethod": {
+        "id": "1"
+      },
+      "shippingAddress": {
+        "name": "Test Kunde",
+        "department": "",
+        "subDepartment": "",
+        "street": "Werner-von-Siemens-Straße 6",
+        "zipCode": "86159",
+        "city": "Augsburg",
+        "state": "BY",
+        "country": "DE",
+        "gln": ""
+      },
+      "deliveryTerms": null
+    },
+    "positions": [
+      {
+        "id": "1",
+        "quantity": 10,
+        "comment": "",
+        "product": {
+          "id": "89",
+          "number": "700001",
+          "name": "Schraube M10x20",
+          "description": "",
+          "freeFields": [
+            {
+              "id": "1",
+              "value": ""
+            },
+            {
+              "id": "2",
+              "value": ""
+            },
+            {
+              "id": "3",
+              "value": ""
+            },
+            {
+              "id": "4",
+              "value": ""
+            },
+            {
+              "id": "5",
+              "value": ""
+            },
+            {
+              "id": "6",
+              "value": ""
+            },
+            {
+              "id": "7",
+              "value": ""
+            },
+            {
+              "id": "8",
+              "value": ""
+            },
+            {
+              "id": "9",
+              "value": ""
+            },
+            {
+              "id": "10",
+              "value": ""
+            },
+            {
+              "id": "11",
+              "value": ""
+            },
+            {
+              "id": "12",
+              "value": ""
+            },
+            {
+              "id": "13",
+              "value": ""
+            },
+            {
+              "id": "14",
+              "value": ""
+            },
+            {
+              "id": "15",
+              "value": ""
+            },
+            {
+              "id": "16",
+              "value": ""
+            },
+            {
+              "id": "17",
+              "value": ""
+            },
+            {
+              "id": "18",
+              "value": ""
+            },
+            {
+              "id": "19",
+              "value": ""
+            },
+            {
+              "id": "20",
+              "value": ""
+            },
+            {
+              "id": "21",
+              "value": ""
+            },
+            {
+              "id": "22",
+              "value": ""
+            },
+            {
+              "id": "23",
+              "value": ""
+            },
+            {
+              "id": "24",
+              "value": ""
+            },
+            {
+              "id": "25",
+              "value": ""
+            },
+            {
+              "id": "26",
+              "value": ""
+            },
+            {
+              "id": "27",
+              "value": ""
+            },
+            {
+              "id": "28",
+              "value": ""
+            },
+            {
+              "id": "29",
+              "value": ""
+            },
+            {
+              "id": "30",
+              "value": ""
+            },
+            {
+              "id": "31",
+              "value": ""
+            },
+            {
+              "id": "32",
+              "value": ""
+            },
+            {
+              "id": "33",
+              "value": ""
+            },
+            {
+              "id": "34",
+              "value": ""
+            },
+            {
+              "id": "35",
+              "value": ""
+            },
+            {
+              "id": "36",
+              "value": ""
+            },
+            {
+              "id": "37",
+              "value": ""
+            },
+            {
+              "id": "38",
+              "value": ""
+            },
+            {
+              "id": "39",
+              "value": ""
+            },
+            {
+              "id": "40",
+              "value": ""
+            }
+          ]
+        }
+      }
+    ],
+    "log": {
+      "createdAt": "2023-01-23T11:01:49+01:00",
+      "createdBy": {
+        "id": "5",
+        "name": "Kassen Mitarbeiter"
+      }
+    },
+    "tags": []
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Invoice_response.json b/responses/Get View Invoice.json
similarity index 94%
rename from src/api-tester/responses/Get_View_Invoice_response.json
rename to responses/Get View Invoice.json
index 01b27c3..8eb9d19 100644
--- a/src/api-tester/responses/Get_View_Invoice_response.json
+++ b/responses/Get View Invoice.json	
@@ -12,7 +12,7 @@
       },
       "createdAt": "2023-03-01T12:37:04+01:00",
       "sentAt": null,
-      "updatedAt": "2025-03-31T01:11:05+02:00"
+      "updatedAt": "2025-05-20T01:07:05+02:00"
     },
     "amountGross": 82.47,
     "amountNet": 69.3,
@@ -45,7 +45,7 @@
     "paymentMethodName": "invoice",
     "paymentStatus": "pending",
     "dunning": "mahnung1",
-    "dunningDate": "2025-03-31",
+    "dunningDate": "2025-05-20",
     "gln": "",
     "taxation": 0,
     "tags": [],
@@ -75,7 +75,7 @@
     },
     "dunningSettings": {
       "level": "reminder1",
-      "date": "2025-03-31",
+      "date": "2025-05-20",
       "comment": "",
       "sent": false
     },
diff --git a/responses/Get View Liability.json b/responses/Get View Liability.json
new file mode 100644
index 0000000..f573f69
--- /dev/null
+++ b/responses/Get View Liability.json	
@@ -0,0 +1,85 @@
+{
+  "data": {
+    "id": "1",
+    "documentNumber": "2024 - 10013",
+    "date": "2023-01-30",
+    "createdAt": "2023-01-30 15:03:48+01:00",
+    "createdBy": {
+      "name": "Administrator"
+    },
+    "updatedAt": "2024-11-12 00:31:22+01:00",
+    "status": "PAID",
+    "supplier": {
+      "id": "3"
+    },
+    "supplierInvoiceNumber": "45234525",
+    "receiptDate": "2023-01-30 00:00:00+01:00",
+    "serviceDate": null,
+    "financials": {
+      "amountGross": {
+        "amount": "500.00",
+        "currency": ""
+      },
+      "amountNet": {
+        "amount": "420.17",
+        "currency": ""
+      },
+      "freightCharge": 0,
+      "taxation": "inland",
+      "taxes": {
+        "normalTax": {
+          "rate": 19,
+          "amount": 79.83
+        },
+        "reducedTax": {
+          "rate": 7,
+          "amount": 0
+        },
+        "customTax1": {
+          "rate": -1,
+          "amount": 0
+        },
+        "customTax2": {
+          "rate": -1,
+          "amount": 0
+        }
+      },
+      "paymentTerms": {
+        "dueDate": "2023-01-30",
+        "earlyPaymentDate": "2023-01-30",
+        "earlyPaymentDiscount": 0,
+        "earlyPaymentDiscountAmount": 0
+      },
+      "bookingText": "",
+      "payment": {
+        "methodName": "vorkasse",
+        "paidAmount": -613.74,
+        "paidOnDate": "2023-05-19",
+        "discountReceived": 0
+      },
+      "costCenter": "3445",
+      "glAccount": "1234"
+    },
+    "purchaseOrder": null,
+    "assignedPurchaseOrders": [],
+    "project": {
+      "id": "1"
+    },
+    "accounting": [
+      {
+        "glAccount": " 907643",
+        "bookingText": "",
+        "amount": {
+          "amount": "307.87",
+          "currency": "EUR"
+        },
+        "tax": {
+          "rate": 19
+        },
+        "costCenter": ""
+      }
+    ],
+    "positions": [],
+    "purpose": null
+  }
+}
diff --git a/responses/Get View Media.json b/responses/Get View Media.json
new file mode 100644
index 0000000..0ef0012
--- /dev/null
+++ b/responses/Get View Media.json	
@@ -0,0 +1,31 @@
+{
+  "data": [
+    {
+      "id": "94",
+      "product": {
+        "id": "1"
+      },
+      "title": "",
+      "description": "",
+      "keyword": "defaultImage",
+      "sort": 1,
+      "currentVersion": {
+        "id": "94",
+        "version": 1,
+        "url": "/api/productMedia/94/versions/1",
+        "remark": "Initiale Version",
+        "filename": "schraube.jpeg",
+        "size": 30491,
+        "updatedAt": "2023-01-04T10:06:09+01:00"
+      },
+      "updatedAt": "2023-01-04T10:06:09+01:00"
+    }
+  ],
+  "extra": {
+    "totalCount": 1,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/responses/Get View Options of a Product.json b/responses/Get View Options of a Product.json
new file mode 100644
index 0000000..e1db50b
--- /dev/null
+++ b/responses/Get View Options of a Product.json	
@@ -0,0 +1,71 @@
+{
+  "data": [
+    {
+      "id": "1",
+      "name": "Größe",
+      "sort": 0,
+      "createdAt": "2022-11-25T11:52:28+01:00"
+    },
+    {
+      "id": "3",
+      "name": "Farbe",
+      "sort": 0,
+      "createdAt": "2023-01-19T14:34:44+01:00"
+    },
+    {
+      "id": "4",
+      "name": "Größe",
+      "sort": 1,
+      "createdAt": "2023-01-19T14:35:00+01:00"
+    },
+    {
+      "id": "5",
+      "name": "Jahrgang",
+      "sort": 1,
+      "createdAt": "2023-02-06T11:13:53+01:00"
+    },
+    {
+      "id": "6",
+      "name": "Farbe",
+      "sort": 1,
+      "createdAt": "2023-03-03T14:47:20+01:00"
+    },
+    {
+      "id": "7",
+      "name": "Größe",
+      "sort": 2,
+      "createdAt": "2023-03-03T14:48:16+01:00"
+    },
+    {
+      "id": "8",
+      "name": "Farbe",
+      "sort": 1,
+      "createdAt": "2023-03-03T14:58:42+01:00"
+    },
+    {
+      "id": "9",
+      "name": "Größe",
+      "sort": 2,
+      "createdAt": "2023-03-03T14:59:22+01:00"
+    },
+    {
+      "id": "10",
+      "name": "Farbe",
+      "sort": 1,
+      "createdAt": "2023-03-03T15:02:35+01:00"
+    },
+    {
+      "id": "11",
+      "name": "Größe",
+      "sort": 2,
+      "createdAt": "2023-03-03T15:03:08+01:00"
+    }
+  ],
+  "extra": {
+    "totalCount": 83,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/responses/Get View Parts.json b/responses/Get View Parts.json
new file mode 100644
index 0000000..872cd86
--- /dev/null
+++ b/responses/Get View Parts.json	
@@ -0,0 +1,9 @@
+{
+  "data": [],
+  "extra": {
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/responses/Get View Product.json b/responses/Get View Product.json
new file mode 100644
index 0000000..01b486d
--- /dev/null
+++ b/responses/Get View Product.json	
@@ -0,0 +1,153 @@
+{
+  "data": {
+    "id": "1",
+    "uuid": "018a98cc-c6e3-7457-ba0e-cb7e18deaac9",
+    "name": "Schraube TEST Uebertragenmodul",
+    "description": "Schrauben sind unsichtbare Helden des Alltags, die uns in vielen Bereichen des Lebens unterstützen. Sie halten Dinge zusammen und befestigen sie. Im Notfall können sie sogar als Werkzeug dienen. Sammler schätzen besondere und seltene Schrauben in ihrer Sammlung. Schrauben sind also mehr als nur ein einfaches Bauteil, sie sind wahre Allrounder und wichtiger Bestandteil unseres Alltags.",
+    "shortDescription": null,
+    "number": "Xentral--Ticket012313",
+    "project": {
+      "id": "32",
+      "name": "DEV"
+    },
+    "category": {
+      "id": "1",
+      "name": "Handelsware (100000)"
+    },
+    "standardSupplier": {
+      "id": "3"
+    },
+    "stockCount": 74.48,
+    "shopPriceDisplay": "0.00",
+    "ean": "7284242",
+    "manufacturer": {
+      "name": "Hersteller 123",
+      "number": null,
+      "url": null
+    },
+    "customsTariffNumber": "ZTN_47110815",
+    "options": [],
+    "selectedOptions": [],
+    "variants": [],
+    "isVariant": false,
+    "variantOf": null,
+    "mainVariant": null,
+    "thumbnailUrl": "https://636a1d639f14e.xentral.biz/index.php?module=artikel&action=thumbnail&id=1&bildvorschau=94_100_100",
+    "thumbnailId": "94",
+    "tags": [
+      {
+        "id": "1",
+        "name": "Erledigt",
+        "color": "339966"
+      }
+    ],
+    "freeFields": [
+      {
+        "id": "1",
+        "name": "Info",
+        "value": "1"
+      },
+      {
+        "id": "2",
+        "name": "Testnummer",
+        "value": "CLS1000002"
+      },
+      {
+        "id": "11",
+        "name": "Variante ausblenden",
+        "value": "1"
+      },
+      {
+        "id": "28",
+        "name": "TestFreiFeld28",
+        "value": "P700001"
+      },
+      {
+        "id": "30",
+        "name": "Leistungsdatum",
+        "value": "01.10.2025"
+      },
+      {
+        "id": "36",
+        "name": "Date",
+        "value": "test"
+      }
+    ],
+    "countryOfOrigin": "CN",
+    "regionOfOrigin": "ausländischer Ursprung",
+    "internalComment": "",
+    "isDeleted": false,
+    "measurements": {
+      "weight": {
+        "value": 0,
+        "unit": "kg"
+      },
+      "netWeight": {
+        "value": 0,
+        "unit": "kg"
+      },
+      "length": {
+        "value": 0,
+        "unit": "cm"
+      },
+      "width": {
+        "value": 0,
+        "unit": "cm"
+      },
+      "height": {
+        "value": 0,
+        "unit": "cm"
+      }
+    },
+    "minimumOrderQuantity": 0,
+    "minimumStorageQuantity": 0,
+    "salesTax": "standard",
+    "hasBatches": false,
+    "serialNumbersMode": "disabled",
+    "hasBestBeforeDate": false,
+    "hasBillOfMaterials": false,
+    "isAssembledJustInTime": false,
+    "isProductionProduct": false,
+    "isExternallyProduced": false,
+    "allowPurchaseFromAllSuppliers": false,
+    "isDisabled": false,
+    "disabledReason": null,
+    "hidePriceOnDocuments": false,
+    "ageRating": null,
+    "isStockItem": true,
+    "defaultStorageLocation": {
+      "id": "116",
+      "designation": "3",
+      "warehouse": {
+        "id": "1",
+        "designation": "Hauptlager"
+      }
+    },
+    "isStockTakingDisabled": false,
+    "isCustomProduct": false,
+    "hideJustInTimeItemsOnDocuments": false,
+    "markAsSoldOut": false,
+    "markAsInactive": false,
+    "isRemainingQuantity": false,
+    "isShippingCostsProduct": false,
+    "discount": {
+      "isDiscountProduct": false,
+      "discountPercentage": 0
+    },
+    "stockTaking": {
+      "hasStockTakingValue": false,
+      "stockTakingValue": 0
+    },
+    "calculatedPurchasePrice": {
+      "hasCalculatedPurchasePrice": true,
+      "price": {
+        "amount": "0.0000",
+        "currency": "EUR"
+      }
+    },
+    "unit": {
+      "name": "Stk"
+    },
+    "updatedAt": "2025-05-20T10:52:08+02:00"
+  }
+}
diff --git a/responses/Get View Purchase Order.json b/responses/Get View Purchase Order.json
new file mode 100644
index 0000000..288b878
--- /dev/null
+++ b/responses/Get View Purchase Order.json	
@@ -0,0 +1,150 @@
+{
+  "data": {
+    "id": "1",
+    "date": "2023-01-13",
+    "project": {
+      "id": "33"
+    },
+    "status": "created",
+    "documentNumber": "",
+    "supplier": {
+      "id": "20",
+      "number": "70015",
+      "customerNumberAtSupplier": "",
+      "honorific": "",
+      "name": "Paul Kunde",
+      "department": "",
+      "subDepartment": "",
+      "extraAddressLine": "",
+      "street": "Turmweg 23",
+      "zipCode": "79341",
+      "city": "Kenzingen",
+      "state": "",
+      "country": "DE",
+      "contactPerson": "",
+      "email": "",
+      "telephone": "",
+      "telefax": ""
+    },
+    "bodyIntroduction": "",
+    "bodyOutroduction": "",
+    "requestForQuotation": null,
+    "suppliersOfferReference": "",
+    "internalDesignation": "",
+    "language": {
+      "iso2": "DE"
+    },
+    "salesOrderConfirmationReference": "",
+    "isConfirmationRequested": false,
+    "isConfirmed": false,
+    "confirmedVia": "Internet",
+    "financials": {
+      "paymentMethod": {
+        "id": "13"
+      },
+      "total": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "paymentTerms": {
+        "paymentTargetDiscount": 0,
+        "paymentTargetDays": 0,
+        "paymentTargetDiscountDays": 0,
+        "paymentTargetDiscountAmount": 0,
+        "isPaymentTargetDiscountApplied": false
+      },
+      "costCenter": "",
+      "tax": {
+        "taxation": "Domestic",
+        "vatId": "",
+        "taxDisplay": "Automatic"
+      }
+    },
+    "delivery": {
+      "deliveryTerms": null,
+      "hasDifferentDeliveryAddress": false,
+      "deliveryAddress": {
+        "honorific": "",
+        "name": "Musterfirma GmbH",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "Eric-Stumpf-Platz 6",
+        "zipCode": "21432",
+        "city": "Münster",
+        "state": "",
+        "country": "DE",
+        "contactPerson": ""
+      },
+      "dates": {
+        "desiredDeliveryDate": null,
+        "confirmedDeliveryDate": null
+      }
+    },
+    "formatting": {
+      "hideLetterHead": false,
+      "hidePrices": false,
+      "hideProductNumbers": false,
+      "showLongProductNumbers": false,
+      "hideProductDescriptions": false,
+      "showOwnProductNumberInColumn": false
+    },
+    "internalComment": "",
+    "liabilitiesInfo": "",
+    "positions": [
+      {
+        "id": "242",
+        "project": {
+          "id": "1"
+        },
+        "product": {
+          "id": "110"
+        },
+        "name": "Karton",
+        "description": "",
+        "quantity": 1000,
+        "delivered": 0,
+        "salesOrderPosition": null,
+        "price": {
+          "amount": "0.25000000",
+          "currency": "EUR"
+        },
+        "tax": {
+          "vatCategory": "standard",
+          "taxText": "",
+          "rate": 19
+        }
+      },
+      {
+        "id": "244",
+        "project": {
+          "id": "1"
+        },
+        "product": {
+          "id": "572"
+        },
+        "name": "Bausatz ohne EK",
+        "description": "",
+        "quantity": 155,
+        "delivered": 0,
+        "salesOrderPosition": null,
+        "price": {
+          "amount": "1.34000000",
+          "currency": "EUR"
+        },
+        "tax": {
+          "vatCategory": "standard",
+          "taxText": "",
+          "rate": 19
+        }
+      }
+    ],
+    "log": {
+      "createdAt": "2023-01-13T12:49:37+01:00",
+      "isSent": false,
+      "sentAt": null,
+      "sentBy": "",
+      "sentVia": ""
+    }
+  }
+}
diff --git a/responses/Get View Purchase Prices.json b/responses/Get View Purchase Prices.json
new file mode 100644
index 0000000..0620a90
--- /dev/null
+++ b/responses/Get View Purchase Prices.json	
@@ -0,0 +1,94 @@
+{
+  "data": [
+    {
+      "id": "113",
+      "amount": 10,
+      "supplier": {
+        "id": "67",
+        "name": "BLANCO GmbH + Co KG"
+      },
+      "price": {
+        "amount": "0.55000000",
+        "currency": "EUR"
+      },
+      "additionalInformation": {
+        "supplierAvailableStock": 0,
+        "supplierAvailableStockDate": "0000-00-00",
+        "safetyStock": 0,
+        "standardDeliveryTime": 0,
+        "standardDeliveryTimeUnit": null,
+        "currentDeliveryTime": 0,
+        "currentDeliveryTimeUnit": null
+      }
+    },
+    {
+      "id": "112",
+      "amount": 1,
+      "supplier": {
+        "id": "67",
+        "name": "BLANCO GmbH + Co KG"
+      },
+      "price": {
+        "amount": "0.88000000",
+        "currency": "EUR"
+      },
+      "additionalInformation": {
+        "supplierAvailableStock": 0,
+        "supplierAvailableStockDate": "0000-00-00",
+        "safetyStock": 0,
+        "standardDeliveryTime": 0,
+        "standardDeliveryTimeUnit": null,
+        "currentDeliveryTime": 0,
+        "currentDeliveryTimeUnit": null
+      }
+    },
+    {
+      "id": "106",
+      "amount": 1,
+      "supplier": {
+        "id": "3",
+        "name": "Schrauben Meier"
+      },
+      "price": {
+        "amount": "15.00000000",
+        "currency": "EUR"
+      },
+      "additionalInformation": {
+        "supplierAvailableStock": 0,
+        "supplierAvailableStockDate": "0000-00-00",
+        "safetyStock": 0,
+        "standardDeliveryTime": 0,
+        "standardDeliveryTimeUnit": null,
+        "currentDeliveryTime": 0,
+        "currentDeliveryTimeUnit": null
+      }
+    },
+    {
+      "id": "151",
+      "amount": 1,
+      "supplier": {
+        "id": "3",
+        "name": "Schrauben Meier"
+      },
+      "price": {
+        "amount": "12.99000000",
+        "currency": "EUR"
+      },
+      "additionalInformation": {
+        "supplierAvailableStock": 0,
+        "supplierAvailableStockDate": "0000-00-00",
+        "safetyStock": 0,
+        "standardDeliveryTime": 0,
+        "standardDeliveryTimeUnit": null,
+        "currentDeliveryTime": 0,
+        "currentDeliveryTimeUnit": null
+      }
+    }
+  ],
+  "extra": {
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/responses/Get View Return.json b/responses/Get View Return.json
new file mode 100644
index 0000000..8972387
--- /dev/null
+++ b/responses/Get View Return.json	
@@ -0,0 +1,39 @@
+{
+  "data": {
+    "id": "1",
+    "date": "2023-01-23",
+    "documentNumber": "500001",
+    "progress": "done",
+    "shippingMethod": {
+      "id": 1,
+      "name": "DHL"
+    },
+    "project": {
+      "id": 1,
+      "name": "Standard Projekt"
+    },
+    "status": "completed",
+    "bodyOutroduction": "",
+    "internalComment": "",
+    "salesOrder": {
+      "id": "19"
+    },
+    "positions": [
+      {
+        "id": "1",
+        "salesOrderPosition": {
+          "id": "2"
+        },
+        "product": {
+          "id": "89",
+          "number": "700001",
+          "name": "Schraube M10x20"
+        },
+        "quantity": 3,
+        "returnReason": {
+          "designation": "14 Tage Rückgaberecht"
+        }
+      }
+    ]
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Sales_Order_response.json b/responses/Get View Sales Order.json
similarity index 98%
rename from src/api-tester/responses/Get_View_Sales_Order_response.json
rename to responses/Get View Sales Order.json
index e6ba02d..bba1dca 100644
--- a/src/api-tester/responses/Get_View_Sales_Order_response.json
+++ b/responses/Get View Sales Order.json	
@@ -37,6 +37,7 @@
         "id": "11"
       },
       "currency": "EUR",
+      "costCenter": null,
       "billingAddress": {
         "name": "Test Kunde",
         "department": "",
@@ -81,7 +82,9 @@
         "state": "BY",
         "country": "DE",
         "gln": ""
-      }
+      },
+      "preferredWarehouse": null,
+      "storageCountry": null
     },
     "netSales": {
       "amount": "1.60",
diff --git a/responses/Get View Sales Prices.json b/responses/Get View Sales Prices.json
new file mode 100644
index 0000000..9486467
--- /dev/null
+++ b/responses/Get View Sales Prices.json	
@@ -0,0 +1,81 @@
+{
+  "data": [
+    {
+      "id": "501",
+      "customer": null,
+      "customerGroup": {
+        "id": "6",
+        "name": "Händler",
+        "reference": "HK"
+      },
+      "validFrom": null,
+      "expiresAt": null,
+      "amount": 1,
+      "price": {
+        "amount": "10.00000000",
+        "currency": "EUR"
+      }
+    },
+    {
+      "id": "474",
+      "customer": null,
+      "customerGroup": {
+        "id": "6",
+        "name": "Händler",
+        "reference": "HK"
+      },
+      "validFrom": null,
+      "expiresAt": null,
+      "amount": 100,
+      "price": {
+        "amount": "7.50000000",
+        "currency": "EUR"
+      }
+    },
+    {
+      "id": "472",
+      "customer": null,
+      "customerGroup": null,
+      "validFrom": null,
+      "expiresAt": null,
+      "amount": 1,
+      "price": {
+        "amount": "0.18000000",
+        "currency": "EUR"
+      }
+    },
+    {
+      "id": "473",
+      "customer": null,
+      "customerGroup": null,
+      "validFrom": null,
+      "expiresAt": null,
+      "amount": 2,
+      "price": {
+        "amount": "1.80000000",
+        "currency": "EUR"
+      }
+    },
+    {
+      "id": "515",
+      "customer": {
+        "id": "2",
+        "name": "Karlo Kunde GmbH & Co. KG"
+      },
+      "customerGroup": null,
+      "validFrom": null,
+      "expiresAt": null,
+      "amount": 1,
+      "price": {
+        "amount": "5.00000000",
+        "currency": "EUR"
+      }
+    }
+  ],
+  "extra": {
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/responses/Get View Suppliers.json b/responses/Get View Suppliers.json
new file mode 100644
index 0000000..9801ad4
--- /dev/null
+++ b/responses/Get View Suppliers.json	
@@ -0,0 +1,18 @@
+{
+  "data": {
+    "id": "11",
+    "type": "company",
+    "general": {
+      "name": "Ich-Liefer-Alles",
+      "address": {
+        "note": "",
+        "street": "Heustätter Str. 25",
+        "zip": "70000",
+        "city": "Stuttgart",
+        "state": "",
+        "country": "DE"
+      }
+    },
+    "tags": []
+  }
+}
diff --git a/routes/api/actions.ts b/routes/api/actions.ts
deleted file mode 100644
index 2871c68..0000000
--- a/routes/api/actions.ts
+++ /dev/null
@@ -1,152 +0,0 @@
-// routes/api/actions.ts
-
-import { HandlerContext } from "$fresh/server.ts";
-import { kvInstance } from "../../src/api-tester/core/kv.ts";
-import { getSlackWorkspaces } from "../../src/api-tester/core/slack/slackWorkspaces.ts";
-
-/**
- * Verifiziert, dass der Request wirklich von Slack kommt.
- */
-async function verifySlackRequest(
-  signingSecret: string,
-  timestamp: string,
-  rawBody: string,
-  slackSig: string,
-): Promise<boolean> {
-  const encoder = new TextEncoder();
-  const keyData = encoder.encode(signingSecret);
-  const msgData = encoder.encode(`v0:${timestamp}:${rawBody}`);
-  const cryptoKey = await crypto.subtle.importKey(
-    "raw",
-    keyData,
-    { name: "HMAC", hash: "SHA-256" },
-    false,
-    ["sign"],
-  );
-  const signature = await crypto.subtle.sign("HMAC", cryptoKey, msgData);
-  const hex = Array.from(new Uint8Array(signature))
-    .map((b) => b.toString(16).padStart(2, "0"))
-    .join("");
-  return `v0=${hex}` === slackSig;
-}
-
-export const handler = async (
-  req: Request,
-  _ctx: HandlerContext,
-): Promise<Response> => {
-  const timestamp = req.headers.get("X-Slack-Request-Timestamp") ?? "";
-  const slackSig = req.headers.get("X-Slack-Signature") ?? "";
-  const rawBody = await req.text();
-
-  // Slack schickt payload als urlencoded FormData
-  const params = new URLSearchParams(rawBody);
-  const payload = JSON.parse(params.get("payload")!);
-  const action = payload.actions?.[0];
-
-  // Workspace anhand des Signing-Secret finden
-  const workspaces = getSlackWorkspaces();
-  const ws = workspaces.find((w) =>
-    verifySlackRequest(w.signingSecret, timestamp, rawBody, slackSig)
-  );
-  if (!ws) {
-    return new Response("Invalid signature", { status: 401 });
-  }
-
-  // Helper für Slack API Calls
-  const callSlack = (path: string, body: unknown) =>
-    fetch(`https://slack.com/api/${path}`, {
-      method: "POST",
-      headers: {
-        "Content-Type": "application/json",
-        Authorization: `Bearer ${ws.token}`,
-      },
-      body: JSON.stringify(body),
-    });
-
-  // 1) Button "Einverstanden" → Modal öffnen
-  if (action?.action_id === "open_pin_modal") {
-    await callSlack("views.open", {
-      trigger_id: payload.trigger_id,
-      view: {
-        type: "modal",
-        callback_id: "submit_pin",
-        private_metadata: action.value, // unser key
-        title: { type: "plain_text", text: "PIN bestätigen" },
-        blocks: [
-          {
-            type: "input",
-            block_id: "pin_input",
-            label: {
-              type: "plain_text",
-              text: "Gib deinen 4-stelligen PIN ein",
-            },
-            element: {
-              type: "plain_text_input",
-              action_id: "pin_value",
-              placeholder: { type: "plain_text", text: "••••" },
-            },
-          },
-        ],
-        submit: { type: "plain_text", text: "Bestätigen" },
-      },
-    });
-    return new Response(null, { status: 200 });
-  }
-
-  // 2) Button "Warten" → Approval auf "waiting" setzen
-  if (action?.action_id === "wait_action") {
-    const key = action.value as string;
-    const approvalsRes = await kvInstance.get<Record<string, string>>([
-      "approvals",
-    ]);
-    const approvals = approvalsRes.value ?? {}; // <<< hier Default
-    approvals[key] = "waiting";
-    await kvInstance.set(["approvals"], approvals);
-    return new Response("", { status: 200 });
-  }
-
-  // 3) Modal-Submission: PIN prüfen und ggf. auf "approved" setzen
-  if (
-    payload.type === "view_submission" &&
-    payload.view.callback_id === "submit_pin"
-  ) {
-    const key = payload.view.private_metadata; // unser key
-    const pin = payload.view.state.values.pin_input.pin_value.value;
-    const expectedPin = Deno.env.get("APPROVAL_PIN")!;
-    console.log("🔑 Loaded APPROVAL_PIN:", expectedPin);
-
-    if (pin === expectedPin) {
-      // aus KV lesen und defaulten
-      const approvalsRes = await kvInstance.get<Record<string, string>>([
-        "approvals",
-      ]);
-      const approvals = approvalsRes.value ?? {}; // <<< hier Default
-      approvals[key] = "approved";
-      await kvInstance.set(["approvals"], approvals);
-
-      // optional: Ephemeral-Feedback
-      await callSlack("chat.postEphemeral", {
-        channel: payload.view.private_metadata,
-        user: payload.user.id,
-        text: `✅ Freigabe für \`${key}\` erfolgreich.`,
-      });
-
-      return new Response("", { status: 200 });
-    } else {
-      // PIN falsch → Fehler im Modal anzeigen
-      return new Response(
-        JSON.stringify({
-          response_action: "errors",
-          errors: { pin_input: "Falscher PIN" },
-        }),
-        {
-          status: 200,
-          headers: { "Content-Type": "application/json" },
-        },
-      );
-    }
-  }
-
-  // Standard-Response für alle anderen Fälle
-  return new Response(null, { status: 200 });
-};
diff --git a/routes/api/kv-dump.ts b/routes/api/kv-dump.ts
index 7e55d70..b0d646c 100644
--- a/routes/api/kv-dump.ts
+++ b/routes/api/kv-dump.ts
@@ -1,19 +1,45 @@
 // routes/api/kv-dump.ts
 
-import type { Handlers } from "$fresh/server.ts";
-// vorher: import { kv } from "../../src/api-tester/core/kv.ts";
+import { Handlers } from "$fresh/server.ts";
 import { kvInstance } from "../../src/api-tester/core/kv.ts";
 
 export const handler: Handlers = {
   async GET() {
-    const kv = await kvInstance;
-    const approvals =
-      (await kv.get<Record<string, string>>(["approvals"])).value ?? {};
-    const rawBlocks =
-      (await kv.get<Record<string, unknown[]>>(["rawBlocks"])).value ?? {};
-    return new Response(
-      JSON.stringify({ approvals, rawBlocks }, null, 2),
-      { headers: { "Content-Type": "application/json" } },
+    // 1) approvals + rawBlocks
+    const { value: approvals = {} } = await kvInstance.get<
+      Record<string, string>
+    >(
+      ["approvals"],
     );
+    const { value: rawBlocks = {} } = await kvInstance.get<
+      Record<string, unknown>
+    >(["rawBlocks"]);
+
+    // 2) alle pending-Schemas (pendingUpdates) auflisten
+    let pendingList: Array<
+      { key: string; fsPath?: string; newSchema?: unknown }
+    > = [];
+    try {
+      const { value: pendingValue } = await kvInstance.get<
+        Array<{ key: string; fsPath: string; newSchema: unknown }>
+      >(["pendingUpdates"]);
+      pendingList = Array.isArray(pendingValue) ? pendingValue : [];
+    } catch {
+      pendingList = [];
+    }
+
+    // 3) alle live-Schemas (expected) auflisten –
+    //    Einträge unter Prefix ["expected", <key>]
+    const expected: Record<string, unknown>[] = [];
+    for await (const en of kvInstance.list({ prefix: ["expected"] })) {
+      const key = en.key[1] as string;
+      expected.push({ key, schema: en.value });
+    }
+
+    const body = { approvals, rawBlocks, pending: pendingList, expected };
+    return new Response(JSON.stringify(body, null, 2), {
+      status: 200,
+      headers: { "Content-Type": "application/json" },
+    });
   },
 };
diff --git a/routes/api/reset-approvals.ts b/routes/api/reset-approvals.ts
new file mode 100644
index 0000000..d7b0944
--- /dev/null
+++ b/routes/api/reset-approvals.ts
@@ -0,0 +1,20 @@
+// routes/api/reset-approvals.ts
+
+import { HandlerContext } from "$fresh/server.ts";
+import { kvInstance } from "../../src/api-tester/core/kv.ts";
+
+export const handler = async (
+  _req: Request,
+  _ctx: HandlerContext,
+): Promise<Response> => {
+  try {
+    // Setzt approvals komplett zurück (kein Lesen notwendig)
+    await kvInstance.set(["approvals"], {});
+    console.log("✅ Alle approvals in KV zurückgesetzt.");
+    return new Response("OK: Approvals zurückgesetzt", { status: 200 });
+  } catch (err: unknown) {
+    const msg = err instanceof Error ? err.message : String(err);
+    console.error("❌ Fehler beim Zurücksetzen der Approvals:", msg);
+    return new Response(`Error: ${msg}`, { status: 500 });
+  }
+};
diff --git a/routes/api/reset-expected.ts b/routes/api/reset-expected.ts
new file mode 100644
index 0000000..273375b
--- /dev/null
+++ b/routes/api/reset-expected.ts
@@ -0,0 +1,15 @@
+// routes/api/reset-expected.ts
+
+import { Handlers } from "$fresh/server.ts";
+import { kvInstance } from "../../src/api-tester/core/kv.ts";
+
+export const handler: Handlers = {
+  async GET(_, ctx) {
+    const key = ctx.url.searchParams.get("key");
+    if (!key) {
+      return new Response("Missing ?key=...", { status: 400 });
+    }
+    await kvInstance.delete(["expected", key]);
+    return new Response(`✅ KV-Entry ["expected","${key}"] gelöscht.`);
+  },
+};
diff --git a/routes/api/reset-pending.ts b/routes/api/reset-pending.ts
new file mode 100644
index 0000000..daf68a1
--- /dev/null
+++ b/routes/api/reset-pending.ts
@@ -0,0 +1,34 @@
+// routes/api/reset-pending.ts
+
+import { Handlers } from "$fresh/server.ts";
+import { kvInstance } from "../../src/api-tester/core/kv.ts";
+
+export const handler: Handlers = {
+  async GET() {
+    try {
+      // 1) Lösche das gesamte pendingUpdates-Array
+      await kvInstance.delete(["pendingUpdates"]);
+
+      return new Response(
+        JSON.stringify({
+          ok: true,
+          message: "pendingUpdates erfolgreich gelöscht",
+        }),
+        {
+          status: 200,
+          headers: { "Content-Type": "application/json" },
+        },
+      );
+    } catch (err) {
+      const msg = err instanceof Error ? err.message : String(err);
+      console.error("❌ Fehler beim Zurücksetzen von pendingUpdates:", msg);
+      return new Response(
+        JSON.stringify({ ok: false, message: msg }),
+        {
+          status: 500,
+          headers: { "Content-Type": "application/json" },
+        },
+      );
+    }
+  },
+};
diff --git a/routes/api/run-tests.ts b/routes/api/run-tests.ts
index 3f762d1..13ef785 100644
--- a/routes/api/run-tests.ts
+++ b/routes/api/run-tests.ts
@@ -1,6 +1,6 @@
 // routes/api/run-tests.ts
 
-import { Handlers } from "$fresh/server.ts";
+import type { Handlers } from "$fresh/server.ts";
 import { runAllTests } from "../../run-tests.ts";
 
 export const handler: Handlers = {
@@ -8,9 +8,10 @@ export const handler: Handlers = {
     try {
       await runAllTests();
       return new Response("OK: Tests ausgelöst", { status: 200 });
-    } catch (err) {
+    } catch (err: unknown) {
       console.error("❌ Fehler in runAllTests:", err);
-      return new Response("Error", { status: 500 });
+      const msg = err instanceof Error ? err.message : String(err);
+      return new Response(`Error: ${msg}`, { status: 500 });
     }
   },
 };
diff --git a/routes/api/slack.ts b/routes/api/slack.ts
index b3a26ef..c1e3580 100644
--- a/routes/api/slack.ts
+++ b/routes/api/slack.ts
@@ -10,7 +10,7 @@ import {
 } from "../../src/api-tester/core/slack/handlePinSubmission.ts";
 import { slackDebugEvents } from "../../src/api-tester/core/slack/debugStore.ts";
 
-const SKIP_VERIFY = Deno.env.get("SKIP_SLACK_VERIFY") === "true";
+const SKIP_VERIFY = Deno.env.get("SKIP_VALIDATE_SIGNATURE") === "true";
 
 interface BlockActionPayload {
   type: string;
@@ -112,9 +112,7 @@ export const handler: Handlers = {
         const resp = new Response("", { status: 200 });
         void openPinModal({
           triggerId: payload.trigger_id,
-          endpoint: payload.actions[0].value,
-          messageTs: payload.message.ts,
-          channelId: payload.channel.id,
+          endpointJson: payload.actions[0].value, // enthält { endpointName, method, missing[], extra[], typeMismatches[], original_ts, channel }
         });
         return resp;
       }
diff --git a/run-test-single.ts b/run-test-single.ts
index c0eba12..a35530c 100644
--- a/run-test-single.ts
+++ b/run-test-single.ts
@@ -1,4 +1,6 @@
-#!/usr/bin/env -S deno run --allow-net --allow-read --allow-env
+#!/usr/bin/env -S deno run --unstable --allow-read --allow-net --allow-env
+
+// run-test-single.ts
 
 import "https://deno.land/std@0.216.0/dotenv/load.ts";
 import { loadConfig } from "./src/api-tester/core/configLoader.ts";
@@ -6,85 +8,166 @@ import {
   runSingleEndpoint,
   VersionUpdate,
 } from "./src/api-tester/core/endpointRunner.ts";
+import type { SchemaUpdate } from "./src/api-tester/core/gitPush.ts";
 import { sendSlackReport } from "./src/api-tester/core/slack/slackReporter/sendSlackReport.ts";
 import type { TestResult } from "./src/api-tester/core/apiCaller.ts";
+import { join } from "https://deno.land/std@0.216.0/path/mod.ts";
+import { loadExpectedSchema } from "./src/api-tester/core/structureAnalyzer.ts";
+import { existsSync } from "https://deno.land/std@0.216.0/fs/mod.ts";
 
 /**
  * Führt genau einen Endpoint-Test aus, gibt im Terminal
- * den HTTP-Status und den Strukturvergleich aus und
- * sendet anschließend den Slack-Report (immer im echten Modus).
+ * HTTP-Status, Strukturvergleich und JSON-Output aus
+ * und schickt den Report an Slack.
  */
 export async function runTestSingle(endpointName: string): Promise<void> {
+  // 1) Config laden
   const cfg = await loadConfig();
+  console.log("🔧 Geladene Endpoints:", cfg.endpoints.map((e) => e.name));
 
-  // 1) Endpunkt in der Konfiguration finden
+  // 2) Gewünschten Endpoint finden
   const endpoint = cfg.endpoints.find((ep) => ep.name === endpointName);
   if (!endpoint) {
     console.error(
-      `✋ Endpunkt mit dem Namen "${endpointName}" wurde nicht gefunden.`,
+      `✋ Endpoint "${endpointName}" nicht in config.json gefunden.`,
     );
     Deno.exit(1);
   }
 
-  // 2) Version-Updates und Test-Ergebnisse sammeln
+  // 3) Arrays für Versions- und Schema-Updates sowie Ergebnisse
   const versionUpdates: VersionUpdate[] = [];
+  const schemaUpdates: SchemaUpdate[] = [];
   const results: TestResult[] = [];
 
-  // 3) Einzelnen Endpunkt testen
-  const res = await runSingleEndpoint(endpoint, cfg, versionUpdates);
+  // 4) Testlauf
+  const res = await runSingleEndpoint(
+    endpoint,
+    cfg,
+    versionUpdates,
+    schemaUpdates,
+  );
   if (!res) {
-    console.error("⚠️ Kein Ergebnis vom Testlauf erhalten.");
+    console.error(
+      "⚠️ Kein Ergebnis: vermutlich wurde nur eine neue API-Version erkannt.",
+    );
     Deno.exit(1);
   }
   results.push(res);
 
-  // 4) Terminal-Ausgabe
+  // 5) Konsolen-Ausgabe
   console.log(`\n=== Test Single: "${endpoint.name}" ===`);
-  console.log(`HTTP-Status:      ${res.statusCode}`);
-  console.log(`Erfolg:           ${res.success ? "✅ OK" : "❌ FEHLER"}`);
+  console.log(`HTTP-Status:      ${res.status}`);
+  const hasIssues = res.expectedMissing ||
+    res.missingFields.length > 0 ||
+    res.extraFields.length > 0 ||
+    res.typeMismatches.length > 0;
+  console.log(`Erfolg:           ${hasIssues ? "❌ FEHLER" : "✅ OK"}`);
 
-  if (endpoint.expectedStructure) {
+  // 6) Strukturvergleich und JSON-Ausgabe
+  if (endpoint.expectedStructure || !res.expectedMissing) {
     console.log("\n--- Struktur-Vergleich ---");
-    console.log(`Erwartete Datei:  ${endpoint.expectedStructure}`);
-
-    if (res.missingFields.length > 0) {
-      console.log(`❌ Fehlende Felder:    ${res.missingFields.join(", ")}`);
+    if (res.expectedMissing) {
+      console.log(`⚠️ Erwartete Datei fehlt! (${res.expectedFile})`);
     } else {
-      console.log("✅ Fehlende Felder:    keine");
+      console.log(`Erwartete Datei:  ${res.expectedFile}`);
+      if (res.missingFields.length > 0) {
+        console.log(`❌ Fehlende Felder:    ${res.missingFields.join(", ")}`);
+      } else {
+        console.log("✅ Fehlende Felder:    keine");
+      }
+      if (res.extraFields.length > 0) {
+        console.log(`➕ Zusätzliche Felder: ${res.extraFields.join(", ")}`);
+      } else {
+        console.log("✅ Zusätzliche Felder: keine");
+      }
+      if (res.typeMismatches.length > 0) {
+        console.log("⚠️ Typ-Abweichungen:");
+        for (const m of res.typeMismatches) {
+          console.log(
+            `   • ${m.path}: erwartet ${m.expected}, erhalten ${m.actual}`,
+          );
+        }
+      } else {
+        console.log("✅ Typ-Abweichungen:   keine");
+      }
     }
 
-    if (res.extraFields.length > 0) {
-      console.log(`➕ Zusätzliche Felder: ${res.extraFields.join(", ")}`);
+    // 6a) Erwartetes JSON einlesen (falls vorhanden)
+    console.log("\n--- Erwartetes JSON (parsed) ---");
+    if (!res.expectedMissing && res.expectedFile) {
+      try {
+        // Pfad ermitteln
+        const expectedPath = endpoint.expectedStructure
+          ? join(Deno.cwd(), "src", "api-tester", endpoint.expectedStructure)
+          : await (async () => {
+            // Suche erste passende Datei
+            const key = endpoint.name.replace(/\s+/g, "_");
+            const expectedDir = join(
+              Deno.cwd(),
+              "src",
+              "api-tester",
+              "expected",
+            );
+            for await (const entry of Deno.readDir(expectedDir)) {
+              if (!entry.isFile) continue;
+              if (entry.name.startsWith(key) && entry.name.endsWith(".json")) {
+                return join(expectedDir, entry.name);
+              }
+            }
+            throw new Error("Erwartete Datei nicht gefunden");
+          })();
+        if (existsSync(expectedPath)) {
+          const expectedSchema = await loadExpectedSchema(
+            endpoint.name.replace(/\s+/g, "_"),
+            expectedPath,
+          );
+          console.log(JSON.stringify(expectedSchema, null, 2));
+        } else {
+          console.log(
+            "⚠️ Erwartete Datei existiert nicht auf dem Dateisystem.",
+          );
+        }
+      } catch {
+        console.log("⚠️ Kein erwartetes JSON geladen.");
+      }
     } else {
-      console.log("✅ Zusätzliche Felder: keine");
+      console.log("⚠️ Kein erwartetes JSON geladen.");
     }
 
-    if (res.typeMismatches.length > 0) {
-      console.log("⚠️ Typ-Abweichungen:");
-      for (const m of res.typeMismatches) {
-        console.log(
-          `   • ${m.path}: erwartet ${m.expected}, erhalten ${m.actual}`,
-        );
-      }
+    // 6b) Tatsächliche JSON ausgeben
+    console.log("\n--- Tatsächliche JSON (parsed) ---");
+    if (res.actualData !== undefined) {
+      console.log(JSON.stringify(res.actualData, null, 2));
     } else {
-      console.log("✅ Typ-Abweichungen:   keine");
+      console.log("⚠️ Keine tatsächliche JSON-Daten verfügbar.");
     }
   } else {
     console.log(
-      "\nℹ️ Kein erwartetes Schema definiert, daher kein Strukturvergleich möglich.",
+      "\nℹ️ Kein erwartetes Schema definiert – nur tatsächliches JSON:",
     );
+    if (res.actualData !== undefined) {
+      console.log(JSON.stringify(res.actualData, null, 2));
+    } else {
+      console.log("⚠️ Keine tatsächliche JSON-Daten verfügbar.");
+    }
+  }
+
+  // 7) Slack-Report senden (außer DISABLE_SLACK=true)
+  const disableSlack = Deno.env.get("DISABLE_SLACK") === "true";
+  if (disableSlack) {
+    console.log("⚠️ Slack-Reporting deaktiviert (DISABLE_SLACK=true)");
+  } else {
+    await sendSlackReport(results, versionUpdates);
   }
 
-  // 5) Slack-Report senden (echter Modus, da dryRun default false)
-  await sendSlackReport(results, versionUpdates);
+  // 8) Exit-Code: 0 bei Erfolg, 1 bei Fehler
+  Deno.exit(hasIssues ? 1 : 0);
 }
 
 if (import.meta.main) {
   const endpointName = Deno.args[0];
   if (!endpointName) {
-    console.error(
-      "Bitte einen Endpunktnamen angeben, z.B. 'Get List Purchase Orders'",
-    );
+    console.error("Bitte Endpoint-Name angeben, z.B. `Get View Customer`");
     Deno.exit(1);
   }
   await runTestSingle(endpointName);
diff --git a/run-tests.ts b/run-tests.ts
index b4b4f30..c7e7dee 100755
--- a/run-tests.ts
+++ b/run-tests.ts
@@ -1,58 +1,110 @@
-// run-tests.ts
-
 /**
- * Orchestriert alle API-Tests und sendet das Ergebnis nach Slack.
+ * Orchestriert alle API-Tests, sendet den Ergebnisbericht nach Slack
+ * und legt „Pending“-Schema-Updates in KV ab. Das *Committen* in Git
+ * geschieht erst, wenn ein User in Slack auf „Einverstanden“ geklickt hat.
  *
  * Usage:
- *   deno run -A run-tests.ts            # Normallauf (echt)
- *   deno run -A run-tests.ts --dry-run  # Dry-Run: Slack-Payload in der Konsole
+ *   deno run --unstable --unstable-kv -A run-tests.ts
+ *   deno run --unstable --unstable-kv -A run-tests.ts --dry-run
  *
  * ENV:
- *   DRY_RUN=true        # aktiviert Dry-Run wenn kein Flag gesetzt
+ *   DRY_RUN=true        # aktiviert Dry-Run (Slack-Payload in Konsole)
  *   DISABLE_SLACK=true  # überspringt komplettes Slack-Reporting
  */
-
 import "https://deno.land/std@0.216.0/dotenv/load.ts";
 import { loadConfig } from "./src/api-tester/core/configLoader.ts";
 import {
   runSingleEndpoint,
   VersionUpdate,
 } from "./src/api-tester/core/endpointRunner.ts";
-import { sendSlackReport } from "./src/api-tester/core/slack/slackReporter/sendSlackReport.ts";
+import type { SchemaUpdate } from "./src/api-tester/core/gitPush.ts";
 import type { TestResult } from "./src/api-tester/core/apiCaller.ts";
+import { sendSlackReport } from "./src/api-tester/core/slack/slackReporter/sendSlackReport.ts";
+import { kvInstance } from "./src/api-tester/core/kv.ts";
 
 interface RunOptions {
   dryRun?: boolean;
 }
 
 export async function runAllTests({ dryRun = false }: RunOptions = {}) {
-  console.log("▶️ run-tests.ts: starte Batch-Durchlauf");
+  console.log("▶️ run-tests.ts: starte Batch-Durchlauf (dryRun=", dryRun, ")");
 
-  // 1) Config laden
+  // 1) Config + GitRepo laden
   const cfg = await loadConfig();
-  console.log("🔧 Konfigurierte Endpunkte:", cfg.endpoints.map((e) => e.name));
+  console.log(
+    "🔧 Geladene Endpoints:",
+    cfg.endpoints.map((e) => e.name),
+  );
 
+  // 2) Arrays für Version- und Schema-Updates
   const versionUpdates: VersionUpdate[] = [];
+  const schemaUpdates: SchemaUpdate[] = [];
   const results: TestResult[] = [];
 
-  // 2) Jeden Endpoint testen
+  // 3) Jeden Endpoint testen
   for (const ep of cfg.endpoints) {
-    const res = await runSingleEndpoint(ep, cfg, versionUpdates);
-    if (res) results.push(res);
+    const res = await runSingleEndpoint(
+      ep,
+      cfg,
+      versionUpdates,
+      schemaUpdates,
+    );
+    if (res) {
+      results.push(res);
+    }
   }
 
-  console.log(`▶️ run-tests.ts: Tests abgeschlossen. Dry-Run: ${dryRun}`);
+  console.log(
+    `▶️ Tests abgeschlossen. Gefundene Drifts: ${schemaUpdates.length}. Dry-Run=${dryRun}`,
+  );
 
-  // 3) Slack-Reporting steuern
+  // 4) Slack-Reporting (nur bei echten Runs)
   const disableSlack = Deno.env.get("DISABLE_SLACK") === "true";
-  if (dryRun || Deno.env.get("DRY_RUN") === "true") {
+  if (!dryRun && !disableSlack) {
+    console.log("📨 sende Slack-Report …");
+    // VersionUpdates werden derzeit nur im Header angezeigt (z.B. neue API-Versionen).
+    await sendSlackReport(results, versionUpdates);
+  } else if (dryRun) {
     console.log("📣 --- Slack-Payload (Dry-Run) ---");
-    console.log(JSON.stringify({ results, versionUpdates }, null, 2));
-  } else if (disableSlack) {
+    console.log(
+      JSON.stringify({ results, versionUpdates, schemaUpdates }, null, 2),
+    );
+  } else {
     console.log("⚠️ Slack-Reporting deaktiviert (DISABLE_SLACK=true)");
+  }
+
+  // 5) Alle gefundenen Schema-Drifts NICHT sofort in Git pushen,
+  //    sondern in KV als „Pending Updates“ speichern.
+  //    Später holt sich der Approval-Handler diese und pusht einzeln.
+
+  if (schemaUpdates.length > 0) {
+    try {
+      // a) Existierende Pending-Werte aus KV laden
+      const { value: existing } = await kvInstance.get<SchemaUpdate[]>(
+        ["pendingUpdates"],
+      );
+      const oldPending = Array.isArray(existing) ? existing : [];
+
+      // b) Neue Drifts ergänzen (Key-Duplikate überschreiben alte)
+      const mergedMap = new Map<string, SchemaUpdate>();
+      for (const pu of oldPending) {
+        mergedMap.set(pu.key, pu);
+      }
+      for (const su of schemaUpdates) {
+        mergedMap.set(su.key, su);
+      }
+      const newPending = Array.from(mergedMap.values());
+
+      // c) Speichern
+      await kvInstance.set(["pendingUpdates"], newPending);
+      console.log(
+        `✅ ${schemaUpdates.length} Schema-Drift(s) als pending in KV gespeichert.`,
+      );
+    } catch (err) {
+      console.error("❌ Fehler beim Speichern der Pending-Updates in KV:", err);
+    }
   } else {
-    console.log("📨 sende Slack-Report …");
-    await sendSlackReport(results, versionUpdates);
+    console.log("✅ Keine Schema-Drifts, keine Pending-Updates gesetzt.");
   }
 }
 
diff --git a/scripts/debugReport.ts b/scripts/debugReport.ts
index ed1701b..925d654 100644
--- a/scripts/debugReport.ts
+++ b/scripts/debugReport.ts
@@ -1,24 +1,32 @@
 // scripts/debugReport.ts
-import { sendSlackReport } from "../src/api-tester/core/slack/slackReporter/sendSlackReport.ts";
+
+import "https://deno.land/std@0.216.0/dotenv/load.ts";
+import {
+  sendSlackReport,
+  VersionUpdate,
+} from "../src/api-tester/core/slack/slackReporter/sendSlackReport.ts";
 import type { TestResult } from "../src/api-tester/core/apiCaller.ts";
 
-// Beispiel-Ergebnisse
 const fakeResults: TestResult[] = [
   {
-    endpointName: "Demo Endpoint",
+    endpointName: "FooEndpoint",
     method: "GET",
     success: false,
     isCritical: true,
     statusCode: 500,
-    errorMessage: null,
-    missingFields: ["data.foo"],
+    errorMessage: "Simulierter Fehler",
+    missingFields: [],
     extraFields: [],
     typeMismatches: [],
-    updatedStructure: "Demo_updated.json",
+    updatedStructure: "FooEndpoint",
+    expectedFile: "./expected/FooEndpoint.json",
+    expectedMissing: false,
+    expectedData: { foo: "string" },
+    actualData: { foo: "bar" },
   },
 ];
-const fakeVersions = [{ name: "Demo Endpoint", url: "https://api/v2/demo" }];
 
-// Dry-Run: Verhindert echten Slack-Call
-await sendSlackReport(fakeResults, fakeVersions, { dryRun: true });
-console.log("✅ sendSlackReport dry-run durchgelaufen");
+// benutze das nun exportierte Interface
+const fakeVersions: VersionUpdate[] = [];
+
+await sendSlackReport(fakeResults, fakeVersions);
diff --git a/scripts/fetch_responses.ts b/scripts/fetch_responses.ts
new file mode 100644
index 0000000..2e886a2
--- /dev/null
+++ b/scripts/fetch_responses.ts
@@ -0,0 +1,162 @@
+// scripts/fetch_responses.ts
+
+import {
+  type EndpointConfig as _EndpointConfig,
+  loadConfig,
+} from "../src/api-tester/core/configLoader.ts";
+import { join } from "https://deno.land/std@0.216.0/path/mod.ts";
+import defaultIdsRaw from "../src/api-tester/default-ids.json" with {
+  type: "json",
+};
+
+/**
+ * Baut URL, indem Platzhalter {key} ersetzt werden.
+ * Hier muss id-Werte aus defaultIds genutzt werden.
+ */
+function buildUrl(template: string, params: Record<string, string>): string {
+  return template.replace(/\{([^}]+)\}/g, (_match, key) => {
+    const val = params[key];
+    if (val === undefined) {
+      throw new Error(`Kein Wert für URL-Parameter "${key}"`);
+    }
+    return encodeURIComponent(val);
+  });
+}
+
+async function main() {
+  // 1) Config laden
+  const cfg = await loadConfig();
+  console.log(
+    "🔧 Lade Endpunkte aus config.json:",
+    cfg.endpoints.map((e) => e.name),
+  );
+
+  // 2) Output-Verzeichnis erstellen
+  const outDir = join(Deno.cwd(), "src", "api-tester", "responses");
+  await Deno.mkdir(outDir, { recursive: true });
+
+  // 3) defaultIds aus JSON
+  const defaultIds = defaultIdsRaw as Record<
+    string,
+    string | Record<string, string>
+  >;
+
+  // 4) Jeden Endpoint durchgehen
+  for (const ep of cfg.endpoints) {
+    const endpointName = ep.name; // Originalname mit Leerzeichen
+
+    // 5) Default-ID(s) für Endpoint ermitteln
+    const idEntry = defaultIds[endpointName];
+    if (ep.requiresId && !idEntry) {
+      console.warn(
+        `⚠️ Überspringe "${endpointName}": Kein passenden Default-ID-Eintrag gefunden für "${endpointName}".`,
+      );
+      continue;
+    }
+
+    // 6) Parameter für URL zusammenstellen
+    let params: Record<string, string> = {};
+
+    if (typeof idEntry === "string") {
+      // Einfacher Fall: nur 'id'
+      params = { id: idEntry };
+    } else if (typeof idEntry === "object" && idEntry !== null) {
+      // Objekt mit mehreren IDs, z.B. { customerId: "...", id: "..." }
+      params = idEntry;
+    }
+
+    // Ersetze evtl. Umgebungsvariablen in Headern (z.B. Bearer Token)
+    if (ep.headers) {
+      for (const [key, val] of Object.entries(ep.headers)) {
+        if (
+          typeof val === "string" && val.includes("${") && val.includes("}")
+        ) {
+          const envVar = val.match(/\${([^}]+)}/)?.[1];
+          if (envVar) {
+            const envVal = Deno.env.get(envVar);
+            if (envVal) {
+              ep.headers[key] = val.replace(`\${${envVar}}`, envVal);
+            }
+          }
+        }
+      }
+    }
+
+    // 7) URL bauen
+    let url: string;
+    try {
+      // Ersetze ${XENTRAL_ID} aus ENV
+      if (!ep.url.includes("${XENTRAL_ID}")) {
+        throw new Error("URL erwartet Variable ${XENTRAL_ID} nicht");
+      }
+      const xentralId = Deno.env.get("XENTRAL_ID");
+      if (!xentralId) {
+        console.warn(
+          `⚠️ Überspringe "${endpointName}": Umgebungsvariable XENTRAL_ID nicht gesetzt.`,
+        );
+        continue;
+      }
+      const urlTemplate = ep.url.replace("${XENTRAL_ID}", xentralId);
+
+      url = buildUrl(urlTemplate, params);
+    } catch (err) {
+      console.warn(
+        `⚠️ Überspringe "${endpointName}": ${(err as Error).message}`,
+      );
+      continue;
+    }
+
+    // 8) Query-Parameter anhängen (optional)
+    if (ep.query && Object.keys(ep.query).length > 0) {
+      const qs = new URLSearchParams();
+      for (const [k, v] of Object.entries(ep.query)) {
+        qs.append(k, String(v));
+      }
+      url += url.includes("?") ? `&${qs}` : `?${qs}`;
+    }
+
+    // 9) API-Request senden
+    try {
+      // Debug-Ausgabe vor fetch
+      console.log(`\n🔍 Endpoint: ${ep.name}`);
+      console.log(`URL: ${url}`);
+      console.log("Headers:");
+      for (const [key, val] of Object.entries(ep.headers ?? {})) {
+        console.log(`  ${key}: ${val}`);
+      }
+
+      const resp = await fetch(url, {
+        method: ep.method,
+        headers: ep.headers,
+      });
+
+      if (!resp.ok) {
+        console.warn(
+          `⚠️ ${ep.name}: HTTP-Status ${resp.status} ${resp.statusText}`,
+        );
+        continue;
+      }
+
+      const data = await resp.json();
+
+      // 10) Antwort in Datei speichern
+      const fileName = endpointName.replace(/\s+/g, "_") + ".json";
+      const filePath = join(outDir, fileName);
+
+      await Deno.writeTextFile(filePath, JSON.stringify(data, null, 2));
+      console.log(
+        `✅ Antwort für "${endpointName}" gespeichert als ${fileName}`,
+      );
+    } catch (err) {
+      console.warn(
+        `⚠️ Fehler bei "${endpointName}": ${(err as Error).message}`,
+      );
+    }
+  }
+
+  console.log("✅ Alle Endpunkte abgearbeitet.");
+}
+
+if (import.meta.main) {
+  main();
+}
diff --git a/scripts/reset-approvals.ts b/scripts/reset-approvals.ts
new file mode 100644
index 0000000..7b92b50
--- /dev/null
+++ b/scripts/reset-approvals.ts
@@ -0,0 +1,6 @@
+// scripts/reset-approvals.ts
+
+import "https://deno.land/std@0.216.0/dotenv/load.ts";
+import { resetApprovalsKV } from "../src/api-tester/core/resetApprovals.ts";
+
+await resetApprovalsKV();
diff --git a/scripts/test-config-utils.ts b/scripts/test-config-utils.ts
index f1da4e9..e823684 100644
--- a/scripts/test-config-utils.ts
+++ b/scripts/test-config-utils.ts
@@ -2,24 +2,15 @@
 
 import {
   replaceWithFallback,
-  resolveProjectPath,
   safeReplace,
 } from "../src/api-tester/core/utils.ts";
-import { loadConfig } from "../src/api-tester/core/configLoader.ts";
 
 console.log(
-  "🔍 resolveProjectPath:",
-  resolveProjectPath("api-tester", "config.json"),
+  "🔧 replaceWithFallback(undefined):",
+  replaceWithFallback(undefined, "_X"),
 );
 
-console.log("🔧 safeReplace:", safeReplace("foo_BAR", "_BAR", "_BAZ"));
-console.log(
-  "🔧 replaceWithFallback:",
-  replaceWithFallback(undefined, "_X", "_Y"),
-);
+console.log("🔧 replaceWithFallback('Y'):", replaceWithFallback("Y", "_X"));
 
-const cfg = await loadConfig();
-console.log(
-  "🚀 Geladene Endpoints:",
-  cfg.endpoints.map((e) => e.name).join(", "),
-);
+// safeReplace nimmt jetzt (template: string, replacements: Record<string,string>)
+console.log("🔧 safeReplace:", safeReplace("foo${BAR}baz", { BAR: "_BAR_" }));
diff --git a/src/api-tester/config.json b/src/api-tester/config.json
index b7eba45..dd55002 100644
--- a/src/api-tester/config.json
+++ b/src/api-tester/config.json
@@ -6,7 +6,7 @@
       "method": "GET",
       "headers": {
         "Accept": "application/json",
-        "Content-Type": "application/json"
+        "Authorization": "Bearer ${BEARER_TOKEN}"
       },
       "query": {
         "filter[0][key]": "customerNumber",
@@ -20,11 +20,11 @@
     },
     {
       "name": "Get View Sales Order",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/salesOrders/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/salesOrders/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
-        "Content-Type": "application/json"
+        "Authorization": "Bearer ${BEARER_TOKEN}"
       },
       "query": {},
       "requiresId": true,
@@ -36,7 +36,7 @@
       "method": "GET",
       "headers": {
         "Accept": "application/json",
-        "Content-Type": "application/json"
+        "Authorization": "Bearer ${BEARER_TOKEN}"
       },
       "query": {
         "order[0][field]": "id",
@@ -49,7 +49,7 @@
     },
     {
       "name": "Get View Product",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -60,7 +60,7 @@
     },
     {
       "name": "Delete Product",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/${id}",
       "method": "DELETE",
       "headers": {
         "Accept": "application/json",
@@ -81,7 +81,7 @@
     },
     {
       "name": "Get View Invoice",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/invoices/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/invoices/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -105,7 +105,7 @@
     },
     {
       "name": "Get View Customer",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v2/customers/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v2/customers/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -118,7 +118,7 @@
     },
     {
       "name": "Get View Delivery Note",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/deliveryNotes/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/deliveryNotes/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -130,7 +130,7 @@
     },
     {
       "name": "Get View Purchase Order",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/purchaseOrders/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/purchaseOrders/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -164,7 +164,7 @@
     },
     {
       "name": "Get View Credit Note",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/creditNotes/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/creditNotes/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -176,7 +176,7 @@
     },
     {
       "name": "Get View Liability",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/liabilities/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/liabilities/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -188,7 +188,7 @@
     },
     {
       "name": "Get View Suppliers",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/suppliers/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/suppliers/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -200,7 +200,7 @@
     },
     {
       "name": "Get View Return",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/returns/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/returns/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -223,7 +223,7 @@
     },
     {
       "name": "Get View Options of a Product",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/{id}/options",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/${id}/options",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -235,7 +235,7 @@
     },
     {
       "name": "Get View Media",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/{id}/media",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/${id}/media",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -247,7 +247,7 @@
     },
     {
       "name": "Get View Purchase Prices",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/{id}/purchasePrices",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/${id}/purchasePrices",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -259,7 +259,7 @@
     },
     {
       "name": "Get View Sales Prices",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/{id}/salesPrices",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/${id}/salesPrices",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -271,7 +271,7 @@
     },
     {
       "name": "Get View Parts",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/{id}/parts",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v1/products/${id}/parts",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
@@ -283,7 +283,7 @@
     },
     {
       "name": "Get View Address",
-      "url": "https://${XENTRAL_ID}.xentral.biz/api/v2/customers/{customerId}/addresses/{id}",
+      "url": "https://${XENTRAL_ID}.xentral.biz/api/v2/customers/${customerId}/addresses/${id}",
       "method": "GET",
       "headers": {
         "Accept": "application/json",
diff --git a/src/api-tester/core/apiCaller.ts b/src/api-tester/core/apiCaller.ts
index 7d5f545..d87ba65 100644
--- a/src/api-tester/core/apiCaller.ts
+++ b/src/api-tester/core/apiCaller.ts
@@ -1,223 +1,186 @@
 // src/api-tester/core/apiCaller.ts
 
-import axios from "https://esm.sh/axios@1.4.0";
-import { existsSync } from "https://deno.land/std@0.216.0/fs/mod.ts";
 import { join } from "https://deno.land/std@0.216.0/path/mod.ts";
-import { resolveProjectPath } from "./utils.ts";
+import type { EndpointConfig } from "./configLoader.ts";
 import { analyzeResponse } from "./structureAnalyzer.ts";
+import type { Schema } from "./types.ts";
+import { safeReplace } from "./utils.ts";
 
-export type Method = "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
-
+/**
+ * Ergebnis eines API-Tests inklusive Schema-Abgleich.
+ */
 export interface TestResult {
   endpointName: string;
-  method: Method;
-  success: boolean;
-  isCritical: boolean;
-  statusCode: number | null;
-  errorMessage: string | null;
-  errorDetails?: string;
+  method: string;
+  url: string;
+  status: number;
+  body: unknown;
+
+  expectedMissing: boolean;
+  expectedFile?: string;
+
   missingFields: string[];
   extraFields: string[];
-  typeMismatches: Array<{ path: string; expected: string; actual: string }>;
-  updatedStructure: string | null;
-  /** Neuer Fall: Pfad zur erwarteten Datei */
-  expectedFile?: string;
-  /** Neuer Fall: true, wenn die Datei komplett fehlt */
-  expectedMissing?: boolean;
+  typeMismatches: { path: string; expected: string; actual: string }[];
+
+  /** Transformiertes Schema (für Versionierung) */
+  actualData?: Schema;
 }
 
-export interface Endpoint {
-  name: string;
-  url: string;
-  method: Method;
-  expectedStructure?: string;
-  query?: Record<string, string>;
-  bodyFile?: string;
-  headers?: Record<string, string>;
+async function findExpectedFile(key: string): Promise<string> {
+  const expectedDir = join(Deno.cwd(), "src", "api-tester", "expected");
+  for await (const entry of Deno.readDir(expectedDir)) {
+    if (!entry.isFile) continue;
+    if (entry.name.startsWith(key) && entry.name.endsWith(".json")) {
+      return join(expectedDir, entry.name);
+    }
+  }
+  throw new Error(`Schema nicht gefunden: ${key}`);
 }
 
-function findExpectedPath(relativePath: string): string | null {
-  const projectRoot = Deno.cwd();
-  const candidates = [
-    join(projectRoot, "src", "expected", relativePath),
-    join(projectRoot, "src", "api-tester", "expected", relativePath),
-  ];
-  for (const p of candidates) {
-    if (existsSync(p)) {
-      console.log(`🔍 Erwartetes Schema gefunden: ${p}`);
-      return p;
+function buildUrl(template: string, params: Record<string, string>): string {
+  return template.replace(/\$\{(\w+)\}/g, (_match, key) => {
+    const val = params[key];
+    if (val === undefined) {
+      throw new Error(`Kein Wert für URL-Parameter "${key}"`);
+    }
+    return encodeURIComponent(val);
+  });
+}
+
+/**
+ * Ersetzt Header-Platzhalter ${KEY} durch Umgebungsvariablenwerte.
+ */
+function replaceHeaderPlaceholders(
+  headers: Record<string, string> | undefined,
+): Record<string, string> {
+  if (!headers) return {};
+  const envVars = Deno.env.toObject();
+  const replaced: Record<string, string> = {};
+  for (const [key, value] of Object.entries(headers)) {
+    replaced[key] = safeReplace(value, envVars);
+    if (replaced[key] === "") {
+      console.warn(
+        `⚠️ Umgebungsvariable für Header "${key}" wurde nicht gefunden`,
+      );
     }
   }
-  console.warn(
-    `⚠️ Erwartetes Schema nicht gefunden in:\n  ${candidates.join("\n  ")}`,
-  );
-  return null;
+  return replaced;
 }
 
 export async function testEndpoint(
-  endpoint: Endpoint,
-  dynamicParams: Record<string, string> = {},
-  config?: { endpoints: Endpoint[] },
+  ep: EndpointConfig,
+  dynamicParamsOverride: Record<string, string> = {},
 ): Promise<TestResult> {
+  const key = ep.name.replace(/\s+/g, "_");
+  console.debug(`[DEBUG] Starte testEndpoint für "${ep.name}" (key="${key}")`);
+
+  let url: string;
   try {
-    // 1) URL‐Platzhalter ersetzen
-    let url = endpoint.url.replace(
-      "${XENTRAL_ID}",
-      Deno.env.get("XENTRAL_ID") ?? "",
-    );
-    for (const [k, v] of Object.entries(dynamicParams)) {
-      url = url.replace(`{${k}}`, v);
-    }
+    url = buildUrl(ep.url, dynamicParamsOverride);
+    console.debug(`[DEBUG]  → finale URL: ${url}`);
+  } catch (err: unknown) {
+    const msg = err instanceof Error ? err.message : String(err);
+    throw new Error(`Ungültige URL für "${ep.name}": ${msg}`);
+  }
 
-    // 2) Query‐String bauen
-    const qs = endpoint.query
-      ? "?" + new URLSearchParams(endpoint.query).toString()
-      : "";
-
-    // 3) Body laden
-    let data: unknown;
-    if (
-      ["POST", "PUT", "PATCH"].includes(endpoint.method) &&
-      endpoint.bodyFile
-    ) {
-      const bf = resolveProjectPath(endpoint.bodyFile);
-      if (existsSync(bf)) {
-        data = JSON.parse(await Deno.readTextFile(bf));
-      }
+  if (ep.query && Object.keys(ep.query).length > 0) {
+    const qs = new URLSearchParams();
+    for (const [k, v] of Object.entries(ep.query)) {
+      qs.append(k, String(v));
     }
+    url += url.includes("?") ? `&${qs}` : `?${qs}`;
+    console.debug(`[DEBUG]  → mit Query-Params: ${url}`);
+  }
 
-    // 4) Header + Auth
-    const baseHeaders = endpoint.headers ?? {};
-    const headers: Record<string, string> = {
-      ...baseHeaders,
-      Authorization: baseHeaders.Authorization?.includes("${BEARER_TOKEN}")
-        ? baseHeaders.Authorization.replace(
-          "${BEARER_TOKEN}",
-          Deno.env.get("BEARER_TOKEN") ?? "",
-        )
-        : baseHeaders.Authorization ??
-          `Bearer ${Deno.env.get("BEARER_TOKEN")}`,
-    };
-
-    // 5) Request ausführen
-    const fullUrl = `${url}${qs}`;
-    console.log("▶️ Request für", endpoint.name);
-    console.log("   URL:   ", fullUrl);
-    console.log("   Header:", JSON.stringify(headers));
-    const resp = await axios.request({
-      url: fullUrl,
-      method: endpoint.method,
-      data,
-      headers,
-      validateStatus: () => true,
-    });
-
-    // 6) HTTP‐Fehler behandeln
-    if (resp.status < 200 || resp.status >= 300) {
-      const msg = `HTTP ${resp.status} (${resp.statusText || "Error"})`;
-      console.error(`❌ API‐Fehler für ${endpoint.name}:`, msg);
-      return {
-        endpointName: endpoint.name,
-        method: endpoint.method,
-        success: false,
-        isCritical: true,
-        statusCode: resp.status,
-        errorMessage: null,
-        errorDetails: msg,
-        missingFields: [],
-        extraFields: [],
-        typeMismatches: [],
-        updatedStructure: null,
-      };
-    }
-    console.log(`✅ Antwort für ${endpoint.name}: Status ${resp.status}`);
-
-    // 7) Ohne erwartetes Schema sofort OK
-    if (!endpoint.expectedStructure) {
-      return {
-        endpointName: endpoint.name,
-        method: endpoint.method,
-        success: true,
-        isCritical: false,
-        statusCode: resp.status,
-        errorMessage: null,
-        missingFields: [],
-        extraFields: [],
-        typeMismatches: [],
-        updatedStructure: null,
-      };
+  const replacedHeaders = replaceHeaderPlaceholders(ep.headers);
+  console.debug("🔑 Finaler Header vor Request:", replacedHeaders);
+
+  const init: RequestInit & { body?: string } = {
+    method: ep.method,
+    headers: replacedHeaders,
+  };
+
+  if (ep.bodyFile) {
+    try {
+      init.body = await Deno.readTextFile(join(Deno.cwd(), ep.bodyFile));
+    } catch (err: unknown) {
+      const msg = err instanceof Error ? err.message : String(err);
+      console.warn(
+        `⚠️ bodyFile "${ep.bodyFile}" für "${ep.name}" nicht geladen: ${msg}`,
+      );
     }
+  }
 
-    // 8) Erwartetes Schema finden
-    const expectedRelative = endpoint.expectedStructure.replace(
-      /^expected\/+/,
-      "",
-    );
-    const expectedPath = findExpectedPath(expectedRelative);
-    if (!expectedPath) {
-      // Datei fehlt: eigenes Issue
-      return {
-        endpointName: endpoint.name,
-        method: endpoint.method,
-        success: false,
-        isCritical: false,
-        statusCode: resp.status,
-        errorMessage: null,
-        missingFields: [],
-        extraFields: [],
-        typeMismatches: [],
-        updatedStructure: null,
-        expectedFile: endpoint.expectedStructure,
-        expectedMissing: true,
-      };
-    }
+  const result: TestResult = {
+    endpointName: ep.name,
+    method: ep.method,
+    url,
+    status: 0,
+    body: undefined,
+    expectedMissing: false,
+    missingFields: [],
+    extraFields: [],
+    typeMismatches: [],
+  };
+
+  console.debug(`[DEBUG]  → sende Request...`);
+  let resp: Response;
+  try {
+    resp = await fetch(url, init);
+  } catch (err: unknown) {
+    const msg = err instanceof Error ? err.message : String(err);
+    throw new Error(`Request für "${ep.name}" fehlgeschlagen: ${msg}`);
+  }
+  result.status = resp.status;
 
-    // 9) Schema‐Vergleich per analyzeResponse
-    const key = endpoint.name.replace(/\s+/g, "_");
-    const { missingFields, extraFields, typeMismatches } =
-      await analyzeResponse(key, expectedPath, resp.data ?? {});
+  const rawText = await resp.text();
+  let parsed: unknown;
+  try {
+    parsed = JSON.parse(rawText);
+    console.debug(`[DEBUG]  ← JSON geparst`);
+  } catch {
+    parsed = rawText;
+    console.debug(`[DEBUG]  ← roher Text`);
+  }
+  result.body = parsed;
 
-    const hasDiff = missingFields.length > 0 ||
-      extraFields.length > 0 ||
-      typeMismatches.length > 0;
+  try {
+    const fsPath = ep.expectedStructure
+      ? join(Deno.cwd(), "src", "api-tester", ep.expectedStructure)
+      : await findExpectedFile(key);
+    console.debug(`[DEBUG]  → verwende Schema-Datei: ${fsPath}`);
+
+    const diff = await analyzeResponse(key, fsPath, parsed);
+    result.missingFields = diff.missingFields;
+    result.extraFields = diff.extraFields;
+    result.typeMismatches = diff.typeMismatches;
+    result.actualData = diff.updatedSchema;
+    result.expectedFile = ep.expectedStructure ?? fsPath.split("/").pop()!;
+  } catch (err: unknown) {
+    const msg = err instanceof Error ? err.message : String(err);
+    console.warn(
+      `⚠️ Schema-Vergleich für "${ep.name}" fehlgeschlagen: ${msg}`,
+    );
+    result.expectedMissing = true;
+  }
 
-    // 10) Automatisches Config‐Update bei Approval (unverändert)
-    let updatedStructure: string | null = null;
-    if (hasDiff && config) {
-      // … Euer Approval-Mechanismus
-      updatedStructure = key;
+  if (Deno.env.get("LOCAL_MODE") === "true") {
+    const outDir = join(Deno.cwd(), "src", "api-tester", "responses");
+    try {
+      await Deno.mkdir(outDir, { recursive: true });
+      const txt = typeof parsed === "string"
+        ? parsed
+        : JSON.stringify(parsed, null, 2);
+      await Deno.writeTextFile(join(outDir, `${key}.json`), txt);
+      console.log(`📝 [LOCAL] Response für "${ep.name}" gespeichert`);
+    } catch (err: unknown) {
+      const msg = err instanceof Error ? err.message : String(err);
+      console.warn(
+        `⚠️ Konnten lokale Response für "${ep.name}" nicht speichern: ${msg}`,
+      );
     }
-
-    // 11) Ergebnis zurückgeben
-    return {
-      endpointName: endpoint.name,
-      method: endpoint.method,
-      success: !hasDiff,
-      isCritical: hasDiff,
-      statusCode: resp.status,
-      errorMessage: null,
-      missingFields,
-      extraFields,
-      typeMismatches,
-      updatedStructure,
-      expectedFile: expectedPath,
-      expectedMissing: false,
-    };
-  } catch (err) {
-    const msg = err instanceof Error ? err.message : String(err);
-    console.error(`❌ Exception in ${endpoint.name}:`, msg);
-    return {
-      endpointName: endpoint.name,
-      method: endpoint.method,
-      success: false,
-      isCritical: true,
-      statusCode: null,
-      errorMessage: msg,
-      errorDetails: msg,
-      missingFields: [],
-      extraFields: [],
-      typeMismatches: [],
-      updatedStructure: null,
-    };
   }
+
+  return result;
 }
diff --git a/src/api-tester/core/compareStructures.ts b/src/api-tester/core/compareStructures.ts
index e9bb44e..ff84907 100644
--- a/src/api-tester/core/compareStructures.ts
+++ b/src/api-tester/core/compareStructures.ts
@@ -13,142 +13,118 @@ export interface CompareResult {
 }
 
 /**
- * Vergleicht zwei verschachtelte JSON-Strukturen (expected vs. actual).
- * Meldet:
- * - missingFields: Felder, die im actual fehlen
- * - extraFields: Felder, die im actual extra sind
- * - typeMismatches: Felder mit falschem Typ (inkl. null vs. string etc.)
+ * Vergleicht zwei JSON-Schemata (erwartet vs. aktuell).
+ * - Arrays: jedes Element gegen das erste erwartete Element prüfen.
+ *   Wenn das erwartete Array leer ist, werden alle aktuellen Indizes als extraFields markiert.
+ * - Primitive: Typen vergleichen (string, number, null, boolean).
+ * - Objekte: rekursiver Key-by-Key-Abgleich.
+ *
+ * @param expectedRaw Das erwartete Schema (z.B. transformValues-Output).
+ * @param actualRaw   Das aktuelle Schema (z.B. transformValues(actualData)).
+ * @returns           Ein Objekt mit Listen der fehlenden, zusätzlichen und typabweichenden Felder.
  */
 export function compareStructures(
-  expected: unknown,
-  actual: unknown,
-  path = "",
+  expectedRaw: unknown,
+  actualRaw: unknown,
 ): CompareResult {
   const missingFields: string[] = [];
   const extraFields: string[] = [];
   const typeMismatches: TypeMismatch[] = [];
 
-  // 1) Arrays: vergleiche nur das erste Element
-  if (Array.isArray(expected) && Array.isArray(actual)) {
-    if (expected.length > 0 && actual.length > 0) {
-      return compareStructures(expected[0], actual[0], path);
-    }
-    return { missingFields, extraFields, typeMismatches };
-  }
-
-  // 2) Array vs. Kein Array → Typabweichung
-  if (Array.isArray(expected) && !Array.isArray(actual)) {
-    typeMismatches.push({
-      path: path || "<root>",
-      expected: "array",
-      actual: typeof actual,
-    });
-    return { missingFields, extraFields, typeMismatches };
-  }
-  if (!Array.isArray(expected) && Array.isArray(actual)) {
-    typeMismatches.push({
-      path: path || "<root>",
-      expected: typeof expected,
-      actual: "array",
-    });
-    return { missingFields, extraFields, typeMismatches };
-  }
+  function recurse(expected: unknown, actual: unknown, path: string) {
+    // 1) Array vs. Array
+    const expIsArr = Array.isArray(expected);
+    const actIsArr = Array.isArray(actual);
+    if (expIsArr && actIsArr) {
+      const expArr = expected as unknown[];
+      const actArr = actual as unknown[];
 
-  // 3) Primitive (inkl. null) vs. Primitive → Typvergleich
-  const expIsPrimitive = expected === null || typeof expected !== "object";
-  const actIsPrimitive = actual === null || typeof actual !== "object";
+      if (expArr.length > 0) {
+        // Vergleich jedes aktuellen Elements mit dem ersten erwarteten Element
+        for (let i = 0; i < actArr.length; i++) {
+          recurse(expArr[0], actArr[i], `${path}[${i}]`);
+        }
+      } else {
+        // Erwartetes Array ist leer → alle aktuellen Elemente als extra markieren
+        for (let i = 0; i < actArr.length; i++) {
+          const idxPath = `${path}[${i}]`;
+          extraFields.push(idxPath);
+        }
+      }
+      return;
+    }
 
-  if (expIsPrimitive && actIsPrimitive) {
-    const expType = expected === null ? "null" : typeof expected;
-    const actType = actual === null ? "null" : typeof actual;
-    if (expType !== actType) {
+    // 2) Array ≠ non-Array → Typabweichung
+    if (expIsArr !== actIsArr) {
       typeMismatches.push({
         path: path || "<root>",
-        expected: expType,
-        actual: actType,
+        expected: expIsArr ? "array" : getType(expected),
+        actual: actIsArr ? "array" : getType(actual),
       });
+      return;
     }
-    return { missingFields, extraFields, typeMismatches };
-  }
 
-  // 4) Objekt vs. non-Objekt → Typabweichung (falls eines Objekt, anderes nicht)
-  const expIsObj = typeof expected === "object" && expected !== null;
-  const actIsObj = typeof actual === "object" && actual !== null;
-  if (expIsObj && !actIsObj) {
-    typeMismatches.push({
-      path: path || "<root>",
-      expected: "object",
-      actual: Array.isArray(actual) ? "array" : typeof actual,
-    });
-    return { missingFields, extraFields, typeMismatches };
-  }
-  if (!expIsObj && actIsObj) {
-    typeMismatches.push({
-      path: path || "<root>",
-      expected: Array.isArray(expected) ? "array" : typeof expected,
-      actual: "object",
-    });
-    return { missingFields, extraFields, typeMismatches };
-  }
-
-  // 5) Jetzt sind beide non-null Objects
-  const expObj = expected as Record<string, unknown>;
-  const actObj = actual as Record<string, unknown>;
-
-  // 5a) Fehlende Felder & Typabweichungen in gemeinsamen Feldern
-  for (const key of Object.keys(expObj)) {
-    const currentPath = path ? `${path}.${key}` : key;
-    if (!(key in actObj)) {
-      missingFields.push(currentPath);
-    } else {
-      const expVal = expObj[key];
-      const actVal = actObj[key];
-      // beide verschachtelte Objekte → rekursiv prüfen
-      if (
-        typeof expVal === "object" &&
-        expVal !== null &&
-        !Array.isArray(expVal) &&
-        typeof actVal === "object" &&
-        actVal !== null &&
-        !Array.isArray(actVal)
-      ) {
-        const sub = compareStructures(expVal, actVal, currentPath);
-        missingFields.push(...sub.missingFields);
-        extraFields.push(...sub.extraFields);
-        typeMismatches.push(...sub.typeMismatches);
-      } else if (
-        // primitiver Typ-Mismatch oder null vs. primitive
-        (expVal === null || typeof expVal !== "object") &&
-        (actVal === null || typeof actVal !== "object") &&
-        (expVal === null ? actVal !== null : typeof expVal !== typeof actVal)
-      ) {
-        const expType = expVal === null ? "null" : typeof expVal;
-        const actType = actVal === null ? "null" : typeof actVal;
+    // 3) Primitive vs. Primitive
+    const expIsPrim = expected === null || typeof expected !== "object";
+    const actIsPrim = actual === null || typeof actual !== "object";
+    if (expIsPrim && actIsPrim) {
+      const expType = expected === null ? "null" : typeof expected;
+      const actType = actual === null ? "null" : typeof actual;
+      if (expType !== actType) {
         typeMismatches.push({
-          path: currentPath,
+          path: path || "<root>",
           expected: expType,
           actual: actType,
         });
-      } else if (
-        // Array im einen und primitive/im anderen
-        Array.isArray(expVal) !== Array.isArray(actVal)
-      ) {
-        typeMismatches.push({
-          path: currentPath,
-          expected: Array.isArray(expVal) ? "array" : typeof expVal,
-          actual: Array.isArray(actVal) ? "array" : typeof actVal,
-        });
       }
+      return;
     }
-  }
 
-  // 5b) Zusätzliche Felder in actual
-  for (const key of Object.keys(actObj)) {
-    if (!(key in expObj)) {
-      const currentPath = path ? `${path}.${key}` : key;
-      extraFields.push(currentPath);
+    // 4) Objekt vs. non-Objekt → Typabweichung
+    const expIsObj = expected !== null && typeof expected === "object";
+    const actIsObj = actual !== null && typeof actual === "object";
+    if (expIsObj !== actIsObj) {
+      typeMismatches.push({
+        path: path || "<root>",
+        expected: expIsObj ? "object" : getType(expected),
+        actual: actIsObj ? "object" : getType(actual),
+      });
+      return;
+    }
+
+    // 5) Beide sind Objekte → rekursiver Key-Abgleich
+    const expObj = expected as Record<string, unknown>;
+    const actObj = actual as Record<string, unknown>;
+
+    // 5a) Fehlende Keys (in expected, nicht in actual)
+    for (const key of Object.keys(expObj)) {
+      const subPath = path ? `${path}.${key}` : key;
+      if (!(key in actObj)) {
+        missingFields.push(subPath);
+      } else {
+        recurse(expObj[key], actObj[key], subPath);
+      }
+    }
+
+    // 5b) Zusätzliche Keys (in actual, nicht in expected)
+    for (const key of Object.keys(actObj)) {
+      if (!(key in expObj)) {
+        const subPath = path ? `${path}.${key}` : key;
+        extraFields.push(subPath);
+      }
     }
   }
 
+  recurse(expectedRaw, actualRaw, "");
   return { missingFields, extraFields, typeMismatches };
 }
+
+/**
+ * Hilfsfunktion, um den Typ eines Werts als String zu bekommen.
+ * Beispiel: getType("foo") → "string", getType([1,2]) → "array"
+ */
+function getType(value: unknown): string {
+  if (value === null) return "null";
+  if (Array.isArray(value)) return "array";
+  return typeof value;
+}
diff --git a/src/api-tester/core/configLoader.ts b/src/api-tester/core/configLoader.ts
index ee657b7..bf62815 100644
--- a/src/api-tester/core/configLoader.ts
+++ b/src/api-tester/core/configLoader.ts
@@ -1,6 +1,7 @@
 // src/api-tester/core/configLoader.ts
 
 import { resolveProjectPath } from "./utils.ts";
+import { existsSync } from "https://deno.land/std@0.216.0/fs/mod.ts";
 
 export type Method = "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
 
@@ -11,22 +12,161 @@ export interface EndpointConfig {
   requiresId?: boolean;
   expectedStructure?: string;
   headers?: Record<string, string>;
-  query?: Record<string, string>;
+  query?: Record<string, string | number>;
   bodyFile?: string;
 }
 
+export interface GitRepoInfo {
+  owner: string;
+  repo: string;
+  branch: string;
+}
+
 export interface Config {
   endpoints: EndpointConfig[];
+  gitRepo: GitRepoInfo;
 }
 
+/**
+ * Assert-Hilfsfunktion, um sicherzustellen, dass ein Wert ein Objekt ist.
+ * Wirft eine Exception, wenn nicht.
+ */
+function assertObject(
+  x: unknown,
+  ctx: string,
+): asserts x is Record<string, unknown> {
+  if (typeof x !== "object" || x === null) {
+    throw new Error(`${ctx} muss ein Objekt sein.`);
+  }
+}
+
+/**
+ * Lädt die Konfiguration aus einer config.json-Datei.
+ * Sucht in mehreren vordefinierten Pfaden (bzw. über CONFIG_PATH in ENV).
+ * Validiert anschließend, dass:
+ *  - "endpoints" ein nicht-leeres Array ist,
+ *  - jeder Eintrag in endpoints über name, url und method verfügt,
+ *  - ggf. owner, repo und branch für gitRepo vorhanden sind (ENV oder JSON).
+ *
+ * @returns Konfigurationsobjekt mit endpoints und gitRepo
+ * @throws Error, wenn keine gültige config.json gefunden oder Felder ungültig sind.
+ */
 export async function loadConfig(): Promise<Config> {
-  // jetzt direkt im Ordner src/api-tester/config.json
-  const pathToConfig = resolveProjectPath("config.json");
+  // 1) Mögliche Orte für config.json
+  const envPath = Deno.env.get("CONFIG_PATH");
+  const candidates = envPath ? [envPath] : [
+    "config.json",
+    "src/api-tester/config.json",
+    "api-tester/config.json",
+    "src/config.json",
+  ];
+
+  let rawConfig: string | undefined;
+  let usedPath: string | undefined;
+
+  for (const rel of candidates) {
+    const absolute = resolveProjectPath(rel);
+    if (existsSync(absolute)) {
+      rawConfig = await Deno.readTextFile(absolute);
+      usedPath = absolute;
+      break;
+    }
+  }
+
+  if (!rawConfig || !usedPath) {
+    const tried = candidates.map((c) => resolveProjectPath(c)).join("\n  ");
+    throw new Error(
+      `Fehler: Keine config.json gefunden. Ich habe gesucht unter:\n  ${tried}`,
+    );
+  }
+
+  console.log(`🔧 Lade Konfiguration aus ${usedPath}`);
+
+  // 2) JSON parsen
+  let parsed: unknown;
   try {
-    const raw = await Deno.readTextFile(pathToConfig);
-    return JSON.parse(raw) as Config;
+    parsed = JSON.parse(rawConfig);
   } catch (err) {
-    console.error("❌ Fehler beim Laden der config.json:", err);
-    Deno.exit(1);
+    const msg = err instanceof Error ? err.message : String(err);
+    throw new Error(`Ungültiges JSON in "${usedPath}": ${msg}`);
   }
+  assertObject(parsed, `Inhalt von "${usedPath}"`);
+
+  // 3) Endpoints validieren
+  const endpointsRaw = (parsed as Record<string, unknown>).endpoints;
+  if (!Array.isArray(endpointsRaw) || endpointsRaw.length === 0) {
+    throw new Error(
+      `"endpoints" in "${usedPath}" muss ein nicht-leeres Array sein.`,
+    );
+  }
+
+  const endpoints: EndpointConfig[] = endpointsRaw.map((e, i) => {
+    assertObject(e, `endpoints[${i}]`);
+
+    const name = e.name;
+    const url = e.url;
+    const method = e.method;
+
+    if (typeof name !== "string" || name.trim() === "") {
+      throw new Error(
+        `endpoints[${i}].name muss ein nicht-leerer String sein.`,
+      );
+    }
+    if (typeof url !== "string" || url.trim() === "") {
+      throw new Error(`endpoints[${i}].url muss ein nicht-leerer String sein.`);
+    }
+    if (typeof method !== "string" || method.trim() === "") {
+      throw new Error(
+        `endpoints[${i}].method muss ein nicht-leerer String sein.`,
+      );
+    }
+
+    return {
+      name,
+      url,
+      method: method as Method,
+      requiresId: Boolean(e.requiresId),
+      expectedStructure: typeof e.expectedStructure === "string" &&
+          e.expectedStructure.trim() !== ""
+        ? e.expectedStructure
+        : undefined,
+      headers: typeof e.headers === "object" && e.headers !== null
+        ? (e.headers as Record<string, string>)
+        : undefined,
+      query: typeof e.query === "object" && e.query !== null
+        ? (e.query as Record<string, string | number>)
+        : undefined,
+      bodyFile: typeof e.bodyFile === "string" && e.bodyFile.trim() !== ""
+        ? e.bodyFile
+        : undefined,
+    };
+  });
+
+  // 4) Git-Repo-Info: zuerst aus ENV lesen, sonst aus JSON
+  let owner = Deno.env.get("GITHUB_OWNER") ?? undefined;
+  let repo = Deno.env.get("GITHUB_REPO") ?? undefined;
+  let branch = Deno.env.get("GITHUB_BRANCH") ?? undefined;
+
+  if (!owner || !repo) {
+    const rawGit = (parsed as Record<string, unknown>).gitRepo;
+    assertObject(rawGit, `"gitRepo" in "${usedPath}"`);
+
+    if (!owner && typeof rawGit.owner === "string") owner = rawGit.owner;
+    if (!repo && typeof rawGit.repo === "string") repo = rawGit.repo;
+    if (!branch && typeof rawGit.branch === "string") branch = rawGit.branch;
+  }
+
+  // 5) Validieren, dass owner und repo jetzt gesetzt sind
+  if (!owner || !repo) {
+    throw new Error(
+      `Bitte GITHUB_OWNER und GITHUB_REPO als ENV-Variablen setzen oder in "${usedPath}" unter "gitRepo" angeben.`,
+    );
+  }
+  // Branch auf "main" defaulten, falls nicht gesetzt
+  branch = branch ?? "main";
+
+  return {
+    endpoints,
+    gitRepo: { owner, repo, branch },
+  };
 }
diff --git a/src/api-tester/core/endpointRunner.ts b/src/api-tester/core/endpointRunner.ts
index a68ee1f..1cd278b 100644
--- a/src/api-tester/core/endpointRunner.ts
+++ b/src/api-tester/core/endpointRunner.ts
@@ -1,11 +1,17 @@
 // src/api-tester/core/endpointRunner.ts
 
-import type { EndpointConfig as Endpoint } from "./configLoader.ts";
-import { promptUserForId } from "./promptHelper.ts";
+import { expandGlob } from "https://deno.land/std@0.216.0/fs/mod.ts";
+import { basename, join } from "https://deno.land/std@0.216.0/path/mod.ts";
+import type { EndpointConfig } from "./configLoader.ts";
+import type { RepoInfo, SchemaUpdate } from "./gitPush.ts";
+import { resolveProjectPath } from "./utils.ts";
+import defaultIdsRaw from "../default-ids.json" with { type: "json" };
 import { checkAndUpdateApiVersion } from "./versionChecker.ts";
-import { testEndpoint } from "./apiCaller.ts";
-// JSON‑Import jetzt mit "with" statt "assert"
-import defaultIds from "../default-ids.json" with { type: "json" };
+import { testEndpoint, TestResult } from "./apiCaller.ts";
+import { promptUserForId } from "./promptHelper.ts";
+
+type DefaultIds = Record<string, string | Record<string, unknown>>;
+const _defaultIds = defaultIdsRaw as DefaultIds;
 
 export interface VersionUpdate {
   name: string;
@@ -13,110 +19,136 @@ export interface VersionUpdate {
   expectedStructure?: string;
 }
 
+/**
+ * Testet einen einzelnen Endpoint:
+ * 1) Ersetzt dynamische Pfad-Parameter (ID, etc.)
+ * 2) Prüft auf neue API-Version (via checkAndUpdateApiVersion)
+ * 3) Baut finale URL (buildUrl) und ruft testEndpoint auf
+ * 4) Bei Schema-Drift legt es ein neues _vN.json an und fügt es zu schemaUpdates hinzu
+ */
 export async function runSingleEndpoint(
-  endpoint: Endpoint,
-  config: { endpoints: Endpoint[] },
+  endpoint: EndpointConfig,
+  _config: { endpoints: EndpointConfig[]; gitRepo: RepoInfo },
   versionUpdates: VersionUpdate[],
+  schemaUpdates: SchemaUpdate[],
   dynamicParamsOverride: Record<string, string> = {},
-): Promise<Awaited<ReturnType<typeof testEndpoint>> | null> {
-  const stripDataPrefix = (s: string) =>
-    s.replace(/^data\[0\]\./, "").replace(/^data\./, "");
+): Promise<TestResult | null> {
+  console.debug(`[DEBUG] Starte runSingleEndpoint für "${endpoint.name}"`);
 
-  // ─── 1️⃣ ID‑Handling ────────────────────────────────────────────────────
+  // 1) Dynamische Pfad-Parameter (falls requiresId = true)
   if (endpoint.requiresId) {
-    let def = (defaultIds as Record<string, unknown>)[endpoint.name];
-    if (def === undefined) {
-      def = (defaultIds as Record<string, unknown>)[
-        endpoint.name.replace(/\s+/g, "_")
-      ];
-    }
-    console.log("🔍 default-ids.json für", endpoint.name, "→", def);
-
-    const isObj = def !== null && typeof def === "object";
-    const params = isObj ? Object.keys(def as Record<string, unknown>) : ["id"];
-
-    for (const key of params) {
-      if (!dynamicParamsOverride[key]) {
-        if (!isObj && key === "id" && def != null) {
-          dynamicParamsOverride.id = String(def);
-          console.log(`🟢 Verwende gespeicherte id: ${def}`);
+    const key = endpoint.name.replace(/\s+/g, "_");
+    const defRaw = _defaultIds[key] ?? _defaultIds[endpoint.name];
+    const isObj = defRaw !== null && typeof defRaw === "object";
+    const keys = isObj
+      ? Object.keys(defRaw as Record<string, unknown>)
+      : ["id"];
+    for (const k of keys) {
+      if (!dynamicParamsOverride[k]) {
+        if (!isObj && defRaw != null) {
+          dynamicParamsOverride.id = String(defRaw);
+          console.debug(`🟢 Verwende gespeicherte id: ${defRaw}`);
         } else if (
           isObj &&
-          (def as Record<string, unknown>)[key] != null
+          (defRaw as Record<string, unknown>)[k] != null
         ) {
-          dynamicParamsOverride[key] = String(
-            (def as Record<string, unknown>)[key],
+          dynamicParamsOverride[k] = String(
+            (defRaw as Record<string, unknown>)[k],
           );
-          console.log(
-            `🟢 Verwende gespeicherte ${key}: ${
-              (def as Record<string, unknown>)[key]
-            }`,
+          console.debug(
+            `🟢 Verwende gespeicherte ${k}: ${dynamicParamsOverride[k]}`,
           );
         } else {
           const ans = await promptUserForId(
-            `🟡 Bitte Wert für "${key}" bei "${endpoint.name}" angeben: `,
+            `🟡 Bitte Wert für "${k}" bei "${endpoint.name}" angeben: `,
           );
           if (!ans) {
-            console.warn(`⚠️ Kein Wert für ${key}, skip ${endpoint.name}.`);
+            console.warn(
+              `⚠️ Kein Wert für "${k}", überspringe "${endpoint.name}".`,
+            );
             return null;
           }
-          dynamicParamsOverride[key] = ans;
-          console.log(`🟢 Nutzer-Eingabe ${key}: ${ans}`);
+          dynamicParamsOverride[k] = ans;
+          console.debug(`🟢 Nutzer-Eingabe ${k}: ${ans}`);
         }
       }
     }
-
-    console.log(
-      `🚀 Starte Test für "${endpoint.name}" mit Param: ` +
-        params.map((k) => `${k}=${dynamicParamsOverride[k]}`).join(", "),
-    );
   }
 
-  // ─── 2️⃣ Versionserkennung ──────────────────────────────────────────────
-  const updated = await checkAndUpdateApiVersion(
+  // 2) API-Versionserkennung
+  const versionInfo = await checkAndUpdateApiVersion(
     endpoint,
     dynamicParamsOverride,
   );
-  if (updated.versionChanged) {
+  if (versionInfo.versionChanged) {
     versionUpdates.push({
       name: endpoint.name,
-      url: updated.url,
+      url: versionInfo.url,
       expectedStructure: endpoint.expectedStructure,
     });
-    const idx = config.endpoints.findIndex((e) => e.name === endpoint.name);
-    if (idx !== -1) config.endpoints[idx] = updated as Endpoint;
-    console.log(`🔄 Neue API‑Version erkannt: ${updated.url}`);
-    return null; // 2‑Schritt‑Logik: beim nächsten Durchlauf wird verglichen
+    console.debug(`🔄 Neue API-Version erkannt: ${versionInfo.url}`);
+    return null;
   }
 
-  // ─── 3️⃣ Struktur‑ & Typvergleich ───────────────────────────────────────
-  const result = await testEndpoint(
-    updated as Endpoint,
-    dynamicParamsOverride,
-    config,
-  );
-  const { missingFields, extraFields, typeMismatches } = result;
-
-  if (missingFields.length) {
-    console.log(
-      `❌ Fehlende Felder: ${missingFields.map(stripDataPrefix).join(", ")}`,
-    );
-  }
-  if (extraFields.length) {
-    console.log(
-      `➕ Neue Felder: ${extraFields.map(stripDataPrefix).join(", ")}`,
+  // 3) URL-Build & Test
+  let finalUrl: string;
+  try {
+    finalUrl = buildUrl(versionInfo.url, dynamicParamsOverride);
+  } catch (e: unknown) {
+    console.error(
+      `❌ URL-Build für "${endpoint.name}" fehlgeschlagen: ${
+        (e as Error).message
+      }`,
     );
+    return null;
   }
-  if (typeMismatches.length) {
-    console.log("⚠️ Typabweichungen:");
-    for (const tm of typeMismatches) {
-      console.log(
-        `• ${
-          stripDataPrefix(tm.path)
-        }: erwartet ${tm.expected}, erhalten ${tm.actual}`,
-      );
+  const toTest = { ...versionInfo, url: finalUrl };
+  const result = await testEndpoint(toTest, dynamicParamsOverride);
+
+  console.debug(
+    `[DEBUG]  result: missing=${result.missingFields.length}, extra=${result.extraFields.length}, typeMismatches=${result.typeMismatches.length}`,
+  );
+
+  // 4) Schema-Drift → neuen _vN.json-Entwurf anlegen
+  const hasDrift = result.missingFields.length > 0 ||
+    result.extraFields.length > 0 ||
+    result.typeMismatches.length > 0;
+  if (hasDrift && result.actualData) {
+    const key = endpoint.name.replace(/\s+/g, "_");
+    const expectedDir = resolveProjectPath("src", "api-tester", "expected");
+    let maxV = 0;
+    try {
+      for await (
+        const file of expandGlob(join(expectedDir, `${key}_v*.json`))
+      ) {
+        const m = basename(file.path).match(/_v(\d+)\.json$/);
+        if (m) maxV = Math.max(maxV, Number(m[1]));
+      }
+    } catch (err) {
+      console.warn(`⚠️ Fehler beim Scannen von _vN.json für "${key}": ${err}`);
     }
+    const nextName = `${key}_v${maxV + 1}.json`;
+    const fsPath = join(expectedDir, nextName);
+    schemaUpdates.push({ key, fsPath, newSchema: result.actualData });
+    console.debug(`🔖 Neuer Schema-Entwurf für "${key}" angelegt: ${nextName}`);
   }
 
+  console.debug(
+    `[DEBUG] runSingleEndpoint für "${endpoint.name}" abgeschlossen`,
+  );
   return result;
 }
+
+/**
+ * Baut finale URL, indem es Platzhalter ${KEY} ersetzt:
+ * - Zunächst aus dynamicParamsOverride
+ * - Dann aus Deno.env
+ * Wirft, wenn ein Platzhalter keinen Wert hat.
+ */
+function buildUrl(template: string, params: Record<string, string>): string {
+  return template.replace(/\$\{([^}]+)\}/g, (_m, key) => {
+    const p = params[key] ?? Deno.env.get(key);
+    if (!p) throw new Error(`Kein Wert für URL-Platzhalter "${key}"`);
+    return encodeURIComponent(p);
+  });
+}
diff --git a/src/api-tester/core/fileLogger.ts b/src/api-tester/core/fileLogger.ts
index 5671d7a..e4fc46e 100644
--- a/src/api-tester/core/fileLogger.ts
+++ b/src/api-tester/core/fileLogger.ts
@@ -1,43 +1,50 @@
 // src/api-tester/core/fileLogger.ts
 
-import { ensureDir } from "https://deno.land/std@0.177.0/fs/mod.ts";
+import { ensureDir } from "https://deno.land/std@0.216.0/fs/mod.ts";
 import {
   dirname,
   fromFileUrl,
   join,
-} from "https://deno.land/std@0.177.0/path/mod.ts";
+} from "https://deno.land/std@0.216.0/path/mod.ts";
 
 /**
- * Ermittelt das Verzeichnis der aktuellen Datei.
+ * Ermittle das Verzeichnis dieser Datei.
  */
 const __dirname = dirname(fromFileUrl(import.meta.url));
 
 /**
- * Schreibt eine generische Log-Nachricht mit Zeitstempel in eine angegebene Datei.
- * Erstellt das Log-Verzeichnis und die Datei, falls sie nicht existieren.
+ * Schreibt eine generische Log-Nachricht mit Zeitstempel in die angegebene Datei.
+ * Legt bei Bedarf das Verzeichnis und die Datei an.
  *
  * @param filename Der Dateiname, z. B. "custom.log"
- * @param message  Die Lognachricht
+ * @param message  Die Lognachricht, die protokolliert werden soll
  */
 export async function logToFile(
   filename: string,
   message: string,
 ): Promise<void> {
-  const logDir = join(__dirname, "..", "logs");
-  await ensureDir(logDir);
-  const logPath = join(logDir, filename);
-  const timestamp = new Date().toISOString();
-  await Deno.writeTextFile(logPath, `[${timestamp}] ${message}\n`, {
-    append: true,
-  });
+  try {
+    const logDir = join(__dirname, "..", "logs");
+    await ensureDir(logDir);
+
+    const logPath = join(logDir, filename);
+    const timestamp = new Date().toISOString();
+    const entry = `[${timestamp}] ${message}\n`;
+
+    await Deno.writeTextFile(logPath, entry, { append: true });
+  } catch (err) {
+    console.error(
+      "❌ Fehler beim Schreiben in log Datei:",
+      err instanceof Error ? err.message : err,
+    );
+  }
 }
 
 /**
- * Schreibt eine Fehlermeldung in die Datei "errors.log".
- * Wird z. B. verwendet bei HTTP-Fehlern oder Ausführungsfehlern.
+ * Schreibt eine Fehlermeldung in "errors.log".
  *
- * @param endpointName  Der Name des API-Endpunkts
- * @param errorMessage  Die konkrete Fehlermeldung
+ * @param endpointName  Der Name des API-Endpunkts, an dem der Fehler aufgetreten ist
+ * @param errorMessage  Die Fehlermeldung
  */
 export async function logError(
   endpointName: string,
@@ -46,10 +53,12 @@ export async function logError(
   try {
     const logDir = join(__dirname, "..", "logs");
     await ensureDir(logDir);
+
     const logPath = join(logDir, "errors.log");
     const timestamp = new Date().toISOString();
     const entry =
       `[${timestamp}] Fehler bei ${endpointName}: ${errorMessage}\n\n`;
+
     await Deno.writeTextFile(logPath, entry, { append: true });
   } catch (err) {
     console.error(
@@ -60,25 +69,30 @@ export async function logError(
 }
 
 /**
- * Schreibt erkannte Strukturunterschiede in die Datei "differences.log".
- * Wird z. B. aufgerufen, wenn Felder fehlen oder zusätzliche auftauchen.
+ * Schreibt erkannte Strukturunterschiede in "differences.log".
+ * Wird nur aktiv, wenn Unterschiede vorhanden sind.
  *
- * @param endpointName  Der API-Endpunkt
- * @param differences   Liste an Unterschieden als Strings
+ * @param endpointName   Der Name des betroffenen API-Endpunkts
+ * @param differences    Liste von Unterschiedsbeschreibungen, z. B. ["field1 fehlt", "field2 extra"]
  */
 export async function logDifferences(
   endpointName: string,
   differences: string[],
 ): Promise<void> {
   if (!differences || differences.length === 0) return;
+
   try {
     const logDir = join(__dirname, "..", "logs");
     await ensureDir(logDir);
+
     const logPath = join(logDir, "differences.log");
     const timestamp = new Date().toISOString();
     const entry = `[${timestamp}] Unterschiede bei ${endpointName}:\n${
-      differences.join("\n")
+      differences.join(
+        "\n",
+      )
     }\n\n`;
+
     await Deno.writeTextFile(logPath, entry, { append: true });
   } catch (err) {
     console.error(
diff --git a/src/api-tester/core/gitPush.ts b/src/api-tester/core/gitPush.ts
new file mode 100644
index 0000000..99c7eed
--- /dev/null
+++ b/src/api-tester/core/gitPush.ts
@@ -0,0 +1,222 @@
+// src/api-tester/core/gitPush.ts
+
+import { Octokit } from "https://esm.sh/@octokit/rest@19";
+import type { GitRepoInfo } from "./configLoader.ts";
+import type { Schema } from "./types.ts";
+import { basename } from "https://deno.land/std@0.216.0/path/mod.ts";
+
+export type RepoInfo = GitRepoInfo;
+
+/** Beschreibt eine neu generierte Schema-Datei */
+export interface SchemaUpdate {
+  key: string;
+  fsPath: string; // z.B. "/.../src/api-tester/expected/Get_View_Customer_v1.json"
+  newSchema: Schema; // vollständiges Response-Body-Schema
+}
+
+/** Base64-Decodierung für UTF-8-codierte Strings */
+function decodeBase64(content: string): string {
+  const cleaned = content.replace(/\s+/g, "");
+  const bin = atob(cleaned);
+  const bytes = Uint8Array.from(bin, (c) => c.charCodeAt(0));
+  return new TextDecoder().decode(bytes);
+}
+
+/** Base64-Encoding für UTF-8-Strings */
+function encodeBase64(text: string): string {
+  const utf8 = new TextEncoder().encode(text);
+  let bin = "";
+  for (const b of utf8) {
+    bin += String.fromCharCode(b);
+  }
+  return btoa(bin);
+}
+
+/**
+ * Wandelt ein „echtes“ Schema in eine Stub-Variante um:
+ * - Alle Strings → "string"
+ * - Alle Numbers → 0
+ * - Alle Booleans → false
+ * - Null bleibt null
+ * - Arrays werden auf ihr erstes Element abgebildet (rekursiv)
+ * - Objekte werden rekursiv verarbeitet
+ */
+function stubify(value: unknown): unknown {
+  if (value === null) {
+    return null;
+  }
+  if (Array.isArray(value)) {
+    return value.length > 0 ? [stubify(value[0])] : [];
+  }
+  if (typeof value === "object") {
+    const out: Record<string, unknown> = {};
+    for (const [k, v] of Object.entries(value as Record<string, unknown>)) {
+      out[k] = stubify(v);
+    }
+    return out;
+  }
+  switch (typeof value) {
+    case "string":
+      return "string";
+    case "number":
+      return 0;
+    case "boolean":
+      return false;
+    default:
+      return null;
+  }
+}
+
+/**
+ * Pusht neue oder geänderte „expected“-Schemas ins GitHub-Repo und passt
+ * anschließend die src/api-tester/config.json so an, dass expectedStructure
+ * auf die neuen Dateinamen zeigt.
+ */
+export async function pushExpectedSchemaToGit(
+  repoInfo: RepoInfo,
+  schemaUpdates: SchemaUpdate[],
+) {
+  const githubToken = Deno.env.get("GITHUB_TOKEN");
+  if (!githubToken) {
+    console.error("❌ GITHUB_TOKEN nicht gesetzt. Git-Push übersprungen.");
+    return;
+  }
+
+  const octo = new Octokit({ auth: githubToken });
+  const pushedEntries: Array<{ key: string; pathInRepo: string }> = [];
+
+  // 1) Alle neuen/updated Schema-Dateien pushen
+  for (const { key, fsPath, newSchema } of schemaUpdates) {
+    // a) Stub-Schema erzeugen
+    const stubSchema = stubify(newSchema);
+    const contentText = JSON.stringify(stubSchema, null, 2) + "\n";
+
+    // b) Pfad im Repo bestimmen (relativ zu "src/api-tester/expected/..."); notfalls warnen
+    const match = fsPath.match(/src\/api-tester\/expected\/.+$/);
+    if (!match) {
+      console.warn(
+        `⚠️ Kann Repo-Pfad nicht bestimmen für "${fsPath}". Überspringe.`,
+      );
+      continue;
+    }
+    const pathInRepo = match[0];
+
+    // c) Aktuelle SHA holen, falls Datei bereits existiert (Update-Fall)
+    let existingSha: string | undefined;
+    try {
+      const resp = await octo.repos.getContent({
+        owner: repoInfo.owner,
+        repo: repoInfo.repo,
+        path: pathInRepo,
+        ref: repoInfo.branch,
+      });
+      if (!Array.isArray(resp.data) && resp.data.type === "file") {
+        existingSha = resp.data.sha;
+      }
+    } catch {
+      // Datei existiert nicht → wird neu angelegt
+    }
+
+    // d) Datei erstellen oder aktualisieren
+    try {
+      const base64Content = encodeBase64(contentText);
+      await octo.repos.createOrUpdateFileContents({
+        owner: repoInfo.owner,
+        repo: repoInfo.repo,
+        path: pathInRepo,
+        message: `chore: update expected schema ${key}`,
+        content: base64Content,
+        branch: repoInfo.branch,
+        ...(existingSha ? { sha: existingSha } : {}),
+      });
+      console.log(`✅ Schema "${pathInRepo}" in GitHub gepusht.`);
+      pushedEntries.push({ key, pathInRepo });
+    } catch (err: unknown) {
+      const msg = err instanceof Error ? err.message : String(err);
+      console.error(`❌ Git-Push fehlgeschlagen für "${pathInRepo}": ${msg}`);
+    }
+  }
+
+  // 2) Wenn keine Datei gepusht wurde, beenden
+  if (pushedEntries.length === 0) {
+    console.log(
+      "ℹ️ Keine Schema-Updates gepusht, config.json bleibt unverändert.",
+    );
+    return;
+  }
+
+  // 3) config.json aus dem Repo holen (unter src/api-tester/)
+  const configPathInRepo = "src/api-tester/config.json";
+  let configSha: string;
+  let configObj: {
+    endpoints: Array<{ name: string; expectedStructure?: string }>;
+  };
+
+  try {
+    const cfgResp = await octo.repos.getContent({
+      owner: repoInfo.owner,
+      repo: repoInfo.repo,
+      path: configPathInRepo,
+      ref: repoInfo.branch,
+    });
+
+    if (Array.isArray(cfgResp.data) || cfgResp.data.type !== "file") {
+      throw new Error("config.json ist kein File");
+    }
+    configSha = cfgResp.data.sha;
+    configObj = JSON.parse(decodeBase64(cfgResp.data.content));
+  } catch (err: unknown) {
+    const status = (err as { status?: number }).status;
+    if (status === 404) {
+      console.warn(
+        `⚠️ config.json nicht gefunden unter "${configPathInRepo}". Überspringe config.json-Update.`,
+      );
+      return;
+    }
+    console.error("❌ Unerwarteter Fehler beim Laden der config.json:", err);
+    return;
+  }
+
+  // 4) In-Memory-Anpassung: expectedStructure auf neue Dateinamen setzen
+  for (const { key, pathInRepo } of pushedEntries) {
+    const filename = basename(pathInRepo); // z.B. Get_View_Customer_v2.json
+    const relativePath = `expected/${filename}`; // Neu in config.json
+    let found = false;
+
+    for (const ep of configObj.endpoints) {
+      if (ep.name.replace(/\s+/g, "_") === key) {
+        ep.expectedStructure = relativePath;
+        console.log(
+          `🔄 config.json: Endpoint "${ep.name}" → expectedStructure="${relativePath}"`,
+        );
+        found = true;
+        break;
+      }
+    }
+
+    if (!found) {
+      console.warn(
+        `⚠️ In config.json wurde kein Endpoint mit key "${key}" gefunden; expectedStructure nicht gesetzt.`,
+      );
+    }
+  }
+
+  // 5) config.json zurückspielen
+  try {
+    const newConfigText = JSON.stringify(configObj, null, 2) + "\n";
+    const newBase64 = encodeBase64(newConfigText);
+    await octo.repos.createOrUpdateFileContents({
+      owner: repoInfo.owner,
+      repo: repoInfo.repo,
+      path: configPathInRepo,
+      message: "chore: update config.json with new expectedStructure",
+      content: newBase64,
+      branch: repoInfo.branch,
+      sha: configSha,
+    });
+    console.log("✅ config.json erfolgreich aktualisiert.");
+  } catch (err: unknown) {
+    const msg = err instanceof Error ? err.message : String(err);
+    console.error("❌ Konnte config.json nicht zurückschreiben:", msg);
+  }
+}
diff --git a/src/api-tester/core/kv.ts b/src/api-tester/core/kv.ts
index 6f4fb6e..667066f 100644
--- a/src/api-tester/core/kv.ts
+++ b/src/api-tester/core/kv.ts
@@ -1,77 +1,112 @@
 // src/api-tester/core/kv.ts
 
-// Deno Deploy stellt globalThis.KV bereit
+/**
+ * KV-Instance für Tests und Deploy:
+ * - In Deno Deploy: globalThis.KV
+ * - Lokal (mit --unstable-kv): Deno.openKv()
+ * - CI / SKIP_KV: In-Memory-Stub
+ */
+
 declare global {
-  var KV: Deno.Kv;
+  var KV: Deno.Kv; // in Deno Deploy verfügbar
 }
 
-/** Erstellt einen In-Memory-Stub, der die minimalen KV-Methoden implementiert */
+// Minimaler In-Memory-KV-Stub für CI oder SKIP_KV=true
 function createInMemoryKv(): Deno.Kv {
   const store = new Map<string, unknown>();
+  const toKey = (key: Deno.KvKey) => (key as string[]).join("::");
 
-  const kvStub = {
-    get<T>(key: Deno.KvKey) {
-      const composite = (key as unknown as string[]).join("::");
+  return {
+    // get<T> muss ein KvEntry<T> zurückliefern, value: T
+    get<T>(key: Deno.KvKey): Promise<Deno.KvEntry<T>> {
+      const k = toKey(key);
+      const v = store.get(k) as T;
       return Promise.resolve({
         key,
-        value: store.get(composite) as T,
+        value: v as T,
         versionstamp: "",
       });
     },
-    set(key: Deno.KvKey, value: unknown) {
-      const composite = (key as unknown as string[]).join("::");
-      store.set(composite, value);
-      return Promise.resolve({ key, versionstamp: "" });
+
+    // set() muss KvEntry<void> zurückliefern, value: void (undefined)
+    set(key: Deno.KvKey, _value: unknown): Promise<Deno.KvEntry<void>> {
+      store.set(toKey(key), _value);
+      return Promise.resolve({
+        key,
+        value: undefined,
+        versionstamp: "",
+      });
     },
-    delete(key: Deno.KvKey) {
-      const composite = (key as unknown as string[]).join("::");
-      store.delete(composite);
-      return Promise.resolve({ key, versionstamp: "" });
+
+    // delete() ebenfalls KvEntry<void>
+    delete(key: Deno.KvKey): Promise<Deno.KvEntry<void>> {
+      store.delete(toKey(key));
+      return Promise.resolve({
+        key,
+        value: undefined,
+        versionstamp: "",
+      });
     },
-    list<T>(_options?: Deno.KvListSelector) {
-      async function* gen() {
-        // kein Eintrag
+
+    // list<T> gibt ein AsyncIterable<Deno.KvEntry<T>> zurück (hier leer)
+    list<T>(_opts?: unknown): AsyncIterable<Deno.KvEntry<T>> {
+      async function* gen(): AsyncGenerator<Deno.KvEntry<T>> {
+        // keine Einträge
       }
       return gen();
     },
-    // Stub für weitere Methoden, damit der Type-Checker zufrieden ist
-    getMany: (_keys: Deno.KvKey[]) => Promise.resolve([]),
-    atomic: () => {
-      throw new Error("atomic nicht implementiert");
-    },
-    enqueue: () => Promise.reject(new Error("enqueue nicht implementiert")),
-    listenQueue: () => {
-      throw new Error("listenQueue nicht implementiert");
+
+    // getMany liefert für jeden Schlüssel ein KvEntry<T>, value: T
+    getMany(keys: Deno.KvKey[]): Promise<Array<Deno.KvEntry<unknown>>> {
+      const entries: Deno.KvEntry<unknown>[] = keys.map((key) => {
+        const k = toKey(key);
+        const v = store.get(k);
+        return {
+          key,
+          value: v as unknown,
+          versionstamp: "",
+        };
+      });
+      return Promise.resolve(entries);
     },
-    restore: async () => {},
-    transaction: (_fn: unknown) =>
-      Promise.reject(new Error("transaction nicht implementiert")),
-  };
 
-  // Cast auf Deno.Kv via unknown
-  return kvStub as unknown as Deno.Kv;
+    atomic() {
+      throw new Error("KV.atomic() nicht implementiert im In-Memory-Stub");
+    },
+    enqueue() {
+      return Promise.reject(
+        new Error("KV.enqueue() nicht implementiert im In-Memory-Stub"),
+      );
+    },
+    listenQueue() {
+      throw new Error("KV.listenQueue() nicht implementiert im In-Memory-Stub");
+    },
+    restore() {
+      return Promise.resolve();
+    },
+    transaction() {
+      return Promise.reject(
+        new Error("KV.transaction() nicht implementiert im In-Memory-Stub"),
+      );
+    },
+  } as unknown as Deno.Kv;
 }
 
-let _kv: Deno.Kv;
+let kv: Deno.Kv;
 
-// Verwende In-Memory-Stub, wenn SKIP_KV oder CI gesetzt ist
-if (Deno.env.get("SKIP_KV") === "true" || Deno.env.get("CI") === "true") {
+if (Deno.env.get("CI") === "true" || Deno.env.get("SKIP_KV") === "true") {
   console.warn("⚠️ SKIP_KV/CI erkannt – verwende In-Memory KV-Stub");
-  _kv = createInMemoryKv();
-
-  // Auf Deno Deploy steht globalThis.KV zur Verfügung
+  kv = createInMemoryKv();
 } else if (typeof globalThis.KV !== "undefined") {
-  _kv = globalThis.KV;
-
-  // Lokal mit --unstable-kv
+  // Deno Deploy
+  kv = globalThis.KV;
 } else if (typeof Deno.openKv === "function") {
-  _kv = await Deno.openKv();
-
-  // Kein KV verfügbar → Fehler
+  // Lokal mit --unstable-kv
+  kv = await Deno.openKv();
 } else {
   throw new Error(
-    "Deno KV nicht verfügbar. Starte mit --unstable-kv oder setze SKIP_KV=true.",
+    "Deno KV nicht verfügbar – bitte mit --unstable-kv starten oder SKIP_KV=true setzen.",
   );
 }
 
-export const kvInstance = _kv;
+export const kvInstance = kv;
diff --git a/src/api-tester/core/promptHelper.ts b/src/api-tester/core/promptHelper.ts
index 79b8b88..c492384 100644
--- a/src/api-tester/core/promptHelper.ts
+++ b/src/api-tester/core/promptHelper.ts
@@ -13,15 +13,15 @@ export async function promptUserForId(message: string): Promise<string> {
   // Prompt ausgeben
   await Deno.stdout.write(encoder.encode(message));
 
-  // Buffer zum Einlesen
+  // Buffer zum Einlesen (1 KB)
   const buf = new Uint8Array(1024);
   const bytesRead = await Deno.stdin.read(buf);
   if (!bytesRead) {
-    // Keine Daten gelesen
+    // Keine Daten gelesen (EOF o.ä.)
     return "";
   }
 
-  // Bytes in String umwandeln und trimmen
+  // Bytes in String umwandeln und nur Zeilenumbruch am Ende entfernen
   const input = decoder.decode(buf.subarray(0, bytesRead));
   return input.replace(/\r?\n$/, "");
 }
diff --git a/src/api-tester/core/resetApprovals.ts b/src/api-tester/core/resetApprovals.ts
index 34c6596..ed8772a 100644
--- a/src/api-tester/core/resetApprovals.ts
+++ b/src/api-tester/core/resetApprovals.ts
@@ -1,42 +1,41 @@
 // src/api-tester/core/resetApprovals.ts
 
-import { resolveProjectPath } from "./utils.ts";
+import { kvInstance } from "./kv.ts";
 
 /**
- * Setzt nur die approval-Status zurück,
- * bewahrt jedoch den gecachten Block-Array unter __rawBlocks.
+ * Setzt alle relevanten KV-Einträge zurück:
+ * 1) approvals (setzt auf leeres Objekt)
+ * 2) rawBlocks (löscht alle Einträge unter Prefix ["rawBlocks"])
+ * 3) schema-update-pending (löscht alle Pending-Schemas)
+ * 4) expected (löscht alle in KV gespeicherten Expected-Schemas)
  */
-export async function resetApprovals(): Promise<void> {
-  // Pfad zu pending-approvals.json im Projekt
-  const approvalsFile = resolveProjectPath(
-    "api-tester",
-    "pending-approvals.json",
-  );
-
+export async function resetApprovalsKV(): Promise<void> {
   try {
-    // Datei einlesen und parsen
-    const raw = await Deno.readTextFile(approvalsFile);
-    const approvals = JSON.parse(raw) as Record<string, unknown>;
-
-    // Block-Cache beibehalten
-    const rawBlocks = approvals["__rawBlocks"] ?? {};
+    // 1) approvals komplett zurücksetzen
+    await kvInstance.set(["approvals"], {});
+    console.log("✅ Alle approvals in KV zurückgesetzt.");
 
-    // Neues Objekt erzeugen: __rawBlocks + alle Keys auf "waiting"
-    const newApprovals: Record<string, unknown> = { __rawBlocks: rawBlocks };
-    for (const key of Object.keys(approvals)) {
-      if (key === "__rawBlocks") continue;
-      newApprovals[key] = "waiting";
+    // 2) rawBlocks löschen (alle Einträge unter Prefix ["rawBlocks", key])
+    for await (const entry of kvInstance.list({ prefix: ["rawBlocks"] })) {
+      await kvInstance.delete(entry.key);
     }
+    console.log("✅ Alle rawBlocks in KV gelöscht.");
 
-    // Zurückschreiben
-    const out = JSON.stringify(newApprovals, null, 2);
-    await Deno.writeTextFile(approvalsFile, out);
+    // 3) Alle schema-update-pending Einträge löschen
+    for await (
+      const entry of kvInstance.list({ prefix: ["schema-update-pending"] })
+    ) {
+      await kvInstance.delete(entry.key);
+    }
+    console.log("✅ Alle pending-Schemas in KV gelöscht.");
 
-    console.log("🔄 Reset der bisherigen Freigaben (resetApprovals)");
-  } catch (_err) {
-    // Wenn die Datei fehlt oder nicht gelesen werden kann
-    console.warn(
-      "⚠️ pending-approvals.json nicht gefunden oder nicht lesbar – übersprungen.",
-    );
+    // 4) Alle erwarteten Schemas löschen (Prefix ["expected", key])
+    for await (const entry of kvInstance.list({ prefix: ["expected"] })) {
+      await kvInstance.delete(entry.key);
+    }
+    console.log("✅ Alle expected-Schemas in KV gelöscht.");
+  } catch (err: unknown) {
+    const msg = err instanceof Error ? err.message : String(err);
+    console.error(`❌ Konnte KV nicht vollständig zurücksetzen: ${msg}`);
   }
 }
diff --git a/src/api-tester/core/slack/debugStore.ts b/src/api-tester/core/slack/debugStore.ts
index 3a06c94..410bf43 100644
--- a/src/api-tester/core/slack/debugStore.ts
+++ b/src/api-tester/core/slack/debugStore.ts
@@ -1,6 +1,9 @@
 // src/api-tester/core/slack/debugStore.ts
 
-/** Einfache In-Memory-Liste für die letzten Slack-Events */
+/**
+ * Einfache In-Memory-Liste für die letzten Slack-Events.
+ * Zum Debuggen werden hier Typ, Timestamp und rohes Payload-Objekt abgelegt.
+ */
 export const slackDebugEvents: Array<{
   time: number;
   type: string;
diff --git a/src/api-tester/core/slack/getDisplayName.ts b/src/api-tester/core/slack/getDisplayName.ts
index d710fb3..77d8059 100644
--- a/src/api-tester/core/slack/getDisplayName.ts
+++ b/src/api-tester/core/slack/getDisplayName.ts
@@ -3,8 +3,8 @@
 /**
  * Holt den Display-Namen eines Slack-Users.
  * @param userId – Slack User-ID (z.B. U123ABC)
- * @param token – Slack Bot Token
- * @returns Anzeigename oder, falls nicht verfügbar, die User-ID
+ * @param token  – Slack Bot Token
+ * @returns      Anzeigename oder, falls nicht verfügbar, die User-ID
  */
 export async function getDisplayName(
   userId: string,
@@ -25,6 +25,14 @@ export async function getDisplayName(
       return userId;
     }
 
+    const contentType = resp.headers.get("content-type") || "";
+    if (!contentType.includes("application/json")) {
+      console.warn(
+        `⚠️ Slack API users.info lieferte keinen JSON-Response (content-type=${contentType})`,
+      );
+      return userId;
+    }
+
     const data = (await resp.json()) as {
       ok: boolean;
       user?: {
diff --git a/src/api-tester/core/slack/handlePinSubmission.ts b/src/api-tester/core/slack/handlePinSubmission.ts
index 922175a..a07e73f 100644
--- a/src/api-tester/core/slack/handlePinSubmission.ts
+++ b/src/api-tester/core/slack/handlePinSubmission.ts
@@ -1,10 +1,14 @@
 // src/api-tester/core/slack/handlePinSubmission.ts
 
 import axios from "https://esm.sh/axios@1.4.0";
-// ① korrekter Import der Kv-Instanz
 import { kvInstance } from "../kv.ts";
 import { getSlackWorkspaces } from "./slackWorkspaces.ts";
 import { getDisplayName } from "./getDisplayName.ts";
+import {
+  pushExpectedSchemaToGit,
+  type RepoInfo,
+  type SchemaUpdate,
+} from "../gitPush.ts";
 
 export interface SlackSubmissionPayload {
   view: {
@@ -19,100 +23,221 @@ export interface SlackSubmissionPayload {
   user: { id: string };
 }
 
+interface ParsedMetadata {
+  endpoint: string;
+  missing: string[];
+  extra: string[];
+  typeMismatches: Array<{ path: string; expected: string; actual: string }>;
+  original_ts: string;
+  channel: string;
+}
+
+interface SlackBlockRecord {
+  blocks: unknown[]; // ursprüngliche Blocks
+  ts?: string; // Slack-Timestamp (ts) der Nachricht (optional)
+}
+
 export async function handlePinSubmission(
   payload: SlackSubmissionPayload,
-): Promise<null> {
-  console.log("🔔 handlePinSubmission aufgerufen");
+): Promise<void> {
+  console.log("🔔 handlePinSubmission aufgerufen:", JSON.stringify(payload));
 
   // 1) PIN auslesen
   const pin = payload.view.state.values.pin_input.pin.value;
 
   // 2) private_metadata parsen
-  let meta: { endpoint: string; original_ts: string; channel: string };
+  let meta: ParsedMetadata;
   try {
     meta = JSON.parse(payload.view.private_metadata);
   } catch {
     console.error("❌ Konnte private_metadata nicht parsen");
-    return null;
+    return;
   }
-  const { endpoint, original_ts: originalTs, channel } = meta;
+  const {
+    endpoint,
+    missing: missingArr,
+    extra: extraArr,
+    typeMismatches: tmArr,
+    // original_ts verwendet man nicht direkt, daher Unterstrich
+    original_ts: _originalTs,
+    channel,
+  } = meta;
   const key = endpoint.replace(/\s+/g, "_");
 
   // 3) Workspace & Token ermitteln
   const ws = getSlackWorkspaces().find((w) => w.channel === channel);
   if (!ws) {
     console.error("🚨 Kein Workspace gefunden für Channel:", channel);
-    return null;
+    return;
   }
   const token = ws.token;
 
-  // 4) DisplayName holen
+  // 4) DisplayName holen (FALLBACK ist Slack-User-ID)
   let userName: string;
   try {
     userName = await getDisplayName(payload.user.id, token);
   } catch (e) {
     console.error("❌ Fehler bei getDisplayName:", e);
-    return null;
+    userName = `<@${payload.user.id}>`;
   }
 
   // 5) PIN prüfen
   const GLOBAL_PIN = Deno.env.get("SLACK_APPROVE_PIN") ?? "1234";
   if (pin !== GLOBAL_PIN) {
     console.warn("❌ Falsche PIN für", endpoint);
-    return null;
+    // Slack zeigt im Modal automatisch „Falscher PIN“ an, wenn wir keine Rückmeldung senden.
+    return;
   }
 
-  // 6) Approval-Status in KV speichern
+  // 6) Approval-Status in KV setzen
   try {
     const { value: storedApprovals } = await kvInstance.get<
       Record<string, string>
-    >(
-      ["approvals"],
-    );
+    >(["approvals"]);
     const approvals = storedApprovals ?? {};
     approvals[key] = "approved";
     await kvInstance.set(["approvals"], approvals);
-    console.log("✅ KV: approval status ‘approved’ für", key);
+    console.log("✅ KV: approval status 'approved' für", key);
   } catch (e) {
     console.error("❌ Fehler beim Speichern der Approvals in KV:", e);
+    return;
   }
 
-  // 7) Blocks aus KV lesen und Nachricht aktualisieren
-  console.log("🔧 Update Slack Nachricht für Endpoint:", endpoint);
+  // 7) Aus KV: pendingUpdates laden
+  let pendingForAll: SchemaUpdate[] = [];
   try {
-    const { value: storedBlocks } = await kvInstance.get<
-      Array<Record<string, unknown>>
-    >(["rawBlocks", key]);
-    const originalBlocks = storedBlocks ?? [];
-
-    // Decision-Buttons entfernen
-    const cleaned = originalBlocks.filter((b) =>
-      b.block_id !== "decision_buttons"
+    const { value: pendingValue } = await kvInstance.get<SchemaUpdate[]>([
+      "pendingUpdates",
+    ]);
+    pendingForAll = Array.isArray(pendingValue) ? pendingValue : [];
+  } catch (e) {
+    console.error("❌ Fehler beim Laden von pendingUpdates aus KV:", e);
+    pendingForAll = [];
+  }
+
+  // 8) Finde das passende SchemaUpdate fürs aktuelle key
+  const matching = pendingForAll.find((upd) => upd.key === key);
+  if (!matching) {
+    console.warn(
+      `⚠️ Kein Pending-Update gefunden für ${key}. Nichts zu committen.`,
     );
-    // letzten Divider entfernen
-    if (cleaned.length > 0 && cleaned.at(-1)?.type === "divider") cleaned.pop();
+  } else {
+    // 9) Schema-Update in Git pushen
+    try {
+      const owner = Deno.env.get("GITHUB_OWNER");
+      const repo = Deno.env.get("GITHUB_REPO");
+      const branch = Deno.env.get("GITHUB_BRANCH") ?? "main";
+      if (!owner || !repo) {
+        throw new Error(
+          "GITHUB_OWNER und GITHUB_REPO müssen in der Umgebung gesetzt sein.",
+        );
+      }
+      const repoInfo: RepoInfo = { owner, repo, branch };
+      await pushExpectedSchemaToGit(repoInfo, [matching]);
+      console.log(`✅ Schema für "${key}" in Git gepusht.`);
+    } catch (e) {
+      console.error("❌ Fehler beim Git-Push für", key, ":", e);
+      // Wir fahren trotzdem fort, damit Slack-Nachricht aktualisiert wird.
+    }
+
+    // 10) pendingUpdates in KV aktualisieren: Entferne den genehmigten Eintrag
+    try {
+      const newPending = pendingForAll.filter((upd) => upd.key !== key);
+      await kvInstance.set(["pendingUpdates"], newPending);
+      console.log(`✅ KV: pendingUpdates um "${key}" bereinigt.`);
+    } catch (e) {
+      console.error("❌ Fehler beim Bereinigen von pendingUpdates in KV:", e);
+    }
+  }
+
+  // 11) Slack-Nachricht updaten (Buttons entfernen, Detail- und Bestätigungs-Blocks anhängen)
+  try {
+    // a) Original-Blöcke + ts aus KV holen
+    const { value: stored } = await kvInstance.get<SlackBlockRecord>([
+      "rawBlocks",
+      key,
+    ]);
+    if (!stored) {
+      console.warn(`⚠️ rawBlocks für ${key} nicht gefunden.`);
+    }
+    const originalBlocks: unknown[] = Array.isArray(stored?.blocks)
+      ? stored.blocks
+      : [];
+    const postedTs = stored?.ts;
+    if (!postedTs) {
+      console.error(
+        `❌ Kein ts in rawBlocks für ${key}, cannot update Slack message.`,
+      );
+      return;
+    }
+
+    // b) Decision-Buttons entfernen (block_id = "decision_buttons_<key>")
+    const cleanedBlocks: unknown[] = [];
+    for (const block of originalBlocks) {
+      const maybeBlock = block as { block_id?: string };
+      if (maybeBlock.block_id === `decision_buttons_${key}`) {
+        continue;
+      }
+      cleanedBlocks.push(block);
+    }
 
-    // Bestätigungs-Abschnitt anhängen
-    const now = new Date().toLocaleTimeString("de-DE");
-    const newSection = [
+    // c) Bestätigungs-Abschnitt (Detail-Info + Zeitstempel + Freigegeben-Block)
+    const now = new Date();
+    const timeFormatted = now.toLocaleTimeString("de-DE");
+
+    // Detail-Lines zusammenstellen
+    const detailLines: string[] = [];
+    if (missingArr.length > 0) {
+      detailLines.push(`*❌ Fehlende Felder:* ${missingArr.join(", ")}`);
+    }
+    if (extraArr.length > 0) {
+      detailLines.push(`*➕ Neue Felder:* ${extraArr.join(", ")}`);
+    }
+    if (tmArr.length > 0) {
+      const tmLines = tmArr.map(
+        (m) =>
+          `• \`${m.path}\`: erwartet \`${m.expected}\`, erhalten \`${m.actual}\``,
+      );
+      detailLines.push(`*⚠️ Typabweichungen:*\n${tmLines.join("\n")}`);
+    }
+    if (detailLines.length === 0) {
+      detailLines.push("_Keine Detail-Infos verfügbar_");
+    }
+
+    const confirmationBlocks: unknown[] = [
       { type: "divider" },
       {
         type: "section",
-        text: { type: "mrkdwn", text: `_AKTUALISIERT_ • ${now}` },
+        text: {
+          type: "mrkdwn",
+          text: `*AKTUALISIERT* • ${timeFormatted}`,
+        },
       },
       {
         type: "section",
-        text: { type: "mrkdwn", text: `✅ *Freigegeben durch ${userName}*` },
+        text: {
+          type: "mrkdwn",
+          text: detailLines.join("\n"),
+        },
+      },
+      { type: "divider" },
+      {
+        type: "section",
+        text: {
+          type: "mrkdwn",
+          text: `✅ *Freigegeben durch ${userName}*`,
+        },
       },
     ];
-    const updatedBlocks = [...cleaned, ...newSection];
 
-    // Chat-Update
+    const updatedBlocks = [...cleanedBlocks, ...confirmationBlocks];
+
+    // d) Chat-Update ausführen
     const resp = await axios.post(
       "https://slack.com/api/chat.update",
       {
         channel,
-        ts: originalTs,
+        ts: postedTs,
         text: `✅ ${userName} hat *${endpoint}* freigegeben.`,
         blocks: updatedBlocks,
       },
@@ -125,22 +250,25 @@ export async function handlePinSubmission(
     );
     console.log("▶️ Slack API chat.update response:", resp.data);
 
-    // updatedBlocks zurück in KV
-    await kvInstance.set(["rawBlocks", key], updatedBlocks);
+    // e) aktualisierte Blöcke + ts bleiben in KV
+    await kvInstance.set(["rawBlocks", key], {
+      blocks: updatedBlocks,
+      ts: postedTs,
+    });
     console.log("✅ KV: rawBlocks updated für", key);
   } catch (e) {
     console.error("❌ Fehler beim Slack-Update:", e);
   }
 
-  // 8) Tests neu starten
-  const cmd = new Deno.Command(Deno.execPath(), {
-    args: ["run", "-A", "main.ts"],
-    cwd: Deno.cwd(),
-    env: { ...Deno.env.toObject(), SKIP_RESET_APPROVALS: "true" },
-  });
-  const child = cmd.spawn();
-  const status = await child.status;
-  console.log(`[api-tester] erneuter Durchlauf mit Exit-Code ${status.code}`);
-
-  return null;
+  // 12) Testlauf per HTTP-Aufruf triggern (anstatt Subprocess!)
+  try {
+    console.log("▶️ Trigger neuen Testlauf per HTTP-Fetch…");
+    // In ENV: RUN_TESTS_ENDPOINT=https://dein-projekt.deno.dev/api/run-tests
+    const runTestsUrl = Deno.env.get("RUN_TESTS_ENDPOINT") ??
+      `https://${Deno.env.get("DENO_DEPLOYMENT_ID")}.deno.dev/api/run-tests`;
+    await fetch(runTestsUrl, { method: "GET" });
+    console.log("✅ /api/run-tests angepingt.");
+  } catch (e) {
+    console.error("❌ Fehler beim Auslösen von /api/run-tests:", e);
+  }
 }
diff --git a/src/api-tester/core/slack/openPinModal.ts b/src/api-tester/core/slack/openPinModal.ts
index 7e767c0..07cf4b2 100644
--- a/src/api-tester/core/slack/openPinModal.ts
+++ b/src/api-tester/core/slack/openPinModal.ts
@@ -4,25 +4,12 @@ import { getSlackWorkspaces } from "./slackWorkspaces.ts";
 
 export interface OpenPinModalOptions {
   triggerId: string;
-  // jetzt JSON‐String mit endpointName, method, missing, extra, typeMismatches
-  endpoint: string;
-  messageTs: string;
-  channelId: string;
-}
-
-interface DiffPayload {
-  endpointName: string;
-  method: string;
-  missing: string[];
-  extra: string[];
-  typeMismatches: Array<{ path: string; expected: string; actual: string }>;
+  endpointJson: string; // JSON-String mit { endpointName, method, missing[], extra[], typeMismatches[], original_ts, channel }
 }
 
 export async function openPinModal({
   triggerId,
-  endpoint: payloadJson,
-  messageTs,
-  channelId,
+  endpointJson,
 }: OpenPinModalOptions): Promise<void> {
   try {
     // 1) Workspace holen
@@ -35,70 +22,38 @@ export async function openPinModal({
     }
     const ws = workspaces[0];
 
-    // 2) payload parsen
-    let payload: DiffPayload;
+    // 2) payload parsen (enthält endpointName, method, missing, extra, typeMismatches, original_ts, channel)
+    let payload: {
+      endpointName: string;
+      method: string;
+      missing: string[];
+      extra: string[];
+      typeMismatches: Array<{ path: string; expected: string; actual: string }>;
+      original_ts: string;
+      channel: string;
+    };
     try {
-      payload = JSON.parse(payloadJson);
+      payload = JSON.parse(endpointJson);
     } catch {
       console.error(
         "🚨 openPinModal: Ungültiges JSON im Button‐Value:",
-        payloadJson,
+        endpointJson,
       );
       return;
     }
 
-    // 3) private_metadata für das Modal
+    // 3) private_metadata für das Modal zusammenstellen (inkl. original_ts + channel)
     const privateMetadata = JSON.stringify({
       endpoint: payload.endpointName,
-      original_ts: messageTs,
-      channel: channelId,
+      method: payload.method,
+      missing: payload.missing,
+      extra: payload.extra,
+      typeMismatches: payload.typeMismatches,
+      original_ts: payload.original_ts,
+      channel: payload.channel,
     });
 
-    // 4) diff‐Blocks aufbauen
-    const diffBlocks = [];
-
-    if (payload.missing.length) {
-      diffBlocks.push({
-        type: "section",
-        text: {
-          type: "mrkdwn",
-          text: `*❌ Fehlende Felder (${payload.missing.length}):*\n• ` +
-            payload.missing.join("\n• "),
-        },
-      });
-    }
-    if (payload.extra.length) {
-      diffBlocks.push({
-        type: "section",
-        text: {
-          type: "mrkdwn",
-          text: `*➕ Neue Felder (${payload.extra.length}):*\n• ` +
-            payload.extra.join("\n• "),
-        },
-      });
-    }
-    if (payload.typeMismatches.length) {
-      diffBlocks.push({
-        type: "section",
-        text: {
-          type: "mrkdwn",
-          text: `*⚠️ Typabweichungen (${payload.typeMismatches.length}):*\n` +
-            payload.typeMismatches
-              .map((m) =>
-                `• ${m.path}: erwartet \`${m.expected}\`, erhalten \`${m.actual}\``
-              )
-              .join("\n"),
-        },
-      });
-    }
-    if (diffBlocks.length === 0) {
-      diffBlocks.push({
-        type: "section",
-        text: { type: "mrkdwn", text: "_Keine Abweichungen gefunden._" },
-      });
-    }
-
-    // 5) Modal definieren
+    // 4) Modal definieren
     const view = {
       type: "modal",
       callback_id: "pin_submission",
@@ -111,12 +66,41 @@ export async function openPinModal({
           type: "section",
           text: {
             type: "mrkdwn",
-            text: `*Endpoint:* ${payload.endpointName}\n` +
-              `*Methode:* \`${payload.method}\``,
+            text:
+              `*Endpoint:* ${payload.endpointName}\n*Methode:* \`${payload.method}\``,
           },
         },
         { type: "divider" },
-        ...diffBlocks,
+        {
+          type: "section",
+          text: {
+            type: "mrkdwn",
+            text: `*❌ Fehlende Felder (${payload.missing.length}):*\n• ${
+              payload.missing.join("\n• ")
+            }`,
+          },
+        },
+        {
+          type: "section",
+          text: {
+            type: "mrkdwn",
+            text: `*➕ Neue Felder (${payload.extra.length}):*\n• ${
+              payload.extra.join("\n• ")
+            }`,
+          },
+        },
+        {
+          type: "section",
+          text: {
+            type: "mrkdwn",
+            text: `*⚠️ Typabweichungen (${payload.typeMismatches.length}):*\n` +
+              payload.typeMismatches
+                .map((m) =>
+                  `• \`${m.path}\`: erwartet \`${m.expected}\`, erhalten \`${m.actual}\``
+                )
+                .join("\n"),
+          },
+        },
         { type: "divider" },
         {
           type: "input",
@@ -133,7 +117,7 @@ export async function openPinModal({
       ],
     };
 
-    // 6) Modal öffnen
+    // 5) Modal öffnen
     const resp = await fetch("https://slack.com/api/views.open", {
       method: "POST",
       headers: {
@@ -143,7 +127,6 @@ export async function openPinModal({
       body: JSON.stringify({ trigger_id: triggerId, view }),
     });
 
-    // 7) Debug‐Log
     const json = await resp.json();
     console.log("▶️ views.open response:", JSON.stringify(json, null, 2));
     if (!json.ok) {
diff --git a/src/api-tester/core/slack/slackReporter/renderHeaderBlock.ts b/src/api-tester/core/slack/slackReporter/renderHeaderBlock.ts
index b8567d6..0d14d55 100644
--- a/src/api-tester/core/slack/slackReporter/renderHeaderBlock.ts
+++ b/src/api-tester/core/slack/slackReporter/renderHeaderBlock.ts
@@ -1,27 +1,44 @@
 // src/api-tester/core/slack/slackReporter/renderHeaderBlock.ts
+
 export type Block = Record<string, unknown>;
 
+/**
+ * Rendert den Header des API-Testberichts.
+ *
+ * @param dateStr Optionales Datum im Format "DD.MM.YYYY".
+ *                Wenn nicht gesetzt, wird das heutige Datum ("de-DE") verwendet.
+ * @returns Array von Slack-Blocks für das Header-Segment.
+ */
 export function renderHeaderBlock(dateStr?: string): Block[] {
-  const formattedDate = dateStr || new Date().toLocaleDateString("de-DE");
-  // Hier holen wir uns die Deployment-ID (falls gesetzt) sonst "local"
+  const formattedDate = dateStr ?? new Date().toLocaleDateString("de-DE");
+  // Deployment-ID abrufen (in Deno Deploy gesetzt), ansonsten "local"
   const deploymentId = Deno.env.get("DENO_DEPLOYMENT_ID") ?? "local";
 
   return [
     {
       type: "header",
-      text: { type: "plain_text", text: "🔍 API Testbericht" },
+      text: {
+        type: "plain_text",
+        text: "🔍 API Testbericht",
+      },
     },
     {
       type: "context",
       elements: [
-        { type: "mrkdwn", text: `📅 Datum: *${formattedDate}*` },
+        {
+          type: "mrkdwn",
+          text: `📅 Datum: *${formattedDate}*`,
+        },
       ],
     },
     { type: "divider" },
     {
       type: "context",
       elements: [
-        { type: "mrkdwn", text: `_Deployment: ${deploymentId}_` },
+        {
+          type: "mrkdwn",
+          text: `_Deployment: ${deploymentId}_`,
+        },
       ],
     },
     { type: "divider" },
diff --git a/src/api-tester/core/slack/slackReporter/renderIssueBlocks.ts b/src/api-tester/core/slack/slackReporter/renderIssueBlocks.ts
index 163144e..32ed2db 100644
--- a/src/api-tester/core/slack/slackReporter/renderIssueBlocks.ts
+++ b/src/api-tester/core/slack/slackReporter/renderIssueBlocks.ts
@@ -1,39 +1,54 @@
 // src/api-tester/core/slack/slackReporter/renderIssueBlocks.ts
 
 import type { Block } from "./renderHeaderBlock.ts";
-import type { TestResult } from "../../apiCaller.ts";
 
-type Issue = Pick<
-  TestResult,
-  | "endpointName"
-  | "method"
-  | "missingFields"
-  | "extraFields"
-  | "typeMismatches"
-  | "isCritical"
-  | "expectedFile"
-  | "expectedMissing"
->;
+/**
+ * Liefert das Keycap-Emoji für jede Ziffer in n.
+ * Beispiel: 12 ⇒ "1️⃣2️⃣"
+ */
+function numberEmoji(n: number): string {
+  const digitMap: Record<string, string> = {
+    "0": "0️⃣",
+    "1": "1️⃣",
+    "2": "2️⃣",
+    "3": "3️⃣",
+    "4": "4️⃣",
+    "5": "5️⃣",
+    "6": "6️⃣",
+    "7": "7️⃣",
+    "8": "8️⃣",
+    "9": "9️⃣",
+  };
+  return n
+    .toString()
+    .split("")
+    .map((digit) => digitMap[digit] ?? digit)
+    .join("");
+}
+
+/**
+ * Ein einzelnes Issue, das gerendert wird.
+ */
+export interface Issue {
+  endpointName: string;
+  method: string;
+  missingFields: string[];
+  extraFields: string[];
+  typeMismatches: { path: string; expected: string; actual: string }[];
+  isCritical: boolean;
+  expectedMissing: boolean;
+  expectedFile?: string;
+}
 
+/**
+ * Erzeugt aus einer Liste von Issues die entsprechenden Slack-Blocks.
+ *
+ * @param issues Array von Issue-Objekten
+ * @returns Array von Slack Block Kit-Blöcken
+ */
 export function renderIssueBlocks(issues: Issue[]): Block[] {
   return issues.flatMap((issue, index) => {
-    // 1) Eigener Block für fehlende Expected-Datei
-    if (issue.expectedMissing) {
-      return [
-        {
-          type: "section",
-          text: {
-            type: "mrkdwn",
-            text: `*${
-              index + 1
-            }️⃣ ${issue.endpointName}* ❌ Erwartete Datei nicht gefunden:\n\`${issue.expectedFile}\``,
-          },
-        },
-        { type: "divider" },
-      ];
-    }
-
-    // 2) Struktur-Abweichungen
+    // Entferne .data oder data[0]. Prefixes
     const missing = issue.missingFields.map((m) =>
       m.replace(/^data(\[0\])?\./, "")
     );
@@ -44,83 +59,115 @@ export function renderIssueBlocks(issues: Issue[]): Block[] {
       (m) =>
         `• ${
           m.path.replace(/^data(\[0\])?\./, "")
-        }: erwartet ${m.expected}, erhalten ${m.actual}`,
+        }: erwartet \`${m.expected}\`, erhalten \`${m.actual}\``,
     );
-    const icon = issue.isCritical ? "🔴" : "🟠";
+
+    // Ermittlung des Icons: Rot, wenn fehlendes Schema oder kritisch; Orange, wenn Abweichungen; Weiß sonst
+    const icon = issue.expectedMissing || issue.isCritical
+      ? "🔴"
+      : (missing.length > 0 || extra.length > 0 || types.length > 0)
+      ? "🟠"
+      : "⚪️";
 
     const blocks: Block[] = [
       {
         type: "section",
         text: {
           type: "mrkdwn",
-          text: `*${
-            index + 1
-          }️⃣ ${issue.endpointName}* \`(${issue.method})\` ${icon}`,
+          text: `${
+            numberEmoji(index + 1)
+          } *${issue.endpointName}* \`(${issue.method})\` ${icon}`,
         },
       },
     ];
 
-    if (missing.length) {
-      blocks.push({
-        type: "context",
-        elements: [{
-          type: "mrkdwn",
-          text: `❌ Fehlende Felder: ${missing.join(", ")}`,
-        }],
-      });
-    }
-    if (extra.length) {
-      blocks.push({
-        type: "context",
-        elements: [{
-          type: "mrkdwn",
-          text: `➕ Neue Felder: ${extra.join(", ")}`,
-        }],
-      });
-    }
-    if (types.length) {
+    // Details ausgeben
+    if (issue.expectedMissing) {
       blocks.push({
         type: "context",
-        elements: [{
-          type: "mrkdwn",
-          text: `⚠️ *Typ-Abweichungen:*\n${types.join("\n")}`,
-        }],
+        elements: [
+          {
+            type: "mrkdwn",
+            text:
+              `❌ Erwartete Datei nicht gefunden: \`${issue.expectedFile}\``,
+          },
+        ],
       });
+    } else {
+      if (missing.length > 0) {
+        blocks.push({
+          type: "context",
+          elements: [
+            {
+              type: "mrkdwn",
+              text: `❌ Fehlende Felder: ${missing.join(", ")}`,
+            },
+          ],
+        });
+      }
+      if (extra.length > 0) {
+        blocks.push({
+          type: "context",
+          elements: [
+            {
+              type: "mrkdwn",
+              text: `➕ Neue Felder: ${extra.join(", ")}`,
+            },
+          ],
+        });
+      }
+      if (types.length > 0) {
+        blocks.push({
+          type: "context",
+          elements: [
+            {
+              type: "mrkdwn",
+              text: `⚠️ *Typabweichungen:*\n${types.join("\n")}`,
+            },
+          ],
+        });
+      }
     }
 
-    // Buttons nur bei echten Abweichungen oder kritischen Tests
+    // Divider
+    blocks.push({ type: "divider" });
+
+    // Wenn überhaupt Abweichungen vorliegen oder Schema fehlt, Buttons einfügen
     if (
+      issue.expectedMissing ||
       issue.isCritical ||
       missing.length > 0 ||
       extra.length > 0 ||
       types.length > 0
     ) {
       const key = issue.endpointName.replace(/\s+/g, "_");
-      blocks.push(
-        { type: "divider" },
-        {
-          type: "actions",
-          block_id: `decision_buttons_${key}`,
-          elements: [
-            {
-              type: "button",
-              text: { type: "plain_text", text: "✅ Einverstanden" },
-              style: "primary",
-              action_id: "open_pin_modal",
-              value: key,
-            },
-            {
-              type: "button",
-              text: { type: "plain_text", text: "⏸️ Warten" },
-              style: "danger",
-              action_id: "wait_action",
-              value: key,
-            },
-          ],
-        },
-        { type: "divider" },
-      );
-    } else {
+      const valuePayload = JSON.stringify({
+        endpointName: issue.endpointName,
+        method: issue.method,
+        missing: issue.missingFields,
+        extra: issue.extraFields,
+        typeMismatches: issue.typeMismatches,
+      });
+      blocks.push({
+        type: "actions",
+        block_id: `decision_buttons_${key}`,
+        elements: [
+          {
+            type: "button",
+            text: { type: "plain_text", text: "✅ Einverstanden" },
+            style: "primary",
+            action_id: "open_pin_modal",
+            value: valuePayload,
+          },
+          {
+            type: "button",
+            text: { type: "plain_text", text: "⏸️ Warten" },
+            style: "danger",
+            action_id: "wait_action",
+            value: key,
+          },
+        ],
+      });
       blocks.push({ type: "divider" });
     }
 
diff --git a/src/api-tester/core/slack/slackReporter/renderStatsBlock.ts b/src/api-tester/core/slack/slackReporter/renderStatsBlock.ts
index 626e346..6896edb 100644
--- a/src/api-tester/core/slack/slackReporter/renderStatsBlock.ts
+++ b/src/api-tester/core/slack/slackReporter/renderStatsBlock.ts
@@ -1,47 +1,51 @@
 // src/api-tester/core/slack/slackReporter/renderStatsBlock.ts
 
+import type { Block } from "./renderHeaderBlock.ts";
+
 /**
  * Generiert die Block Kit-Sektion für die Gesamtstatistik.
- * @param total – Gesamtanzahl der API-Calls
- * @param success – Anzahl erfolgreicher Calls
- * @param warnings – Anzahl mit Warnungen (zusätzliche oder fehlende Felder)
- * @param critical – Anzahl kritischer Fehler
- * @returns Ein Array von Slack Block Kit-Blöcken
+ *
+ * @param total    – Gesamtanzahl der API-Calls
+ * @param success  – Anzahl erfolgreicher Calls
+ * @param warnings – Anzahl mit Warnungen (fehlende/zusätzliche Felder)
+ * @param critical – Anzahl kritischer Fehler (Typabweichungen)
+ * @returns Ein Array von Slack Block Kit-Blöcken für die Statistik
  */
 export function renderStatsBlock(
   total: number,
   success: number,
   warnings: number,
   critical: number,
-): unknown[] {
+): Block[] {
+  // Status-Emoji: Rot, wenn kritische Fehler > 0; Orange, wenn Warnungen > 0; sonst Grün
   const statusEmoji = critical > 0 ? "🔴" : warnings > 0 ? "🟠" : "🟢";
 
   return [
     {
-      type: "section" as const,
+      type: "section",
       text: {
-        type: "mrkdwn" as const,
+        type: "mrkdwn",
         text: `📊 *Gesamtstatistik:* ${total} API-Calls`,
       },
     },
     {
-      type: "section" as const,
+      type: "section",
       text: {
-        type: "mrkdwn" as const,
+        type: "mrkdwn",
         text: `🔹 🟢 *Erfolgreich:* ${success}\n` +
           `🔹 🟠 *Achtung:* ${warnings}\n` +
           `🔹 🔴 *Kritisch:* ${critical}`,
       },
     },
     {
-      type: "section" as const,
+      type: "section",
       text: {
-        type: "mrkdwn" as const,
+        type: "mrkdwn",
         text: `📢 *Status:* ${statusEmoji}`,
       },
     },
     {
-      type: "divider" as const,
+      type: "divider",
     },
   ];
 }
diff --git a/src/api-tester/core/slack/slackReporter/renderVersionBlocks.ts b/src/api-tester/core/slack/slackReporter/renderVersionBlocks.ts
index 46b0852..28c9e57 100644
--- a/src/api-tester/core/slack/slackReporter/renderVersionBlocks.ts
+++ b/src/api-tester/core/slack/slackReporter/renderVersionBlocks.ts
@@ -1,27 +1,43 @@
 // src/api-tester/core/slack/slackReporter/renderVersionBlocks.ts
+
 import type { Block } from "./renderHeaderBlock.ts";
+import type { VersionUpdate } from "../../endpointRunner.ts";
 
+/**
+ * Rendert einen Abschnitt für jede erkannte neue API-Version.
+ * Bei mehreren Updates zeigt es eine Überschrift, dann pro Update einen Eintrag,
+ * und schließt mit einem Divider ab.
+ *
+ * @param versionUpdates Liste von VersionUpdate-Objekten
+ * @returns Array von Slack-Blocks für die Version-Informationen
+ */
 export function renderVersionBlocks(
-  versionUpdates: { name: string; url: string }[],
+  versionUpdates: VersionUpdate[],
 ): Block[] {
-  if (versionUpdates.length === 0) return [];
-  return [
-    {
-      type: "section",
-      text: {
-        type: "mrkdwn",
-        text: "🚀 *Automatisch erkannte neue API-Versionen:*",
-      },
+  if (versionUpdates.length === 0) {
+    return [];
+  }
+
+  // Header mit kurzer Erläuterung
+  const header: Block = {
+    type: "section",
+    text: {
+      type: "mrkdwn",
+      text: "🚀 *Automatisch erkannte neue API-Versionen:*",
+    },
+  };
+
+  // Für jedes Update ein eigener Section-Block
+  const sections: Block[] = versionUpdates.map((update) => ({
+    type: "section",
+    text: {
+      type: "mrkdwn",
+      text: `🔄 *${update.name}*\n🔗 <${update.url}>`,
     },
-    ...versionUpdates.flatMap((update) => [
-      {
-        type: "section",
-        text: {
-          type: "mrkdwn",
-          text: `🔄 *${update.name}*\n🔗 <${update.url}>`,
-        },
-      },
-    ]),
-    { type: "divider" },
-  ];
+  }));
+
+  // Abschließender Divider, um optisch abzugrenzen
+  const divider: Block = { type: "divider" };
+
+  return [header, ...sections, divider];
 }
diff --git a/src/api-tester/core/slack/slackReporter/sendSlackReport.ts b/src/api-tester/core/slack/slackReporter/sendSlackReport.ts
index a85dde1..80d707c 100644
--- a/src/api-tester/core/slack/slackReporter/sendSlackReport.ts
+++ b/src/api-tester/core/slack/slackReporter/sendSlackReport.ts
@@ -1,109 +1,293 @@
-// src/api-tester/core/slack/slackReporter/sendSlackReport.ts
+// src/api-tester/core/slack/sendSlackReport.ts
 
 import axios from "https://esm.sh/axios@1.4.0";
 import { kvInstance } from "../../kv.ts";
 import { getSlackWorkspaces } from "../slackWorkspaces.ts";
+import type { Block } from "./renderHeaderBlock.ts";
 import { renderHeaderBlock } from "./renderHeaderBlock.ts";
 import { renderVersionBlocks } from "./renderVersionBlocks.ts";
-import { renderIssueBlocks } from "./renderIssueBlocks.ts";
 import { renderStatsBlock } from "./renderStatsBlock.ts";
 import type { TestResult } from "../../apiCaller.ts";
+import type { VersionUpdate } from "../../endpointRunner.ts";
 
-export interface VersionUpdate {
-  name: string;
-  url: string;
-  expectedStructure?: string;
+const MAX_BLOCKS_PER_MESSAGE = 50;
+
+/**
+ * Liefert für jede Ziffer von n das entsprechende Keycap-Emoji.
+ */
+function numberEmoji(n: number): string {
+  const digitMap: Record<string, string> = {
+    "0": "0️⃣",
+    "1": "1️⃣",
+    "2": "2️⃣",
+    "3": "3️⃣",
+    "4": "4️⃣",
+    "5": "5️⃣",
+    "6": "6️⃣",
+    "7": "7️⃣",
+    "8": "8️⃣",
+    "9": "9️⃣",
+  };
+  return n
+    .toString()
+    .split("")
+    .map((digit) => digitMap[digit] ?? digit)
+    .join("");
+}
+
+/** Teilt ein Array in Chunks der Länge `size` */
+function chunkArray<T>(array: T[], size: number): T[][] {
+  const chunks: T[][] = [];
+  for (let i = 0; i < array.length; i += size) {
+    chunks.push(array.slice(i, i + size));
+  }
+  return chunks;
 }
 
 /**
- * Sendet immer den echten Report an Slack (kein Dry-Run mehr).
+ * Sendet den Slack-Testbericht. Wenn `approver` gesetzt ist, wird
+ * ein zusätzlicher Hinweisblock ("Freigegeben von @user") eingefügt.
+ *
+ * Dabei speichern wir für jeden Issue-Block gleichzeitig den Slack‐Timestamp (ts) in KV,
+ * damit wir später über `chat.update` genau wissen, welche Nachricht wir updaten müssen.
  */
 export async function sendSlackReport(
   testResults: TestResult[],
   versionUpdates: VersionUpdate[] = [],
+  approver?: string,
 ): Promise<void> {
-  const workspaces = getSlackWorkspaces();
-
-  // Statistik
-  const total = testResults.length;
-  const success = testResults.filter((r) => r.success).length;
-  const warnings = testResults.filter(
-    (r) =>
-      !r.success &&
-      !r.isCritical &&
-      r.expectedMissing !== true,
-  ).length;
-  const criticals = testResults.filter((r) => r.isCritical).length;
-
-  // Failing = echte Diff-Issues oder fehlende Datei
-  const failing = testResults.filter((r) =>
-    r.expectedMissing === true ||
+  // 1) Alle Ergebnisse mit Schema-Issues sammeln
+  const allIssues = testResults.filter((r) =>
+    r.expectedMissing ||
     r.missingFields.length > 0 ||
     r.extraFields.length > 0 ||
-    (r.typeMismatches.length > 0) ||
-    r.isCritical
+    r.typeMismatches.length > 0
   );
 
-  // Blocks bauen
-  const header = renderHeaderBlock(new Date().toLocaleDateString("de-DE"));
-  const versions = versionUpdates.length > 0
-    ? renderVersionBlocks(versionUpdates)
-    : [];
-  const issues = failing.flatMap((res) => {
-    const suffix = res.endpointName.replace(/\s+/g, "_");
-    return renderIssueBlocks([res]).map((blk) => {
-      const b = { ...blk } as Record<string, unknown>;
-      if (typeof b.block_id === "string") {
-        b.block_id = `${b.block_id}_${suffix}`;
-      }
-      return b;
-    });
+  // 2) Approval-Status aus KV laden
+  const { value: approvalsValue } = await kvInstance.get<
+    Record<string, string>
+  >(
+    ["approvals"],
+  );
+  const approvals = approvalsValue ?? {};
+
+  // 3) Nur die mit Status "pending" oder noch nicht gesetzt
+  const pendingIssues = allIssues.filter((r) => {
+    const key = r.endpointName.replace(/\s+/g, "_");
+    return approvals[key] === undefined || approvals[key] === "pending";
   });
-  const stats = renderStatsBlock(total, success, warnings, criticals);
-  const blocks = [...header, ...versions, ...issues, ...stats];
-
-  // Raw-Blocks & Approvals in KV
-  {
-    const { value: existing } = await kvInstance.get<Record<string, string>>([
-      "approvals",
-    ]);
-    const approvals = existing ?? {};
-    for (const res of failing) {
-      const key = res.endpointName.replace(/\s+/g, "_");
-      const raw = renderIssueBlocks([res]);
-      await kvInstance.set(["rawBlocks", key], raw);
-      approvals[key] = "pending";
-    }
-    await kvInstance.set(["approvals"], approvals);
+
+  // 4) Header-, Versions- und Statistik-Blöcke vorbereiten
+  const headerBlocks = renderHeaderBlock(
+    new Date().toLocaleDateString("de-DE"),
+  ) as Block[];
+
+  // Wenn ein Approver übergeben wurde, füge Kontext-Block hinzu
+  if (approver) {
+    headerBlocks.push({
+      type: "context",
+      elements: [
+        {
+          type: "mrkdwn",
+          text: `*Freigegeben von:* <!subteam^${approver}>`,
+        },
+      ],
+    });
   }
 
-  // Nachricht an Slack senden
-  for (const { token, channel } of workspaces) {
-    const payload = blocks.length > 50
-      ? {
+  const versionBlocks =
+    (versionUpdates.length > 0
+      ? renderVersionBlocks(versionUpdates)
+      : []) as Block[];
+
+  const statsBlocks = renderStatsBlock(
+    testResults.length,
+    testResults.length - allIssues.length,
+    0,
+    allIssues.length,
+  ) as Block[];
+
+  // → Keine offenen Issues? Dann Nur-Statistik senden
+  if (pendingIssues.length === 0) {
+    for (const { token, channel } of getSlackWorkspaces()) {
+      const blocks: Block[] = [
+        ...headerBlocks,
+        ...versionBlocks,
+        ...statsBlocks,
+      ];
+      await axios.post("https://slack.com/api/chat.postMessage", {
         channel,
-        text: `API Testbericht: ${
-          warnings + criticals
-        } Abweichungen (insgesamt ${total}).`,
+        text: "API Testbericht – keine neuen Schema-Abweichungen",
+        blocks,
+      }, {
+        headers: {
+          Authorization: `Bearer ${token}`,
+          "Content-Type": "application/json",
+        },
+      });
+    }
+    console.log("📩 Slack-Report (keine pending-Issues) abgeschlossen.");
+    return;
+  }
+
+  // 5) Für jede offene Issue bauen wir Slack-Blöcke und posten sie einzeln mit 'chat.postMessage'.
+  //    Wir merken uns das zurückgelieferte `ts` pro Schlüssel (key), damit wir später ein `chat.update` auf genau diese Nachricht machen können.
+  for (const { token, channel } of getSlackWorkspaces()) {
+    // Wir schicken alles in nur einem Post, aber speichern dennoch pro Issue den ts
+    const allBodyBlocks: Block[] = [];
+    const rawBlocksMap = new Map<string, Block[]>();
+
+    pendingIssues.forEach((r, idx) => {
+      const key = r.endpointName.replace(/\s+/g, "_");
+      const blocks: Block[] = [];
+
+      // A) Section mit durchnummeriertem Emoji
+      const icon = r.expectedMissing || r.missingFields.length > 0
+        ? "🔴"
+        : (r.extraFields.length > 0 || r.typeMismatches.length > 0)
+        ? "🟠"
+        : "⚪️";
+
+      blocks.push({
+        type: "section",
+        text: {
+          type: "mrkdwn",
+          text: `${numberEmoji(idx + 1)} *${r.endpointName}* ${icon}`,
+        },
+      });
+
+      // B) Kontext-Details
+      if (r.expectedMissing) {
+        blocks.push({
+          type: "context",
+          elements: [{
+            type: "mrkdwn",
+            text: `❌ Erwartetes Schema *${r.expectedFile}* fehlt.`,
+          }],
+        });
+      } else {
+        if (r.missingFields.length > 0) {
+          const missing = r.missingFields
+            .map((m) => m.replace(/^data(\[0\])?\./, ""))
+            .join(", ");
+          blocks.push({
+            type: "context",
+            elements: [{
+              type: "mrkdwn",
+              text: `❌ Fehlende Felder: ${missing}`,
+            }],
+          });
+        }
+        if (r.extraFields.length > 0) {
+          const extra = r.extraFields
+            .map((e) => e.replace(/^data(\[0\])?\./, ""))
+            .join(", ");
+          blocks.push({
+            type: "context",
+            elements: [{
+              type: "mrkdwn",
+              text: `➕ Neue Felder: ${extra}`,
+            }],
+          });
+        }
+        if (r.typeMismatches.length > 0) {
+          const types = r.typeMismatches
+            .map((tm) =>
+              `• ${
+                tm.path.replace(/^data(\[0\])?\./, "")
+              }: erwartet \`${tm.expected}\`, erhalten \`${tm.actual}\``
+            )
+            .join("\n");
+          blocks.push({
+            type: "context",
+            elements: [{
+              type: "mrkdwn",
+              text: `⚠️ *Typabweichungen:*\n${types}`,
+            }],
+          });
+        }
       }
-      : { channel, text: "API Testbericht", blocks };
 
-    try {
-      const resp = await axios.post(
-        "https://slack.com/api/chat.postMessage",
-        payload,
-        {
-          headers: {
-            Authorization: `Bearer ${token}`,
-            "Content-Type": "application/json",
+      // C) Divider + Action-Buttons (mit echtem `ts` im Payload) + Divider
+      blocks.push({ type: "divider" });
+      blocks.push({
+        type: "actions",
+        block_id: `decision_buttons_${key}`,
+        elements: [
+          {
+            type: "button",
+            text: { type: "plain_text", text: "✅ Einverstanden" },
+            style: "primary",
+            action_id: "open_pin_modal",
+            value: JSON.stringify({
+              endpointName: r.endpointName,
+              method: r.method,
+              missing: r.missingFields,
+              extra: r.extraFields,
+              typeMismatches: r.typeMismatches,
+              // Die ts setzen wir erst, sobald wir hier tatsächlich posten
+            }),
+          },
+          {
+            type: "button",
+            text: { type: "plain_text", text: "⏸️ Warten" },
+            style: "danger",
+            action_id: "wait_action",
+            value: key,
           },
+        ],
+      });
+      blocks.push({ type: "divider" });
+
+      allBodyBlocks.push(...blocks);
+      rawBlocksMap.set(key, blocks);
+    });
+
+    // 6) Pagination: Wir schaﬀen Seiten von Blöcken, damit Slack nicht die 50‐Block‐Grenze überschreitet
+    const headerCount = headerBlocks.length + versionBlocks.length;
+    const footerCount = statsBlocks.length;
+    const maxPerPage = Math.max(
+      1,
+      MAX_BLOCKS_PER_MESSAGE - headerCount - footerCount,
+    );
+    const pages = chunkArray(allBodyBlocks, maxPerPage);
+
+    // 7) Pro Seite → eine `chat.postMessage` ausführen und das `ts` abspeichern
+    for (let i = 0; i < pages.length; i++) {
+      const blocks: Block[] = [
+        ...(i === 0 ? headerBlocks : []),
+        ...(i === 0 ? versionBlocks : []),
+        ...pages[i],
+        ...(i === pages.length - 1 ? statsBlocks : []),
+      ];
+
+      // 7a) Nachricht senden
+      const resp = await axios.post("https://slack.com/api/chat.postMessage", {
+        channel,
+        text: `API Testbericht – Seite ${i + 1}/${pages.length}`,
+        blocks,
+      }, {
+        headers: {
+          Authorization: `Bearer ${token}`,
+          "Content-Type": "application/json",
         },
-      );
-      console.log("▶️ Slack API chat.postMessage response:", resp.data);
-    } catch (err) {
-      console.error("❌ Fehler beim Senden an Slack:", err);
+      });
+
+      const postedTs = resp.data.ts as string;
+      console.log(`▶️ Beitrag gesendet, ts=${postedTs}`);
+
+      // 7b) Speichere für jedes Issue desselben Blocks den `ts` unter rawBlocks:<key>
+      //     → rawBlocksMap hat für jeden `key` genau die Blöcke, aber wir tragen den gemeinsam geposteten `ts` mit ein.
+      for (const [key, blks] of rawBlocksMap) {
+        // Speichern eines Objektes { blocks, ts } statt nur blocks
+        await kvInstance.set(["rawBlocks", key], {
+          blocks: blks,
+          ts: postedTs,
+        });
+      }
     }
   }
 
-  console.log("📩 Slack-Testbericht abgeschlossen.");
+  console.log("📩 Slack-Report (pending-Issues) abgeschlossen.");
 }
diff --git a/src/api-tester/core/slack/slackWorkspaces.ts b/src/api-tester/core/slack/slackWorkspaces.ts
index c466a47..53dfaa5 100644
--- a/src/api-tester/core/slack/slackWorkspaces.ts
+++ b/src/api-tester/core/slack/slackWorkspaces.ts
@@ -1,29 +1,43 @@
+// src/api-tester/core/slack/slackWorkspaces.ts
+
 /**
- * Reads all configured Slack workspaces from environment variables.
- * Supports any number of:
+ * Liest alle konfigurierten Slack-Workspaces aus den ENV-Variablen aus.
+ * Unterstützt beliebig viele Tupel:
  *   SLACK_BOT_TOKEN_1, SLACK_CHANNEL_ID_1, SLACK_SIGNING_SECRET_1
  *   SLACK_BOT_TOKEN_2, SLACK_CHANNEL_ID_2, SLACK_SIGNING_SECRET_2
  *   …
+ *
+ * Gibt ein Array von Objekten zurück, die jeweils enthalten:
+ *   - token: Slack-Bot-Token
+ *   - channel: Slack-Channel-ID
+ *   - signingSecret: Signing-Secret (kann leer sein, dann wird Validation ggf. übersprungen)
  */
 export function getSlackWorkspaces(): Array<{
   token: string;
   channel: string;
   signingSecret: string;
 }> {
-  const workspaces = [];
+  const workspaces: Array<{
+    token: string;
+    channel: string;
+    signingSecret: string;
+  }> = [];
   let i = 1;
 
-  // Loop until we no longer find a full token+channel pair
+  // Schleife, bis kein vollständiges Token+Channel-Paar mehr gefunden wird
   while (true) {
     const token = Deno.env.get(`SLACK_BOT_TOKEN_${i}`);
     const channel = Deno.env.get(`SLACK_CHANNEL_ID_${i}`);
     if (!token || !channel) break;
 
-    workspaces.push({
-      token,
-      channel,
-      signingSecret: Deno.env.get(`SLACK_SIGNING_SECRET_${i}`) ?? "",
-    });
+    const signingSecret = Deno.env.get(`SLACK_SIGNING_SECRET_${i}`) ?? "";
+    if (!signingSecret) {
+      console.warn(
+        `⚠️ SLACK_SIGNING_SECRET_${i} fehlt – Signature-Validation für diesen Workspace wird ggf. fehlschlagen.`,
+      );
+    }
+
+    workspaces.push({ token, channel, signingSecret });
     i++;
   }
 
diff --git a/src/api-tester/core/slack/validateSignature.ts b/src/api-tester/core/slack/validateSignature.ts
index f9b52f0..d09684a 100644
--- a/src/api-tester/core/slack/validateSignature.ts
+++ b/src/api-tester/core/slack/validateSignature.ts
@@ -20,7 +20,6 @@ export async function validateSignature(
     console.error("🚨 Missing Slack signature headers");
     return false;
   }
-  // ... der Rest bleibt unverändert
   const fiveMin = 60 * 5;
   const now = Math.floor(Date.now() / 1000);
   if (Math.abs(now - Number(timestamp)) > fiveMin) {
diff --git a/src/api-tester/core/structureAnalyzer.ts b/src/api-tester/core/structureAnalyzer.ts
index 13aee91..4ebe783 100644
--- a/src/api-tester/core/structureAnalyzer.ts
+++ b/src/api-tester/core/structureAnalyzer.ts
@@ -6,91 +6,164 @@ import { kvInstance } from "./kv.ts";
 import type { Diff, Schema } from "./types.ts";
 
 /**
- * Konvertiert verschachtelte API-Antwort in ein abstraktes Typmodell.
- * (Strings → "string", Zahlen → 0 usw.)
+ * Wandelt JSON-Werte in ein abstraktes Schema um.
+ * - Strings werden zu "string"
+ * - Zahlen zu 0
+ * - Arrays werden auf ihr erstes Element abgebildet (rekursiv)
+ * - Objekte werden rekursiv transformiert
+ * - Andere Werte (boolean, null) bleiben unverändert
  */
 export function transformValues(value: unknown): unknown {
-  if (typeof value === "string") return "string";
-  if (typeof value === "number") return 0;
-  if (Array.isArray(value)) return value.map(transformValues);
+  if (typeof value === "string") {
+    return "string";
+  }
+  if (typeof value === "number") {
+    return 0;
+  }
+  if (Array.isArray(value)) {
+    return value.length > 0 ? [transformValues(value[0])] : [];
+  }
   if (value !== null && typeof value === "object") {
-    const result: Record<string, unknown> = {};
-    for (const key in value as Record<string, unknown>) {
-      result[key] = transformValues((value as Record<string, unknown>)[key]);
+    const out: Record<string, unknown> = {};
+    for (const [k, v] of Object.entries(value as Record<string, unknown>)) {
+      out[k] = transformValues(v);
     }
-    return result;
+    return out;
   }
   return value;
 }
 
 /**
- * Lädt das erwartete Schema zunächst aus Deno KV,
- * falls vorhanden, sonst aus dem Dateisystem.
+ * Lädt das erwartete Schema entweder aus KV oder aus dem Dateisystem.
+ * @param key     Eindeutiger Key, typischerweise der Endpoint-Name (ohne Leerzeichen)
+ * @param fsPath  Pfad zur Schema-Datei im Dateisystem
+ * @returns       Das geladene Schema (JSON-Objekt)
+ * @throws        Error, wenn weder in KV noch als Datei gefunden
  */
 export async function loadExpectedSchema(
   key: string,
   fsPath: string,
 ): Promise<Schema> {
-  // 1) Versuch aus KV
-  const entry = await kvInstance.get<Schema>(["expected", key]);
-  if (entry.value) {
-    return entry.value;
+  // 1) Versuch: aus KV laden
+  try {
+    const { value } = await kvInstance.get<Schema>(["expected", key]);
+    if (value) {
+      console.debug(`🔍 Erwartetes Schema für "${key}" aus KV geladen.`);
+      return value;
+    }
+  } catch {
+    // KV-Fehler ignorieren und weitermachen
   }
 
-  // 2) Fallback auf FS
+  // 2) Versuch: aus Dateisystem laden
   if (existsSync(fsPath)) {
-    const raw = await Deno.readTextFile(fsPath);
-    return JSON.parse(raw) as Schema;
+    try {
+      const raw = await Deno.readTextFile(fsPath);
+      const parsed = JSON.parse(raw) as Schema;
+      console.debug(
+        `🔍 Erwartetes Schema für "${key}" aus Datei "${fsPath}" geladen.`,
+      );
+      return parsed;
+    } catch (err) {
+      throw new Error(`Fehler beim Parsen des Schemas "${fsPath}": ${err}`);
+    }
   }
 
-  throw new Error(`Erwartetes Schema nicht gefunden (KV & FS): ${key}`);
+  // 3) Wenn beides fehlgeschlagen ist, werfen
+  throw new Error(`Schema nicht gefunden: ${key} (Pfad: ${fsPath})`);
 }
 
 /**
- * Speichert das aktualisierte Schema zuerst ins Dateisystem.
- * Bei Schreibfehlern (z.B. readonly Deploy) schreibt es in KV.
+ * Speichert das aktualisierte Schema entweder ins Dateisystem oder (bei Fehlern) in KV.
+ * @param key     Eindeutiger Key (Endpoint-Name)
+ * @param fsPath  Pfad zur Schema-Datei im Dateisystem
+ * @param schema  Das zu speichernde Schema-Objekt
  */
 export async function saveUpdatedSchema(
   key: string,
   fsPath: string,
   schema: Schema,
 ): Promise<void> {
+  const serialized = JSON.stringify(schema, null, 2) + "\n";
   try {
-    await Deno.writeTextFile(fsPath, JSON.stringify(schema, null, 2));
-  } catch (err) {
-    console.warn(
-      `⚠️ FS-Schreibfehler bei ${fsPath}: ${err}. Fallback auf KV.`,
+    // Versuch: direkt ins Dateisystem schreiben
+    await Deno.writeTextFile(fsPath, serialized);
+    console.log(
+      `✅ Aktualisiertes Schema für "${key}" in Datei "${fsPath}" gespeichert.`,
     );
-    await kvInstance.set(["expected", key], schema);
+  } catch (err) {
+    // Wenn Datei-Schreibfehler, dann in KV speichern
+    try {
+      await kvInstance.set(["expected", key], schema);
+      console.warn(
+        `⚠️ Konnte Schema "${fsPath}" nicht schreiben (Error: ${err}). In KV zwischengespeichert.`,
+      );
+    } catch (kvErr) {
+      console.error(
+        `❌ Konnte Schema weder in Datei "${fsPath}" noch in KV speichern: ${kvErr}`,
+      );
+    }
   }
 }
 
 /**
- * Vergleicht die tatsächliche API-Antwort mit dem erwarteten Schema.
- * Wenn Unterschiede gefunden werden, speichert es das neue Schema (FS oder KV).
- * Gibt alle Diffs plus das generierte `updatedSchema` zurück.
+ * Vergleicht die tatsächliche Antwort (actualResponse) mit dem erwarteten Schema und
+ * entscheidet, ob ein Schema-Update (pending oder direkt gespeichert) notwendig ist.
+ *
+ * - Lädt erwartetes Schema über loadExpectedSchema()
+ * - Transformiert actualResponse nach transformValues()
+ * - Vergleicht Strukturen via compareStructures()
+ * - Wenn missingFields oder extraFields > 0 → speichert actualSchema unter "schema-update-pending"
+ * - Wenn nur typeMismatches vorhanden, speichert direkt via saveUpdatedSchema()
+ *
+ * @param key             Eindeutiger Key (Endpoint-Name ohne Leerzeichen)
+ * @param fsPath          Pfad zur erwarteten Schema-Datei
+ * @param actualResponse  Der rohe JSON-Body der API-Antwort
+ * @returns               Objekt mit missingFields, extraFields, typeMismatches und updatedSchema
  */
 export async function analyzeResponse(
   key: string,
   fsPath: string,
   actualResponse: unknown,
-): Promise<Diff> {
-  const expected = await loadExpectedSchema(key, fsPath);
+): Promise<Diff & { filename?: string }> {
+  // 1) Erwartetes Schema laden
+  const expectedSchema = await loadExpectedSchema(key, fsPath);
+
+  // 2) Tatsächliche Antwort in ein Schema transformieren
+  const actualSchema = transformValues(actualResponse) as Schema;
+
+  // 3) Strukturen vergleichen
   const { missingFields, extraFields, typeMismatches } = compareStructures(
-    expected,
-    actualResponse,
+    expectedSchema,
+    actualSchema,
   );
 
-  // Neues Schema komplett basierend auf der aktuellen Antwort
-  const updatedSchema = transformValues(actualResponse) as Schema;
-
-  if (
-    missingFields.length > 0 ||
-    extraFields.length > 0 ||
-    typeMismatches.length > 0
-  ) {
-    await saveUpdatedSchema(key, fsPath, updatedSchema);
+  // 4) Wenn Felder fehlen oder zusätzlich sind, in KV als Pending markieren
+  if (missingFields.length > 0 || extraFields.length > 0) {
+    try {
+      await kvInstance.set(["schema-update-pending", key], actualSchema);
+      console.warn(
+        `🕒 Schema-Drift für "${key}" erkannt: ` +
+          `${missingFields.length} fehlende, ${extraFields.length} neue Felder.`,
+      );
+    } catch (err) {
+      console.error(
+        `❌ Konnte Pending-Schema unter ["schema-update-pending","${key}"] nicht speichern: ${err}`,
+      );
+    }
+  } // 5) Wenn nur Typ-Abweichungen vorliegen, direkt ins Dateisystem / KV schreiben
+  else if (typeMismatches.length > 0) {
+    console.warn(
+      `⚠️ Nur Typabweichungen für "${key}" (${typeMismatches.length}): Speichere aktualisiertes Schema.`,
+    );
+    await saveUpdatedSchema(key, fsPath, actualSchema);
   }
 
-  return { missingFields, extraFields, typeMismatches, updatedSchema };
+  // 6) Ergebnis zurückgeben
+  return {
+    missingFields,
+    extraFields,
+    typeMismatches,
+    updatedSchema: actualSchema,
+  };
 }
diff --git a/src/api-tester/core/testKv.ts b/src/api-tester/core/testKv.ts
index ffbf469..31328a1 100644
--- a/src/api-tester/core/testKv.ts
+++ b/src/api-tester/core/testKv.ts
@@ -2,22 +2,40 @@
 
 import { kvInstance as kv } from "./kv.ts";
 
-export async function testKv() {
+/**
+ * Führt einen einfachen Test für das Deno-KV-System durch:
+ * 1) Speichert einen Testwert unter dem Key ["test", "key"].
+ * 2) Liest den Wert anschließend wieder aus und loggt ihn.
+ */
+export async function testKv(): Promise<void> {
   const key = ["test", "key"] as const;
   const value = "testValue";
 
-  // Speichern
-  await kv.set(key, value);
-  console.log(`✅ Testwert gespeichert: ${key.join(".")} = ${value}`);
+  try {
+    // 1) Speichern
+    await kv.set(key, value);
+    console.log(`✅ Testwert gespeichert: ${key.join(".")} = "${value}"`);
+  } catch (err) {
+    console.error(`❌ Fehler beim Speichern von ${key.join(".")}:`, err);
+    return;
+  }
 
-  // Auslesen
-  const entry = await kv.get<string>(key);
-  console.log(
-    `✅ Testwert abgerufen: ${key.join(".")} = ${entry.value ?? entry}`,
-  );
+  try {
+    // 2) Auslesen
+    const entry = await kv.get<string>(key);
+    if (entry.value === undefined) {
+      console.warn(`⚠️ Kein Eintrag gefunden unter ${key.join(".")}`);
+    } else {
+      console.log(
+        `✅ Testwert abgerufen: ${key.join(".")} = "${entry.value}"`,
+      );
+    }
+  } catch (err) {
+    console.error(`❌ Fehler beim Auslesen von ${key.join(".")}:`, err);
+  }
 }
 
-// Direkt ausführen, wenn Datei per `deno run` geladen wird
+// Direkt ausführen, wenn diese Datei per `deno run` geladen wird
 if (import.meta.main) {
   await testKv();
 }
diff --git a/src/api-tester/core/types.ts b/src/api-tester/core/types.ts
index 24d8a71..131e409 100644
--- a/src/api-tester/core/types.ts
+++ b/src/api-tester/core/types.ts
@@ -1,16 +1,33 @@
 // src/api-tester/core/types.ts
 
+/**
+ * Repräsentiert ein JSON-Objekt, etwa das Ergebnis eines API-Calls.
+ */
 export type Schema = Record<string, unknown>;
 
+/**
+ * Beschreibt eine Typabweichung in einem Schema-Vergleich.
+ * Beispiel:
+ *   path = "customer.address.zip"
+ *   expected = "string"
+ *   actual   = "null"
+ */
 export interface TypeMismatch {
-  path: string; // z.B. "customer.address.zip"
-  expected: string; // z.B. "string"
-  actual: string; // z.B. "null"
+  path: string;
+  expected: string;
+  actual: string;
 }
 
+/**
+ * Ergebnis des Schema-Vergleichs:
+ *  - missingFields: im erwarteten Schema vorhanden, in der Antwort nicht.
+ *  - extraFields:   in der Antwort vorhanden, aber nicht im erwarteten Schema.
+ *  - typeMismatches: Felder, bei denen der Typ abweicht.
+ *  - updatedSchema: Das transformierte Schema (z.B. actual-Response, das später versioniert wird).
+ */
 export interface Diff {
-  missingFields: string[]; // im expected, aber nicht im actual
-  extraFields: string[]; // im actual, aber nicht im expected
-  typeMismatches: TypeMismatch[]; // Felder mit falschem Typ
-  updatedSchema: Schema; // transformValues(actualResponse)
+  missingFields: string[];
+  extraFields: string[];
+  typeMismatches: TypeMismatch[];
+  updatedSchema: Schema;
 }
diff --git a/src/api-tester/core/utils.ts b/src/api-tester/core/utils.ts
index bb00142..1bc4215 100644
--- a/src/api-tester/core/utils.ts
+++ b/src/api-tester/core/utils.ts
@@ -1,12 +1,49 @@
 // src/api-tester/core/utils.ts
-import {
-  dirname,
-  fromFileUrl,
-  join,
-} from "https://deno.land/std@0.216.0/path/mod.ts";
 
+import { resolve } from "https://deno.land/std@0.216.0/path/mod.ts";
+
+/**
+ * Löst einen Pfad relativ zum Projekt-Root (Deno.cwd()) auf.
+ *
+ * Beispiele:
+ *   resolveProjectPath("config.json")
+ *     => /Users/.../mein-projekt/config.json
+ *
+ *   resolveProjectPath("src", "api-tester", "expected", "Foo.json")
+ *     => /Users/.../mein-projekt/src/api-tester/expected/Foo.json
+ */
 export function resolveProjectPath(...segments: string[]): string {
-  const __dirname = dirname(fromFileUrl(import.meta.url));
-  // springt nur EIN Level hoch: von core → src/api-tester
-  return join(__dirname, "..", ...segments);
+  return resolve(Deno.cwd(), ...segments);
+}
+
+/**
+ * Ersetzt `value` durch `fallback`, falls `value` undefined oder null ist.
+ *
+ * Beispiel:
+ *   replaceWithFallback(undefined, "DEFAULT") // "DEFAULT"
+ *   replaceWithFallback("VALUE", "DEFAULT")   // "VALUE"
+ */
+export function replaceWithFallback<T>(
+  value: T | undefined | null,
+  fallback: T,
+): T {
+  return value != null ? value : fallback;
+}
+
+/**
+ * Führt in `template` Platzhalter vom Format `${KEY}` durch Werte aus `replacements` ein.
+ * Wenn ein Key nicht gefunden wird, bleibt der Platzhalter leer.
+ *
+ * Beispiele:
+ *   safeReplace("Hello ${NAME}", { NAME: "Max" })  // "Hello Max"
+ *   safeReplace("ID=${ID}", {})                     // "ID="
+ */
+export function safeReplace(
+  template: string,
+  replacements: Record<string, string>,
+): string {
+  return template.replace(
+    /\$\{([^}]+)\}/g,
+    (_match, key) => replacements[key] ?? "",
+  );
 }
diff --git a/src/api-tester/core/validateConfig.ts b/src/api-tester/core/validateConfig.ts
index d57a12a..4ad837c 100644
--- a/src/api-tester/core/validateConfig.ts
+++ b/src/api-tester/core/validateConfig.ts
@@ -1,7 +1,11 @@
 // src/api-tester/core/validateConfig.ts
-import { existsSync } from "https://deno.land/std@0.177.0/fs/mod.ts";
+
+import { existsSync } from "https://deno.land/std@0.216.0/fs/mod.ts";
 import { resolveProjectPath } from "./utils.ts";
 
+/**
+ * Beschreibt die Struktur eines Endpoints, wie er in config.json definiert ist.
+ */
 export interface EndpointConfig {
   name: string;
   bodyFile?: string;
@@ -13,30 +17,38 @@ export interface EndpointConfig {
  * Gibt Warnungen für fehlende Dateien aus (z. B. request-Bodies oder expected-Strukturen).
  *
  * @param endpoints - Liste aller Endpunkte aus der config.json
+ * @returns `true`, wenn mindestens eine Datei fehlt, sonst `false`
  */
-export function validateConfig(endpoints: EndpointConfig[]) {
-  let hasWarnings = false;
+export function validateConfig(endpoints: EndpointConfig[]): boolean {
+  let missingDetected = false;
 
   for (const ep of endpoints) {
+    // 1) Prüfe, ob bodyFile existiert (falls angegeben)
     if (ep.bodyFile) {
       const bodyPath = resolveProjectPath(ep.bodyFile);
       if (!existsSync(bodyPath)) {
-        console.warn(`⚠️ Warnung: Datei fehlt → ${ep.bodyFile} (${ep.name})`);
-        hasWarnings = true;
+        console.warn(
+          `⚠️ Warnung: request-Body-Datei fehlt: "${ep.bodyFile}" für Endpoint "${ep.name}".`,
+        );
+        missingDetected = true;
       }
     }
+
+    // 2) Prüfe, ob expectedStructure existiert (falls angegeben)
     if (ep.expectedStructure) {
       const expectedPath = resolveProjectPath(ep.expectedStructure);
       if (!existsSync(expectedPath)) {
         console.warn(
-          `⚠️ Warnung: Datei fehlt → ${ep.expectedStructure} (${ep.name})`,
+          `⚠️ Warnung: expected-Schema-Datei fehlt: "${ep.expectedStructure}" für Endpoint "${ep.name}".`,
         );
-        hasWarnings = true;
+        missingDetected = true;
       }
     }
   }
 
-  if (!hasWarnings) {
-    console.log("\n✅ Alle Referenzen in config.json vorhanden.\n");
+  if (!missingDetected) {
+    console.log("✅ Alle referenzierten Dateien in config.json vorhanden.");
   }
+
+  return missingDetected;
 }
diff --git a/src/api-tester/core/versionChecker.ts b/src/api-tester/core/versionChecker.ts
index b9efaa9..ef90d99 100644
--- a/src/api-tester/core/versionChecker.ts
+++ b/src/api-tester/core/versionChecker.ts
@@ -1,85 +1,126 @@
 // src/api-tester/core/versionChecker.ts
 
-import type { Endpoint } from "./apiCaller.ts";
+import type { EndpointConfig } from "./configLoader.ts";
 
-export interface VersionCheckResult extends Endpoint {
+export interface VersionCheckResult extends EndpointConfig {
   versionChanged: boolean;
 }
 
 /**
  * Prüft, ob für den übergebenen API-Endpunkt eine neue Version existiert (z.B. /v2/ statt /v1/).
- * Führt dazu einen echten HTTP-Request mit fetch durch.
- *
- * @param endpoint        Der API-Endpunkt aus der config.json
- * @param dynamicParams   Dynamische Platzhalter wie {id}, falls erforderlich
- * @returns               endpoint (ggf. mit aktualisierter URL und versionChanged=true)
+ * @param endpoint      Der API-Endpunkt aus der config.json
+ * @param dynamicParams Dynamische Platzhalter wie {id}, etc.
+ * @returns             endpoint (ggf. mit aktualisierter URL und versionChanged=true)
  */
 export async function checkAndUpdateApiVersion(
-  endpoint: Endpoint,
+  endpoint: EndpointConfig,
   dynamicParams: Record<string, string> = {},
 ): Promise<VersionCheckResult> {
-  // Regex extrahiert aktuelle Versionsnummer, z.B. "1" aus "/v1/"
+  // 1) Aktuelle Versionsnummer extrahieren, z.B. "1" aus "/v1/"
   const versionRegex = /\/v(\d+)\//;
   const match = endpoint.url.match(versionRegex);
   const currentVersion = match ? Number(match[1]) : null;
 
-  // Keine Version in der URL → überspringen
   if (currentVersion === null) {
+    // Keine Versionsangabe in der URL → nichts tun
     return { ...endpoint, versionChanged: false };
   }
 
-  const testedVersion = currentVersion + 1;
-  // URL-Vorlage mit potenziell neuer Version
-  const newUrlTemplate = endpoint.url.replace(
+  // 2) Nächsthöhere Version konstruieren
+  const nextVersion = currentVersion + 1;
+  const candidateTemplate = endpoint.url.replace(
     `/v${currentVersion}/`,
-    `/v${testedVersion}/`,
+    `/v${nextVersion}/`,
   );
 
-  // Platzhalter ersetzen: ${XENTRAL_ID} und dynamische Parameter {id}, etc.
-  let finalUrl = newUrlTemplate.replace(
-    "${XENTRAL_ID}",
-    Deno.env.get("XENTRAL_ID") ?? "",
-  );
+  // 3) Platzhalter ersetzen: `${XENTRAL_ID}` und dynamische Params `{key}`
+  let finalUrl = candidateTemplate;
+
+  // a) Für `${XENTRAL_ID}` aus ENV lesen (falls der Platzhalter vorhanden ist)
+  if (finalUrl.includes("${XENTRAL_ID}")) {
+    const xentralId = Deno.env.get("XENTRAL_ID") ?? "";
+    finalUrl = finalUrl.split("${XENTRAL_ID}").join(
+      encodeURIComponent(xentralId),
+    );
+  }
+
+  // b) Für dynamische Params in der Form `{key}`
   for (const [key, val] of Object.entries(dynamicParams)) {
-    finalUrl = finalUrl.replace(`{${key}}`, val);
+    const placeholder = `{${key}}`;
+    if (finalUrl.includes(placeholder)) {
+      finalUrl = finalUrl.split(placeholder).join(encodeURIComponent(val));
+    }
   }
 
+  // 4) Wenn wir keinen Bearer-Token haben, überspringen wir die Versionsprüfung
+  const bearerToken = Deno.env.get("BEARER_TOKEN") ?? "";
+  if (!bearerToken) {
+    console.warn(
+      `🔒 BEARER_TOKEN fehlt – überspringe API-Version-Check für "${endpoint.name}".`,
+    );
+    return { ...endpoint, versionChanged: false };
+  }
+
+  // 5) HTTP-Request an die potenzielle neue Version senden
   try {
     const res = await fetch(finalUrl, {
       method: "GET",
       headers: {
-        Authorization: `Bearer ${Deno.env.get("BEARER_TOKEN") ?? ""}`,
+        Authorization: `Bearer ${bearerToken}`,
         Accept: "application/json",
         "Content-Type": "application/json",
         "User-Agent": "XentralAPITester",
       },
     });
 
-    if (res.ok) {
-      const data = await res.json();
-      // Prüfen, ob keine Fehlerstruktur zurückkommt
-      if (!data.error || data.error.http_code !== 0) {
-        console.log(`✅ Neue API-Version erkannt: /v${testedVersion}/`);
-        const updatedUrl = endpoint.url.replace(
-          `/v${currentVersion}/`,
-          `/v${testedVersion}/`,
-        );
-        return { ...endpoint, url: updatedUrl, versionChanged: true };
-      } else {
-        console.warn(
-          `⛔️ Version /v${testedVersion}/ liefert Fehlerstruktur – keine gültige API-Version.`,
-        );
-      }
+    if (!res.ok) {
+      console.warn(
+        `⚠️ Version /v${nextVersion}/ für "${endpoint.name}" liefert HTTP ${res.status} – ignoriere.`,
+      );
+      return { ...endpoint, versionChanged: false };
+    }
+
+    // 6) Nur als JSON auswerten, wenn der Content-Type passt
+    const contentType = res.headers.get("content-type") ?? "";
+    let data: unknown;
+    if (contentType.includes("application/json")) {
+      data = await res.json();
     } else {
       console.warn(
-        `⚠️ Fehler beim Prüfen von /v${testedVersion}/: HTTP ${res.status}`,
+        `⚠️ Version /v${nextVersion}/ für "${endpoint.name}" liefert keinen JSON-Body (content-type=${contentType}) – ignoriere.`,
       );
+      return { ...endpoint, versionChanged: false };
     }
-  } catch (err: unknown) {
-    const msg = err instanceof Error ? err.message : String(err);
-    console.warn(`⚠️ Fehler beim Prüfen von /v${testedVersion}/: ${msg}`);
-  }
 
-  // Keine neue Version gefunden
-  return { ...endpoint, versionChanged: false };
+    // 7) Prüfen, ob das zurückgegebene Objekt ein Fehler-Objekt enthält
+    //    (je nach API-Spezifikation: hier gehen wir davon aus, dass "error" ein Objekt
+    //     mit property "http_code" ist und http_code===0 → OK)
+    const asObj = data as Record<string, unknown>;
+    const errObj = (asObj.error as { http_code?: number } | undefined) ??
+      undefined;
+
+    if (errObj && errObj.http_code === 0) {
+      // Wenn error.http_code===0, dann ist es formal ein Fehler-Wrapper → keine neue Version
+      console.warn(
+        `⛔️ Version /v${nextVersion}/ für "${endpoint.name}" liefert error.http_code=0 – ignoriere.`,
+      );
+      return { ...endpoint, versionChanged: false };
+    }
+
+    // 8) Neue Version gefunden
+    console.log(
+      `✅ Neue API-Version erkannt für "${endpoint.name}": /v${nextVersion}/`,
+    );
+    const updatedUrl = endpoint.url.replace(
+      `/v${currentVersion}/`,
+      `/v${nextVersion}/`,
+    );
+
+    return { ...endpoint, url: updatedUrl, versionChanged: true };
+  } catch (err) {
+    console.warn(
+      `⚠️ Fehler beim Prüfen von /v${nextVersion}/ für "${endpoint.name}": ${err}`,
+    );
+    return { ...endpoint, versionChanged: false };
+  }
 }
diff --git a/src/api-tester/expected/Get_List_Customers_updated.json b/src/api-tester/expected/Get_List_Customers_updated.json
index 161ed87..ace2d72 100644
--- a/src/api-tester/expected/Get_List_Customers_updated.json
+++ b/src/api-tester/expected/Get_List_Customers_updated.json
@@ -1,483 +1 @@
-{
-  "data": [
-    {
-      "id": "string",
-      "uuid": "string",
-      "number": "string",
-      "deviatingCustomerNumber": "string",
-      "customerType": "string",
-      "name": "string",
-      "firstname": "string",
-      "lastname": "string",
-      "title": "string",
-      "salutation": null,
-      "birthdate": null,
-      "department": "string",
-      "subDepartment": "string",
-      "projects": [
-        {
-          "id": "string"
-        }
-      ],
-      "contactDetails": {
-        "email": "string",
-        "phone": null,
-        "fax": null,
-        "website": null,
-        "additionalData": []
-      },
-      "accountManager": null,
-      "salesManager": {
-        "id": "string"
-      },
-      "lead": {
-        "isLead": false,
-        "status": "string"
-      }
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "number": "string",
-      "deviatingCustomerNumber": "string",
-      "customerType": "string",
-      "name": "string",
-      "firstname": "string",
-      "lastname": "string",
-      "title": "string",
-      "salutation": null,
-      "birthdate": null,
-      "department": "string",
-      "subDepartment": "string",
-      "projects": [
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        }
-      ],
-      "contactDetails": {
-        "email": "string",
-        "phone": "string",
-        "fax": "string",
-        "website": null,
-        "additionalData": []
-      },
-      "accountManager": null,
-      "salesManager": {
-        "id": "string"
-      },
-      "lead": {
-        "isLead": false,
-        "status": "string"
-      }
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "number": "string",
-      "deviatingCustomerNumber": "string",
-      "customerType": "string",
-      "name": "string",
-      "firstname": "string",
-      "lastname": "string",
-      "title": "string",
-      "salutation": "string",
-      "birthdate": null,
-      "department": "string",
-      "subDepartment": "string",
-      "projects": [
-        {
-          "id": "string"
-        }
-      ],
-      "contactDetails": {
-        "email": "string",
-        "phone": "string",
-        "fax": null,
-        "website": null,
-        "additionalData": []
-      },
-      "accountManager": null,
-      "salesManager": null,
-      "lead": {
-        "isLead": false,
-        "status": "string"
-      }
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "number": "string",
-      "deviatingCustomerNumber": "string",
-      "customerType": "string",
-      "name": "string",
-      "firstname": "string",
-      "lastname": "string",
-      "title": "string",
-      "salutation": "string",
-      "birthdate": null,
-      "department": "string",
-      "subDepartment": "string",
-      "projects": [
-        {
-          "id": "string"
-        }
-      ],
-      "contactDetails": {
-        "email": "string",
-        "phone": null,
-        "fax": null,
-        "website": null,
-        "additionalData": []
-      },
-      "accountManager": null,
-      "salesManager": {
-        "id": "string"
-      },
-      "lead": {
-        "isLead": false,
-        "status": "string"
-      }
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "number": "string",
-      "deviatingCustomerNumber": "string",
-      "customerType": "string",
-      "name": "string",
-      "firstname": "string",
-      "lastname": "string",
-      "title": "string",
-      "salutation": null,
-      "birthdate": null,
-      "department": "string",
-      "subDepartment": "string",
-      "projects": [
-        {
-          "id": "string"
-        }
-      ],
-      "contactDetails": {
-        "email": "string",
-        "phone": null,
-        "fax": null,
-        "website": null,
-        "additionalData": []
-      },
-      "accountManager": null,
-      "salesManager": {
-        "id": "string"
-      },
-      "lead": {
-        "isLead": false,
-        "status": "string"
-      }
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "number": "string",
-      "deviatingCustomerNumber": "string",
-      "customerType": "string",
-      "name": "string",
-      "firstname": "string",
-      "lastname": "string",
-      "title": "string",
-      "salutation": null,
-      "birthdate": null,
-      "department": "string",
-      "subDepartment": "string",
-      "projects": [
-        {
-          "id": "string"
-        }
-      ],
-      "contactDetails": {
-        "email": "string",
-        "phone": null,
-        "fax": null,
-        "website": null,
-        "additionalData": []
-      },
-      "accountManager": null,
-      "salesManager": {
-        "id": "string"
-      },
-      "lead": {
-        "isLead": false,
-        "status": "string"
-      }
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "number": "string",
-      "deviatingCustomerNumber": "string",
-      "customerType": "string",
-      "name": "string",
-      "firstname": "string",
-      "lastname": "string",
-      "title": null,
-      "salutation": null,
-      "birthdate": null,
-      "department": "string",
-      "subDepartment": "string",
-      "projects": [
-        {
-          "id": "string"
-        }
-      ],
-      "contactDetails": {
-        "email": "string",
-        "phone": "string",
-        "fax": null,
-        "website": null,
-        "additionalData": []
-      },
-      "accountManager": null,
-      "salesManager": null,
-      "lead": {
-        "isLead": false,
-        "status": null
-      }
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "number": "string",
-      "deviatingCustomerNumber": "string",
-      "customerType": "string",
-      "name": "string",
-      "firstname": "string",
-      "lastname": "string",
-      "title": "string",
-      "salutation": null,
-      "birthdate": null,
-      "department": "string",
-      "subDepartment": "string",
-      "projects": [
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        },
-        {
-          "id": "string"
-        }
-      ],
-      "contactDetails": {
-        "email": "string",
-        "phone": null,
-        "fax": null,
-        "website": null,
-        "additionalData": []
-      },
-      "accountManager": null,
-      "salesManager": {
-        "id": "string"
-      },
-      "lead": {
-        "isLead": false,
-        "status": "string"
-      }
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "number": "string",
-      "deviatingCustomerNumber": "string",
-      "customerType": "string",
-      "name": "string",
-      "firstname": "string",
-      "lastname": "string",
-      "title": "string",
-      "salutation": "string",
-      "birthdate": null,
-      "department": "string",
-      "subDepartment": "string",
-      "projects": [
-        {
-          "id": "string"
-        }
-      ],
-      "contactDetails": {
-        "email": "string",
-        "phone": null,
-        "fax": null,
-        "website": null,
-        "additionalData": []
-      },
-      "accountManager": null,
-      "salesManager": {
-        "id": "string"
-      },
-      "lead": {
-        "isLead": false,
-        "status": "string"
-      }
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "number": "string",
-      "deviatingCustomerNumber": "string",
-      "customerType": "string",
-      "name": "string",
-      "firstname": "string",
-      "lastname": "string",
-      "title": "string",
-      "salutation": "string",
-      "birthdate": null,
-      "department": "string",
-      "subDepartment": "string",
-      "projects": [
-        {
-          "id": "string"
-        }
-      ],
-      "contactDetails": {
-        "email": "string",
-        "phone": null,
-        "fax": null,
-        "website": null,
-        "additionalData": []
-      },
-      "accountManager": null,
-      "salesManager": {
-        "id": "string"
-      },
-      "lead": {
-        "isLead": false,
-        "status": "string"
-      }
-    }
-  ],
-  "extra": {
-    "totalCount": 0,
-    "page": {
-      "number": 0,
-      "size": 0
-    }
-  }
-}
+"string"
diff --git a/src/api-tester/expected/Get_List_Invoices_updated.json b/src/api-tester/expected/Get_List_Invoices_updated.json
index 215a1e0..ace2d72 100644
--- a/src/api-tester/expected/Get_List_Invoices_updated.json
+++ b/src/api-tester/expected/Get_List_Invoices_updated.json
@@ -1,411 +1 @@
-{
-  "data": [
-    {
-      "id": "string",
-      "number": "string",
-      "date": "string",
-      "status": "string",
-      "tags": [],
-      "address": {
-        "name": "string",
-        "customerNumber": "string",
-        "country": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string",
-        "abbreviation": "string"
-      },
-      "payment": {
-        "method": "string",
-        "status": "string",
-        "debit": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "balance": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "updatedBy": {
-        "id": "string"
-      },
-      "updatedAt": "string",
-      "additionalFields": [],
-      "dunningSettings": {
-        "level": "string",
-        "date": "string",
-        "comment": "string",
-        "sent": false
-      }
-    },
-    {
-      "id": "string",
-      "number": "string",
-      "date": "string",
-      "status": "string",
-      "tags": [],
-      "address": {
-        "name": "string",
-        "customerNumber": "string",
-        "country": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string",
-        "abbreviation": "string"
-      },
-      "payment": {
-        "method": "string",
-        "status": "string",
-        "debit": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "balance": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "updatedBy": {
-        "id": "string"
-      },
-      "updatedAt": "string",
-      "additionalFields": [],
-      "dunningSettings": {
-        "level": "string",
-        "date": "string",
-        "comment": "string",
-        "sent": false
-      }
-    },
-    {
-      "id": "string",
-      "number": "string",
-      "date": "string",
-      "status": "string",
-      "tags": [],
-      "address": {
-        "name": "string",
-        "customerNumber": "string",
-        "country": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string",
-        "abbreviation": "string"
-      },
-      "payment": {
-        "method": "string",
-        "status": "string",
-        "debit": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "balance": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "updatedBy": {
-        "id": "string"
-      },
-      "updatedAt": "string",
-      "additionalFields": [],
-      "dunningSettings": {
-        "level": "string",
-        "date": "string",
-        "comment": "string",
-        "sent": false
-      }
-    },
-    {
-      "id": "string",
-      "number": "string",
-      "date": "string",
-      "status": "string",
-      "tags": [],
-      "address": {
-        "name": "string",
-        "customerNumber": "string",
-        "country": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string",
-        "abbreviation": "string"
-      },
-      "payment": {
-        "method": "string",
-        "status": "string",
-        "debit": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "balance": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "updatedBy": {
-        "id": "string"
-      },
-      "updatedAt": null,
-      "additionalFields": [],
-      "dunningSettings": {
-        "level": "string",
-        "date": "string",
-        "comment": "string",
-        "sent": false
-      }
-    },
-    {
-      "id": "string",
-      "number": "string",
-      "date": "string",
-      "status": "string",
-      "tags": [],
-      "address": {
-        "name": "string",
-        "customerNumber": "string",
-        "country": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string",
-        "abbreviation": "string"
-      },
-      "payment": {
-        "method": "string",
-        "status": "string",
-        "debit": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "balance": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "updatedBy": {
-        "id": "string"
-      },
-      "updatedAt": null,
-      "additionalFields": [],
-      "dunningSettings": {
-        "level": "string",
-        "date": "string",
-        "comment": "string",
-        "sent": false
-      }
-    },
-    {
-      "id": "string",
-      "number": "string",
-      "date": "string",
-      "status": "string",
-      "tags": [],
-      "address": {
-        "name": "string",
-        "customerNumber": "string",
-        "country": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string",
-        "abbreviation": "string"
-      },
-      "payment": {
-        "method": "string",
-        "status": "string",
-        "debit": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "balance": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "updatedBy": {
-        "id": "string"
-      },
-      "updatedAt": "string",
-      "additionalFields": [],
-      "dunningSettings": {
-        "level": "string",
-        "date": "string",
-        "comment": "string",
-        "sent": false
-      }
-    },
-    {
-      "id": "string",
-      "number": "string",
-      "date": "string",
-      "status": "string",
-      "tags": [],
-      "address": {
-        "name": "string",
-        "customerNumber": "string",
-        "country": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string",
-        "abbreviation": "string"
-      },
-      "payment": {
-        "method": "string",
-        "status": "string",
-        "debit": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "balance": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "updatedBy": {
-        "id": "string"
-      },
-      "updatedAt": "string",
-      "additionalFields": [],
-      "dunningSettings": {
-        "level": "string",
-        "date": "string",
-        "comment": "string",
-        "sent": false
-      }
-    },
-    {
-      "id": "string",
-      "number": "string",
-      "date": "string",
-      "status": "string",
-      "tags": [],
-      "address": {
-        "name": "string",
-        "customerNumber": "string",
-        "country": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string",
-        "abbreviation": "string"
-      },
-      "payment": {
-        "method": "string",
-        "status": "string",
-        "debit": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "balance": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "updatedBy": {
-        "id": "string"
-      },
-      "updatedAt": null,
-      "additionalFields": [],
-      "dunningSettings": {
-        "level": "string",
-        "date": "string",
-        "comment": "string",
-        "sent": false
-      }
-    },
-    {
-      "id": "string",
-      "number": "string",
-      "date": "string",
-      "status": "string",
-      "tags": [],
-      "address": {
-        "name": "string",
-        "customerNumber": "string",
-        "country": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string",
-        "abbreviation": "string"
-      },
-      "payment": {
-        "method": "string",
-        "status": "string",
-        "debit": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "balance": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "updatedBy": {
-        "id": "string"
-      },
-      "updatedAt": null,
-      "additionalFields": [],
-      "dunningSettings": {
-        "level": "string",
-        "date": "string",
-        "comment": "string",
-        "sent": false
-      }
-    },
-    {
-      "id": "string",
-      "number": "string",
-      "date": "string",
-      "status": "string",
-      "tags": [],
-      "address": {
-        "name": "string",
-        "customerNumber": "string",
-        "country": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string",
-        "abbreviation": "string"
-      },
-      "payment": {
-        "method": "string",
-        "status": "string",
-        "debit": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "balance": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "updatedBy": {
-        "id": "string"
-      },
-      "updatedAt": null,
-      "additionalFields": [],
-      "dunningSettings": {
-        "level": "string",
-        "date": "string",
-        "comment": "string",
-        "sent": false
-      }
-    }
-  ],
-  "extra": {
-    "totalCount": 0,
-    "page": {
-      "number": 0,
-      "size": 0
-    }
-  }
-}
+"string"
diff --git a/src/api-tester/expected/Get_List_Products.json b/src/api-tester/expected/Get_List_Products.json
index 139b3a9..c9d9c5e 100644
--- a/src/api-tester/expected/Get_List_Products.json
+++ b/src/api-tester/expected/Get_List_Products.json
@@ -1,88 +1,1366 @@
 {
   "data": [
     {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": "null|string",
-      "number": "string",
+      "id": "1741",
+      "uuid": "01970b9b-368e-7f1c-9e59-9552555a3699",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000646",
       "project": {
-        "id": "string",
-        "name": "string"
+        "id": "3",
+        "name": "Kasse"
       },
       "category": {
-        "id": "string",
-        "name": "string"
+        "id": "1",
+        "name": "Handelsware (100000)"
       },
-      "standardSupplier": "null|string",
+      "standardSupplier": null,
       "stockCount": 0,
       "stockStats": {
-        "purchasedCount": "string",
-        "totalCount": "null|string",
-        "availableCount": "string",
-        "inProductionCount": "string"
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
       },
       "purchasePriceNet": {
-        "currency": "string|null",
-        "amount": "string|null"
+        "currency": "EUR",
+        "amount": "0.0000"
       },
       "purchasePriceGross": {
-        "currency": "string|null",
-        "amount": "string|null"
+        "currency": "EUR",
+        "amount": "0.0000"
       },
       "salesPriceNet": {
-        "currency": "string|null",
-        "amount": "string|null"
+        "currency": "EUR",
+        "amount": "0.0000"
       },
       "salesPriceGross": {
-        "currency": "string|null",
-        "amount": "string|null"
-      },
-      "shopPriceDisplay": "null|string",
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-26T10:01:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1740",
+      "uuid": "0196fd1d-7ba6-7c4e-88e1-139f42007d31",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000645",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-23T14:49:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1739",
+      "uuid": "0196fd1d-167c-7f04-89d3-9580f2406bfb",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000644",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-23T14:49:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1738",
+      "uuid": "0196fd0d-144c-7002-960d-922859856d8f",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000643",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-23T14:18:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1737",
+      "uuid": "0196f701-cc44-7490-aaee-3cc3bb06d38f",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000642",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-22T10:24:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1736",
+      "uuid": "0196f1db-72ea-75b1-9968-4e8c041b4371",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000641",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-21T10:07:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1735",
+      "uuid": "0196ecb5-18f8-7aa4-a639-668ae27623cd",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000640",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-20T10:21:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1734",
+      "uuid": "0196e78e-c176-7c07-b310-ed5f894130f2",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000639",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-19T10:04:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1733",
+      "uuid": "0196d911-3fae-731a-90c6-52a3bfaddc90",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000638",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-16T14:54:09+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1732",
+      "uuid": "0196d2f5-4a31-7674-9750-421c2b1b08f7",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000637",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
       "options": [],
       "selectedOptions": [],
       "variants": [],
       "isVariant": false,
-      "variantOf": "null|string",
-      "thumbnailUrl": "null|string",
-      "thumbnailId": "null|string",
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
       "tags": [],
       "freeFields": [],
-      "countryOfOrigin": "null|string",
-      "regionOfOrigin": "string",
-      "internalComment": "string",
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
       "measurements": {
         "weight": {
           "value": 0,
-          "unit": "string"
+          "unit": "kg"
         },
         "netWeight": {
           "value": 0,
-          "unit": "string"
+          "unit": "kg"
         },
         "length": {
           "value": 0,
-          "unit": "string"
+          "unit": "cm"
         },
         "width": {
           "value": 0,
-          "unit": "string"
+          "unit": "cm"
         },
         "height": {
           "value": 0,
-          "unit": "string"
+          "unit": "cm"
         }
       },
       "minimumOrderQuantity": 0,
       "minimumStorageQuantity": 0,
-      "salesTax": "string",
+      "salesTax": "standard",
       "hasBatches": false,
-      "serialNumbersMode": "string",
+      "serialNumbersMode": "disabled",
       "hasBestBeforeDate": false,
       "hasBillOfMaterials": false,
       "isAssembledJustInTime": false,
@@ -90,9 +1368,9 @@
       "isExternallyProduced": false,
       "allowPurchaseFromAllSuppliers": false,
       "isDisabled": false,
-      "disabledReason": "string",
+      "disabledReason": "",
       "hidePriceOnDocuments": false,
-      "ageRating": "null|string",
+      "ageRating": null,
       "isStockItem": false,
       "isStockTakingDisabled": false,
       "hideJustInTimeItemsOnDocuments": false,
@@ -108,18 +1386,43 @@
       "calculatedPurchasePrice": {
         "hasCalculatedPurchasePrice": false,
         "price": {
-          "amount": "string|null",
-          "currency": "string|null"
+          "amount": "0.0000",
+          "currency": "EUR"
         }
       },
       "unit": {
-        "name": "string"
+        "name": ""
       },
-      "updatedAt": "string"
+      "updatedAt": "2025-05-15T10:27:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
     }
   ],
   "extra": {
-    "totalCount": 0,
+    "totalCount": 1155,
     "page": {
       "number": 1,
       "size": 10
diff --git a/src/api-tester/expected/Get_List_Products_updated.json b/src/api-tester/expected/Get_List_Products_updated.json
index f62afd8..ace2d72 100644
--- a/src/api-tester/expected/Get_List_Products_updated.json
+++ b/src/api-tester/expected/Get_List_Products_updated.json
@@ -1,1169 +1 @@
-{
-  "data": [
-    {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": null,
-      "number": "string",
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "category": {
-        "id": "string",
-        "name": "string"
-      },
-      "standardSupplier": null,
-      "stockCount": 0,
-      "stockStats": {
-        "purchasedCount": null,
-        "totalCount": null,
-        "availableCount": null,
-        "inProductionCount": null
-      },
-      "purchasePriceNet": null,
-      "purchasePriceGross": null,
-      "salesPriceNet": null,
-      "salesPriceGross": null,
-      "shopPriceDisplay": null,
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
-      "options": [],
-      "selectedOptions": [],
-      "variants": [],
-      "isVariant": false,
-      "variantOf": null,
-      "thumbnailUrl": null,
-      "thumbnailId": null,
-      "tags": [],
-      "freeFields": [],
-      "countryOfOrigin": null,
-      "regionOfOrigin": "string",
-      "internalComment": "string",
-      "measurements": {
-        "weight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "netWeight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "length": {
-          "value": 0,
-          "unit": "string"
-        },
-        "width": {
-          "value": 0,
-          "unit": "string"
-        },
-        "height": {
-          "value": 0,
-          "unit": "string"
-        }
-      },
-      "minimumOrderQuantity": 0,
-      "minimumStorageQuantity": 0,
-      "salesTax": "string",
-      "hasBatches": false,
-      "serialNumbersMode": "string",
-      "hasBestBeforeDate": false,
-      "hasBillOfMaterials": false,
-      "isAssembledJustInTime": false,
-      "isProductionProduct": false,
-      "isExternallyProduced": false,
-      "allowPurchaseFromAllSuppliers": false,
-      "isDisabled": false,
-      "disabledReason": "string",
-      "hidePriceOnDocuments": false,
-      "ageRating": null,
-      "isStockItem": false,
-      "isStockTakingDisabled": false,
-      "hideJustInTimeItemsOnDocuments": false,
-      "isShippingCostsProduct": false,
-      "discount": {
-        "isDiscountProduct": false,
-        "discountPercentage": 0
-      },
-      "stockTaking": {
-        "hasStockTakingValue": false,
-        "stockTakingValue": 0
-      },
-      "calculatedPurchasePrice": {
-        "hasCalculatedPurchasePrice": false,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "unit": {
-        "name": "string"
-      },
-      "updatedAt": "string"
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": null,
-      "number": "string",
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "category": {
-        "id": "string",
-        "name": "string"
-      },
-      "standardSupplier": null,
-      "stockCount": 0,
-      "stockStats": {
-        "purchasedCount": "string",
-        "totalCount": null,
-        "availableCount": "string",
-        "inProductionCount": "string"
-      },
-      "purchasePriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "purchasePriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "shopPriceDisplay": null,
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
-      "options": [],
-      "selectedOptions": [],
-      "variants": [],
-      "isVariant": false,
-      "variantOf": null,
-      "thumbnailUrl": null,
-      "thumbnailId": null,
-      "tags": [],
-      "freeFields": [],
-      "countryOfOrigin": null,
-      "regionOfOrigin": "string",
-      "internalComment": "string",
-      "measurements": {
-        "weight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "netWeight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "length": {
-          "value": 0,
-          "unit": "string"
-        },
-        "width": {
-          "value": 0,
-          "unit": "string"
-        },
-        "height": {
-          "value": 0,
-          "unit": "string"
-        }
-      },
-      "minimumOrderQuantity": 0,
-      "minimumStorageQuantity": 0,
-      "salesTax": "string",
-      "hasBatches": false,
-      "serialNumbersMode": "string",
-      "hasBestBeforeDate": false,
-      "hasBillOfMaterials": false,
-      "isAssembledJustInTime": false,
-      "isProductionProduct": false,
-      "isExternallyProduced": false,
-      "allowPurchaseFromAllSuppliers": false,
-      "isDisabled": false,
-      "disabledReason": "string",
-      "hidePriceOnDocuments": false,
-      "ageRating": null,
-      "isStockItem": false,
-      "isStockTakingDisabled": false,
-      "hideJustInTimeItemsOnDocuments": false,
-      "isShippingCostsProduct": false,
-      "discount": {
-        "isDiscountProduct": false,
-        "discountPercentage": 0
-      },
-      "stockTaking": {
-        "hasStockTakingValue": false,
-        "stockTakingValue": 0
-      },
-      "calculatedPurchasePrice": {
-        "hasCalculatedPurchasePrice": false,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "unit": {
-        "name": "string"
-      },
-      "updatedAt": "string"
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": null,
-      "number": "string",
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "category": {
-        "id": "string",
-        "name": "string"
-      },
-      "standardSupplier": null,
-      "stockCount": 0,
-      "stockStats": {
-        "purchasedCount": "string",
-        "totalCount": null,
-        "availableCount": "string",
-        "inProductionCount": "string"
-      },
-      "purchasePriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "purchasePriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "shopPriceDisplay": null,
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
-      "options": [],
-      "selectedOptions": [],
-      "variants": [],
-      "isVariant": false,
-      "variantOf": null,
-      "thumbnailUrl": null,
-      "thumbnailId": null,
-      "tags": [],
-      "freeFields": [],
-      "countryOfOrigin": null,
-      "regionOfOrigin": "string",
-      "internalComment": "string",
-      "measurements": {
-        "weight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "netWeight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "length": {
-          "value": 0,
-          "unit": "string"
-        },
-        "width": {
-          "value": 0,
-          "unit": "string"
-        },
-        "height": {
-          "value": 0,
-          "unit": "string"
-        }
-      },
-      "minimumOrderQuantity": 0,
-      "minimumStorageQuantity": 0,
-      "salesTax": "string",
-      "hasBatches": false,
-      "serialNumbersMode": "string",
-      "hasBestBeforeDate": false,
-      "hasBillOfMaterials": false,
-      "isAssembledJustInTime": false,
-      "isProductionProduct": false,
-      "isExternallyProduced": false,
-      "allowPurchaseFromAllSuppliers": false,
-      "isDisabled": false,
-      "disabledReason": "string",
-      "hidePriceOnDocuments": false,
-      "ageRating": null,
-      "isStockItem": false,
-      "isStockTakingDisabled": false,
-      "hideJustInTimeItemsOnDocuments": false,
-      "isShippingCostsProduct": false,
-      "discount": {
-        "isDiscountProduct": false,
-        "discountPercentage": 0
-      },
-      "stockTaking": {
-        "hasStockTakingValue": false,
-        "stockTakingValue": 0
-      },
-      "calculatedPurchasePrice": {
-        "hasCalculatedPurchasePrice": false,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "unit": {
-        "name": "string"
-      },
-      "updatedAt": "string"
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": null,
-      "number": "string",
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "category": {
-        "id": "string",
-        "name": "string"
-      },
-      "standardSupplier": null,
-      "stockCount": 0,
-      "stockStats": {
-        "purchasedCount": "string",
-        "totalCount": null,
-        "availableCount": "string",
-        "inProductionCount": "string"
-      },
-      "purchasePriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "purchasePriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "shopPriceDisplay": null,
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
-      "options": [],
-      "selectedOptions": [],
-      "variants": [],
-      "isVariant": false,
-      "variantOf": null,
-      "thumbnailUrl": null,
-      "thumbnailId": null,
-      "tags": [],
-      "freeFields": [],
-      "countryOfOrigin": null,
-      "regionOfOrigin": "string",
-      "internalComment": "string",
-      "measurements": {
-        "weight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "netWeight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "length": {
-          "value": 0,
-          "unit": "string"
-        },
-        "width": {
-          "value": 0,
-          "unit": "string"
-        },
-        "height": {
-          "value": 0,
-          "unit": "string"
-        }
-      },
-      "minimumOrderQuantity": 0,
-      "minimumStorageQuantity": 0,
-      "salesTax": "string",
-      "hasBatches": false,
-      "serialNumbersMode": "string",
-      "hasBestBeforeDate": false,
-      "hasBillOfMaterials": false,
-      "isAssembledJustInTime": false,
-      "isProductionProduct": false,
-      "isExternallyProduced": false,
-      "allowPurchaseFromAllSuppliers": false,
-      "isDisabled": false,
-      "disabledReason": "string",
-      "hidePriceOnDocuments": false,
-      "ageRating": null,
-      "isStockItem": false,
-      "isStockTakingDisabled": false,
-      "hideJustInTimeItemsOnDocuments": false,
-      "isShippingCostsProduct": false,
-      "discount": {
-        "isDiscountProduct": false,
-        "discountPercentage": 0
-      },
-      "stockTaking": {
-        "hasStockTakingValue": false,
-        "stockTakingValue": 0
-      },
-      "calculatedPurchasePrice": {
-        "hasCalculatedPurchasePrice": false,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "unit": {
-        "name": "string"
-      },
-      "updatedAt": "string"
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": null,
-      "number": "string",
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "category": {
-        "id": "string",
-        "name": "string"
-      },
-      "standardSupplier": null,
-      "stockCount": 0,
-      "stockStats": {
-        "purchasedCount": "string",
-        "totalCount": null,
-        "availableCount": "string",
-        "inProductionCount": "string"
-      },
-      "purchasePriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "purchasePriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "shopPriceDisplay": null,
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
-      "options": [],
-      "selectedOptions": [],
-      "variants": [],
-      "isVariant": false,
-      "variantOf": null,
-      "thumbnailUrl": null,
-      "thumbnailId": null,
-      "tags": [],
-      "freeFields": [],
-      "countryOfOrigin": null,
-      "regionOfOrigin": "string",
-      "internalComment": "string",
-      "measurements": {
-        "weight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "netWeight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "length": {
-          "value": 0,
-          "unit": "string"
-        },
-        "width": {
-          "value": 0,
-          "unit": "string"
-        },
-        "height": {
-          "value": 0,
-          "unit": "string"
-        }
-      },
-      "minimumOrderQuantity": 0,
-      "minimumStorageQuantity": 0,
-      "salesTax": "string",
-      "hasBatches": false,
-      "serialNumbersMode": "string",
-      "hasBestBeforeDate": false,
-      "hasBillOfMaterials": false,
-      "isAssembledJustInTime": false,
-      "isProductionProduct": false,
-      "isExternallyProduced": false,
-      "allowPurchaseFromAllSuppliers": false,
-      "isDisabled": false,
-      "disabledReason": "string",
-      "hidePriceOnDocuments": false,
-      "ageRating": null,
-      "isStockItem": false,
-      "isStockTakingDisabled": false,
-      "hideJustInTimeItemsOnDocuments": false,
-      "isShippingCostsProduct": false,
-      "discount": {
-        "isDiscountProduct": false,
-        "discountPercentage": 0
-      },
-      "stockTaking": {
-        "hasStockTakingValue": false,
-        "stockTakingValue": 0
-      },
-      "calculatedPurchasePrice": {
-        "hasCalculatedPurchasePrice": false,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "unit": {
-        "name": "string"
-      },
-      "updatedAt": "string"
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": null,
-      "number": "string",
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "category": {
-        "id": "string",
-        "name": "string"
-      },
-      "standardSupplier": null,
-      "stockCount": 0,
-      "stockStats": {
-        "purchasedCount": "string",
-        "totalCount": null,
-        "availableCount": "string",
-        "inProductionCount": "string"
-      },
-      "purchasePriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "purchasePriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "shopPriceDisplay": null,
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
-      "options": [],
-      "selectedOptions": [],
-      "variants": [],
-      "isVariant": false,
-      "variantOf": null,
-      "thumbnailUrl": null,
-      "thumbnailId": null,
-      "tags": [],
-      "freeFields": [],
-      "countryOfOrigin": null,
-      "regionOfOrigin": "string",
-      "internalComment": "string",
-      "measurements": {
-        "weight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "netWeight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "length": {
-          "value": 0,
-          "unit": "string"
-        },
-        "width": {
-          "value": 0,
-          "unit": "string"
-        },
-        "height": {
-          "value": 0,
-          "unit": "string"
-        }
-      },
-      "minimumOrderQuantity": 0,
-      "minimumStorageQuantity": 0,
-      "salesTax": "string",
-      "hasBatches": false,
-      "serialNumbersMode": "string",
-      "hasBestBeforeDate": false,
-      "hasBillOfMaterials": false,
-      "isAssembledJustInTime": false,
-      "isProductionProduct": false,
-      "isExternallyProduced": false,
-      "allowPurchaseFromAllSuppliers": false,
-      "isDisabled": false,
-      "disabledReason": "string",
-      "hidePriceOnDocuments": false,
-      "ageRating": null,
-      "isStockItem": false,
-      "isStockTakingDisabled": false,
-      "hideJustInTimeItemsOnDocuments": false,
-      "isShippingCostsProduct": false,
-      "discount": {
-        "isDiscountProduct": false,
-        "discountPercentage": 0
-      },
-      "stockTaking": {
-        "hasStockTakingValue": false,
-        "stockTakingValue": 0
-      },
-      "calculatedPurchasePrice": {
-        "hasCalculatedPurchasePrice": false,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "unit": {
-        "name": "string"
-      },
-      "updatedAt": "string"
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": null,
-      "number": "string",
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "category": {
-        "id": "string",
-        "name": "string"
-      },
-      "standardSupplier": null,
-      "stockCount": 0,
-      "stockStats": {
-        "purchasedCount": "string",
-        "totalCount": null,
-        "availableCount": "string",
-        "inProductionCount": "string"
-      },
-      "purchasePriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "purchasePriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "shopPriceDisplay": null,
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
-      "options": [],
-      "selectedOptions": [],
-      "variants": [],
-      "isVariant": false,
-      "variantOf": null,
-      "thumbnailUrl": null,
-      "thumbnailId": null,
-      "tags": [],
-      "freeFields": [],
-      "countryOfOrigin": null,
-      "regionOfOrigin": "string",
-      "internalComment": "string",
-      "measurements": {
-        "weight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "netWeight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "length": {
-          "value": 0,
-          "unit": "string"
-        },
-        "width": {
-          "value": 0,
-          "unit": "string"
-        },
-        "height": {
-          "value": 0,
-          "unit": "string"
-        }
-      },
-      "minimumOrderQuantity": 0,
-      "minimumStorageQuantity": 0,
-      "salesTax": "string",
-      "hasBatches": false,
-      "serialNumbersMode": "string",
-      "hasBestBeforeDate": false,
-      "hasBillOfMaterials": false,
-      "isAssembledJustInTime": false,
-      "isProductionProduct": false,
-      "isExternallyProduced": false,
-      "allowPurchaseFromAllSuppliers": false,
-      "isDisabled": false,
-      "disabledReason": "string",
-      "hidePriceOnDocuments": false,
-      "ageRating": null,
-      "isStockItem": false,
-      "isStockTakingDisabled": false,
-      "hideJustInTimeItemsOnDocuments": false,
-      "isShippingCostsProduct": false,
-      "discount": {
-        "isDiscountProduct": false,
-        "discountPercentage": 0
-      },
-      "stockTaking": {
-        "hasStockTakingValue": false,
-        "stockTakingValue": 0
-      },
-      "calculatedPurchasePrice": {
-        "hasCalculatedPurchasePrice": false,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "unit": {
-        "name": "string"
-      },
-      "updatedAt": "string"
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": null,
-      "number": "string",
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "category": {
-        "id": "string",
-        "name": "string"
-      },
-      "standardSupplier": null,
-      "stockCount": 0,
-      "stockStats": {
-        "purchasedCount": "string",
-        "totalCount": null,
-        "availableCount": "string",
-        "inProductionCount": "string"
-      },
-      "purchasePriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "purchasePriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "shopPriceDisplay": null,
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
-      "options": [],
-      "selectedOptions": [],
-      "variants": [],
-      "isVariant": false,
-      "variantOf": null,
-      "thumbnailUrl": null,
-      "thumbnailId": null,
-      "tags": [],
-      "freeFields": [],
-      "countryOfOrigin": null,
-      "regionOfOrigin": "string",
-      "internalComment": "string",
-      "measurements": {
-        "weight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "netWeight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "length": {
-          "value": 0,
-          "unit": "string"
-        },
-        "width": {
-          "value": 0,
-          "unit": "string"
-        },
-        "height": {
-          "value": 0,
-          "unit": "string"
-        }
-      },
-      "minimumOrderQuantity": 0,
-      "minimumStorageQuantity": 0,
-      "salesTax": "string",
-      "hasBatches": false,
-      "serialNumbersMode": "string",
-      "hasBestBeforeDate": false,
-      "hasBillOfMaterials": false,
-      "isAssembledJustInTime": false,
-      "isProductionProduct": false,
-      "isExternallyProduced": false,
-      "allowPurchaseFromAllSuppliers": false,
-      "isDisabled": false,
-      "disabledReason": "string",
-      "hidePriceOnDocuments": false,
-      "ageRating": null,
-      "isStockItem": false,
-      "isStockTakingDisabled": false,
-      "hideJustInTimeItemsOnDocuments": false,
-      "isShippingCostsProduct": false,
-      "discount": {
-        "isDiscountProduct": false,
-        "discountPercentage": 0
-      },
-      "stockTaking": {
-        "hasStockTakingValue": false,
-        "stockTakingValue": 0
-      },
-      "calculatedPurchasePrice": {
-        "hasCalculatedPurchasePrice": false,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "unit": {
-        "name": "string"
-      },
-      "updatedAt": "string"
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": null,
-      "number": "string",
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "category": {
-        "id": "string",
-        "name": "string"
-      },
-      "standardSupplier": null,
-      "stockCount": 0,
-      "stockStats": {
-        "purchasedCount": "string",
-        "totalCount": null,
-        "availableCount": "string",
-        "inProductionCount": "string"
-      },
-      "purchasePriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "purchasePriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "shopPriceDisplay": null,
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
-      "options": [],
-      "selectedOptions": [],
-      "variants": [],
-      "isVariant": false,
-      "variantOf": null,
-      "thumbnailUrl": null,
-      "thumbnailId": null,
-      "tags": [],
-      "freeFields": [],
-      "countryOfOrigin": null,
-      "regionOfOrigin": "string",
-      "internalComment": "string",
-      "measurements": {
-        "weight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "netWeight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "length": {
-          "value": 0,
-          "unit": "string"
-        },
-        "width": {
-          "value": 0,
-          "unit": "string"
-        },
-        "height": {
-          "value": 0,
-          "unit": "string"
-        }
-      },
-      "minimumOrderQuantity": 0,
-      "minimumStorageQuantity": 0,
-      "salesTax": "string",
-      "hasBatches": false,
-      "serialNumbersMode": "string",
-      "hasBestBeforeDate": false,
-      "hasBillOfMaterials": false,
-      "isAssembledJustInTime": false,
-      "isProductionProduct": false,
-      "isExternallyProduced": false,
-      "allowPurchaseFromAllSuppliers": false,
-      "isDisabled": false,
-      "disabledReason": "string",
-      "hidePriceOnDocuments": false,
-      "ageRating": null,
-      "isStockItem": false,
-      "isStockTakingDisabled": false,
-      "hideJustInTimeItemsOnDocuments": false,
-      "isShippingCostsProduct": false,
-      "discount": {
-        "isDiscountProduct": false,
-        "discountPercentage": 0
-      },
-      "stockTaking": {
-        "hasStockTakingValue": false,
-        "stockTakingValue": 0
-      },
-      "calculatedPurchasePrice": {
-        "hasCalculatedPurchasePrice": false,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "unit": {
-        "name": "string"
-      },
-      "updatedAt": "string"
-    },
-    {
-      "id": "string",
-      "uuid": "string",
-      "name": "string",
-      "description": "string",
-      "shortDescription": null,
-      "number": "string",
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "category": {
-        "id": "string",
-        "name": "string"
-      },
-      "standardSupplier": null,
-      "stockCount": 0,
-      "stockStats": {
-        "purchasedCount": "string",
-        "totalCount": null,
-        "availableCount": "string",
-        "inProductionCount": "string"
-      },
-      "purchasePriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "purchasePriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceNet": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "salesPriceGross": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "shopPriceDisplay": null,
-      "ean": "string",
-      "manufacturerName": "string",
-      "manufacturerNumber": "string",
-      "customsTariffNumber": "string",
-      "options": [],
-      "selectedOptions": [],
-      "variants": [],
-      "isVariant": false,
-      "variantOf": null,
-      "thumbnailUrl": null,
-      "thumbnailId": null,
-      "tags": [],
-      "freeFields": [],
-      "countryOfOrigin": null,
-      "regionOfOrigin": "string",
-      "internalComment": "string",
-      "measurements": {
-        "weight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "netWeight": {
-          "value": 0,
-          "unit": "string"
-        },
-        "length": {
-          "value": 0,
-          "unit": "string"
-        },
-        "width": {
-          "value": 0,
-          "unit": "string"
-        },
-        "height": {
-          "value": 0,
-          "unit": "string"
-        }
-      },
-      "minimumOrderQuantity": 0,
-      "minimumStorageQuantity": 0,
-      "salesTax": "string",
-      "hasBatches": false,
-      "serialNumbersMode": "string",
-      "hasBestBeforeDate": false,
-      "hasBillOfMaterials": false,
-      "isAssembledJustInTime": false,
-      "isProductionProduct": false,
-      "isExternallyProduced": false,
-      "allowPurchaseFromAllSuppliers": false,
-      "isDisabled": false,
-      "disabledReason": "string",
-      "hidePriceOnDocuments": false,
-      "ageRating": null,
-      "isStockItem": false,
-      "isStockTakingDisabled": false,
-      "hideJustInTimeItemsOnDocuments": false,
-      "isShippingCostsProduct": false,
-      "discount": {
-        "isDiscountProduct": false,
-        "discountPercentage": 0
-      },
-      "stockTaking": {
-        "hasStockTakingValue": false,
-        "stockTakingValue": 0
-      },
-      "calculatedPurchasePrice": {
-        "hasCalculatedPurchasePrice": false,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        }
-      },
-      "unit": {
-        "name": "string"
-      },
-      "updatedAt": "string"
-    }
-  ],
-  "extra": {
-    "totalCount": 0,
-    "page": {
-      "number": 0,
-      "size": 0
-    }
-  }
-}
+"string"
diff --git a/src/api-tester/expected/Get_List_Products_v1.json b/src/api-tester/expected/Get_List_Products_v1.json
new file mode 100644
index 0000000..aad5963
--- /dev/null
+++ b/src/api-tester/expected/Get_List_Products_v1.json
@@ -0,0 +1,1430 @@
+{
+  "data": [
+    {
+      "id": "1742",
+      "uuid": "01970c00-5ff9-7713-92df-e7020dc4bd77",
+      "name": "7iDP Handschuh Transition;S, blau;",
+      "description": "7iDP Handschuh Transition;S, blau;",
+      "shortDescription": null,
+      "number": "278",
+      "project": {
+        "id": "45",
+        "name": "veloxl_test"
+      },
+      "category": null,
+      "standardSupplier": {
+        "id": "335"
+      },
+      "stockCount": 5,
+      "stockStats": {
+        "purchasedCount": "1.0000",
+        "totalCount": "5.0000",
+        "availableCount": "5.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "8.9900"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "10.6981"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "20.9700"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "24.9543"
+      },
+      "shopPriceDisplay": "24.95",
+      "ean": "5055356349261",
+      "manufacturerName": "",
+      "manufacturerNumber": "7308-03-008",
+      "customsTariffNumber": "",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": "https://636a1d639f14e.xentral.biz/index.php?module=artikel&action=thumbnail&id=1742&bildvorschau=17388_100_100",
+      "thumbnailId": "17388",
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": true,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-26T12:05:08+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "7iDP Handschuh Transition;S, blau;",
+          "shortDescription": "",
+          "description": "7iDP Handschuh Transition;S, blau;",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1741",
+      "uuid": "01970b9b-368e-7f1c-9e59-9552555a3699",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000646",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-26T10:01:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1740",
+      "uuid": "0196fd1d-7ba6-7c4e-88e1-139f42007d31",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000645",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-23T14:49:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1739",
+      "uuid": "0196fd1d-167c-7f04-89d3-9580f2406bfb",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000644",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-23T14:49:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1738",
+      "uuid": "0196fd0d-144c-7002-960d-922859856d8f",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000643",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-23T14:18:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1737",
+      "uuid": "0196f701-cc44-7490-aaee-3cc3bb06d38f",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000642",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-22T10:24:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1736",
+      "uuid": "0196f1db-72ea-75b1-9968-4e8c041b4371",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000641",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-21T10:07:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1735",
+      "uuid": "0196ecb5-18f8-7aa4-a639-668ae27623cd",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000640",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-20T10:21:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1734",
+      "uuid": "0196e78e-c176-7c07-b310-ed5f894130f2",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000639",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-19T10:04:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1733",
+      "uuid": "0196d911-3fae-731a-90c6-52a3bfaddc90",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000638",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-16T14:54:09+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    }
+  ],
+  "extra": {
+    "totalCount": 1156,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/api-tester/expected/Get_List_Projects_updated.json b/src/api-tester/expected/Get_List_Projects_updated.json
index 4962c0d..ace2d72 100644
--- a/src/api-tester/expected/Get_List_Projects_updated.json
+++ b/src/api-tester/expected/Get_List_Projects_updated.json
@@ -1,541 +1 @@
-{
-  "data": [
-    {
-      "id": "string",
-      "name": "string",
-      "keyName": "string",
-      "description": "string",
-      "currency": "string",
-      "normalTaxRate": 0,
-      "reducedTaxRate": 0,
-      "storageProcess": "string",
-      "pickingProcess": "string",
-      "freeFields": [
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        }
-      ]
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "keyName": "string",
-      "description": "string",
-      "currency": "string",
-      "normalTaxRate": 0,
-      "reducedTaxRate": 0,
-      "storageProcess": "string",
-      "pickingProcess": "string",
-      "freeFields": [
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        }
-      ]
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "keyName": "string",
-      "description": "string",
-      "currency": "string",
-      "normalTaxRate": 0,
-      "reducedTaxRate": 0,
-      "storageProcess": "string",
-      "pickingProcess": "string",
-      "freeFields": [
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        }
-      ]
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "keyName": "string",
-      "description": "string",
-      "currency": "string",
-      "normalTaxRate": 0,
-      "reducedTaxRate": 0,
-      "storageProcess": "string",
-      "pickingProcess": "string",
-      "freeFields": [
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        }
-      ]
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "keyName": "string",
-      "description": "string",
-      "currency": "string",
-      "normalTaxRate": 0,
-      "reducedTaxRate": 0,
-      "storageProcess": "string",
-      "pickingProcess": "string",
-      "freeFields": [
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        }
-      ]
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "keyName": "string",
-      "description": "string",
-      "currency": "string",
-      "normalTaxRate": 0,
-      "reducedTaxRate": 0,
-      "storageProcess": "string",
-      "pickingProcess": "string",
-      "freeFields": [
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        }
-      ]
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "keyName": "string",
-      "description": "string",
-      "currency": "string",
-      "normalTaxRate": 0,
-      "reducedTaxRate": 0,
-      "storageProcess": "string",
-      "pickingProcess": "string",
-      "freeFields": [
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        }
-      ]
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "keyName": "string",
-      "description": "string",
-      "currency": "string",
-      "normalTaxRate": 0,
-      "reducedTaxRate": 0,
-      "storageProcess": "string",
-      "pickingProcess": "string",
-      "freeFields": [
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        }
-      ]
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "keyName": "string",
-      "description": "string",
-      "currency": "string",
-      "normalTaxRate": 0,
-      "reducedTaxRate": 0,
-      "storageProcess": "string",
-      "pickingProcess": "string",
-      "freeFields": [
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        }
-      ]
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "keyName": "string",
-      "description": "string",
-      "currency": "string",
-      "normalTaxRate": 0,
-      "reducedTaxRate": 0,
-      "storageProcess": "string",
-      "pickingProcess": "string",
-      "freeFields": [
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        },
-        {
-          "id": "string",
-          "value": "string"
-        }
-      ]
-    }
-  ],
-  "extra": {
-    "totalCount": 0,
-    "page": {
-      "number": 0,
-      "size": 0
-    }
-  }
-}
+"string"
diff --git a/src/api-tester/expected/Get_List_Purchase_Orders.json b/src/api-tester/expected/Get_List_Purchase_Orders.json
index bc764dd..ace2d72 100644
--- a/src/api-tester/expected/Get_List_Purchase_Orders.json
+++ b/src/api-tester/expected/Get_List_Purchase_Orders.json
@@ -1,941 +1 @@
-{
-  "data": [
-    {
-      "id": "string",
-      "date": "string",
-      "project": {
-        "id": "string"
-      },
-      "status": "string",
-      "documentNumber": "string",
-      "supplier": {
-        "id": "string",
-        "number": "string",
-        "customerNumberAtSupplier": "string",
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string",
-        "email": "string",
-        "telephone": "string",
-        "telefax": "string"
-      },
-      "bodyIntroduction": "string",
-      "bodyOutroduction": "string",
-      "requestForQuotation": null,
-      "suppliersOfferReference": "string",
-      "internalDesignation": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "salesOrderConfirmationReference": "string",
-      "isConfirmationRequested": false,
-      "isConfirmed": false,
-      "confirmedVia": "string",
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "total": {
-          "currency": "string",
-          "amount": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0,
-          "paymentTargetDiscountAmount": 0,
-          "isPaymentTargetDiscountApplied": false
-        },
-        "costCenter": "string",
-        "tax": {
-          "taxation": "string",
-          "vatId": "string",
-          "taxDisplay": "string"
-        }
-      },
-      "delivery": {
-        "deliveryTerms": null,
-        "hasDifferentDeliveryAddress": false,
-        "deliveryAddress": {
-          "honorific": "string",
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "extraAddressLine": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "contactPerson": "string"
-        },
-        "dates": {
-          "desiredDeliveryDate": null,
-          "confirmedDeliveryDate": null
-        }
-      },
-      "formatting": {
-        "hideLetterHead": false,
-        "hidePrices": false,
-        "hideProductNumbers": false,
-        "showLongProductNumbers": false,
-        "hideProductDescriptions": false,
-        "showOwnProductNumberInColumn": false
-      },
-      "internalComment": "string",
-      "liabilitiesInfo": "string"
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "project": {
-        "id": "string"
-      },
-      "status": "string",
-      "documentNumber": "string",
-      "supplier": {
-        "id": "string",
-        "number": "string",
-        "customerNumberAtSupplier": "string",
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string",
-        "email": "string",
-        "telephone": "string",
-        "telefax": "string"
-      },
-      "bodyIntroduction": "string",
-      "bodyOutroduction": "string",
-      "requestForQuotation": null,
-      "suppliersOfferReference": "string",
-      "internalDesignation": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "salesOrderConfirmationReference": "string",
-      "isConfirmationRequested": false,
-      "isConfirmed": false,
-      "confirmedVia": "string",
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "total": {
-          "currency": "string",
-          "amount": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0,
-          "paymentTargetDiscountAmount": 0,
-          "isPaymentTargetDiscountApplied": false
-        },
-        "costCenter": "string",
-        "tax": {
-          "taxation": "string",
-          "vatId": "string",
-          "taxDisplay": "string"
-        }
-      },
-      "delivery": {
-        "deliveryTerms": null,
-        "hasDifferentDeliveryAddress": false,
-        "deliveryAddress": {
-          "honorific": "string",
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "extraAddressLine": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "contactPerson": "string"
-        },
-        "dates": {
-          "desiredDeliveryDate": null,
-          "confirmedDeliveryDate": null
-        }
-      },
-      "formatting": {
-        "hideLetterHead": false,
-        "hidePrices": false,
-        "hideProductNumbers": false,
-        "showLongProductNumbers": false,
-        "hideProductDescriptions": false,
-        "showOwnProductNumberInColumn": false
-      },
-      "internalComment": "string",
-      "liabilitiesInfo": "string"
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "project": {
-        "id": "string"
-      },
-      "status": "string",
-      "documentNumber": "string",
-      "supplier": {
-        "id": "string",
-        "number": "string",
-        "customerNumberAtSupplier": "string",
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string",
-        "email": "string",
-        "telephone": "string",
-        "telefax": "string"
-      },
-      "bodyIntroduction": "string",
-      "bodyOutroduction": "string",
-      "requestForQuotation": null,
-      "suppliersOfferReference": "string",
-      "internalDesignation": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "salesOrderConfirmationReference": "string",
-      "isConfirmationRequested": false,
-      "isConfirmed": false,
-      "confirmedVia": "string",
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "total": {
-          "currency": "string",
-          "amount": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0,
-          "paymentTargetDiscountAmount": 0,
-          "isPaymentTargetDiscountApplied": false
-        },
-        "costCenter": "string",
-        "tax": {
-          "taxation": "string",
-          "vatId": "string",
-          "taxDisplay": "string"
-        }
-      },
-      "delivery": {
-        "deliveryTerms": null,
-        "hasDifferentDeliveryAddress": true,
-        "deliveryAddress": {
-          "honorific": "string",
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "extraAddressLine": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "contactPerson": "string"
-        },
-        "dates": {
-          "desiredDeliveryDate": null,
-          "confirmedDeliveryDate": null
-        }
-      },
-      "formatting": {
-        "hideLetterHead": false,
-        "hidePrices": false,
-        "hideProductNumbers": false,
-        "showLongProductNumbers": false,
-        "hideProductDescriptions": false,
-        "showOwnProductNumberInColumn": false
-      },
-      "internalComment": "string",
-      "liabilitiesInfo": "string"
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "project": {
-        "id": "string"
-      },
-      "status": "string",
-      "documentNumber": "string",
-      "supplier": {
-        "id": "string",
-        "number": "string",
-        "customerNumberAtSupplier": "string",
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string",
-        "email": "string",
-        "telephone": "string",
-        "telefax": "string"
-      },
-      "bodyIntroduction": "string",
-      "bodyOutroduction": "string",
-      "requestForQuotation": null,
-      "suppliersOfferReference": "string",
-      "internalDesignation": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "salesOrderConfirmationReference": "string",
-      "isConfirmationRequested": false,
-      "isConfirmed": false,
-      "confirmedVia": "string",
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "total": {
-          "currency": "string",
-          "amount": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0,
-          "paymentTargetDiscountAmount": 0,
-          "isPaymentTargetDiscountApplied": false
-        },
-        "costCenter": "string",
-        "tax": {
-          "taxation": "string",
-          "vatId": "string",
-          "taxDisplay": "string"
-        }
-      },
-      "delivery": {
-        "deliveryTerms": null,
-        "hasDifferentDeliveryAddress": true,
-        "deliveryAddress": {
-          "honorific": "string",
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "extraAddressLine": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "contactPerson": "string"
-        },
-        "dates": {
-          "desiredDeliveryDate": null,
-          "confirmedDeliveryDate": null
-        }
-      },
-      "formatting": {
-        "hideLetterHead": false,
-        "hidePrices": false,
-        "hideProductNumbers": false,
-        "showLongProductNumbers": false,
-        "hideProductDescriptions": false,
-        "showOwnProductNumberInColumn": false
-      },
-      "internalComment": "string",
-      "liabilitiesInfo": "string"
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "project": {
-        "id": "string"
-      },
-      "status": "string",
-      "documentNumber": "string",
-      "supplier": {
-        "id": "string",
-        "number": "string",
-        "customerNumberAtSupplier": "string",
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string",
-        "email": "string",
-        "telephone": "string",
-        "telefax": "string"
-      },
-      "bodyIntroduction": "string",
-      "bodyOutroduction": "string",
-      "requestForQuotation": null,
-      "suppliersOfferReference": "string",
-      "internalDesignation": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "salesOrderConfirmationReference": "string",
-      "isConfirmationRequested": false,
-      "isConfirmed": true,
-      "confirmedVia": "string",
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "total": {
-          "currency": "string",
-          "amount": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0,
-          "paymentTargetDiscountAmount": 0,
-          "isPaymentTargetDiscountApplied": false
-        },
-        "costCenter": "string",
-        "tax": {
-          "taxation": "string",
-          "vatId": "string",
-          "taxDisplay": "string"
-        }
-      },
-      "delivery": {
-        "deliveryTerms": null,
-        "hasDifferentDeliveryAddress": false,
-        "deliveryAddress": {
-          "honorific": "string",
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "extraAddressLine": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "contactPerson": "string"
-        },
-        "dates": {
-          "desiredDeliveryDate": null,
-          "confirmedDeliveryDate": null
-        }
-      },
-      "formatting": {
-        "hideLetterHead": false,
-        "hidePrices": false,
-        "hideProductNumbers": false,
-        "showLongProductNumbers": false,
-        "hideProductDescriptions": false,
-        "showOwnProductNumberInColumn": false
-      },
-      "internalComment": "string",
-      "liabilitiesInfo": "string"
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "project": {
-        "id": "string"
-      },
-      "status": "string",
-      "documentNumber": "string",
-      "supplier": {
-        "id": "string",
-        "number": "string",
-        "customerNumberAtSupplier": "string",
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string",
-        "email": "string",
-        "telephone": "string",
-        "telefax": "string"
-      },
-      "bodyIntroduction": "string",
-      "bodyOutroduction": "string",
-      "requestForQuotation": null,
-      "suppliersOfferReference": "string",
-      "internalDesignation": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "salesOrderConfirmationReference": "string",
-      "isConfirmationRequested": false,
-      "isConfirmed": false,
-      "confirmedVia": "string",
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "total": {
-          "currency": "string",
-          "amount": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0,
-          "paymentTargetDiscountAmount": 0,
-          "isPaymentTargetDiscountApplied": true
-        },
-        "costCenter": "string",
-        "tax": {
-          "taxation": "string",
-          "vatId": "string",
-          "taxDisplay": "string"
-        }
-      },
-      "delivery": {
-        "deliveryTerms": null,
-        "hasDifferentDeliveryAddress": false,
-        "deliveryAddress": {
-          "honorific": "string",
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "extraAddressLine": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "contactPerson": "string"
-        },
-        "dates": {
-          "desiredDeliveryDate": null,
-          "confirmedDeliveryDate": null
-        }
-      },
-      "formatting": {
-        "hideLetterHead": false,
-        "hidePrices": false,
-        "hideProductNumbers": false,
-        "showLongProductNumbers": false,
-        "hideProductDescriptions": false,
-        "showOwnProductNumberInColumn": false
-      },
-      "internalComment": "string",
-      "liabilitiesInfo": "string"
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "project": {
-        "id": "string"
-      },
-      "status": "string",
-      "documentNumber": "string",
-      "supplier": {
-        "id": "string",
-        "number": "string",
-        "customerNumberAtSupplier": "string",
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string",
-        "email": "string",
-        "telephone": "string",
-        "telefax": "string"
-      },
-      "bodyIntroduction": "string",
-      "bodyOutroduction": "string",
-      "requestForQuotation": null,
-      "suppliersOfferReference": "string",
-      "internalDesignation": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "salesOrderConfirmationReference": "string",
-      "isConfirmationRequested": false,
-      "isConfirmed": false,
-      "confirmedVia": "string",
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "total": {
-          "currency": "string",
-          "amount": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0,
-          "paymentTargetDiscountAmount": 0,
-          "isPaymentTargetDiscountApplied": false
-        },
-        "costCenter": "string",
-        "tax": {
-          "taxation": "string",
-          "vatId": "string",
-          "taxDisplay": "string"
-        }
-      },
-      "delivery": {
-        "deliveryTerms": null,
-        "hasDifferentDeliveryAddress": false,
-        "deliveryAddress": {
-          "honorific": "string",
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "extraAddressLine": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "contactPerson": "string"
-        },
-        "dates": {
-          "desiredDeliveryDate": null,
-          "confirmedDeliveryDate": null
-        }
-      },
-      "formatting": {
-        "hideLetterHead": false,
-        "hidePrices": false,
-        "hideProductNumbers": false,
-        "showLongProductNumbers": false,
-        "hideProductDescriptions": false,
-        "showOwnProductNumberInColumn": false
-      },
-      "internalComment": "string",
-      "liabilitiesInfo": "string"
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "project": {
-        "id": "string"
-      },
-      "status": "string",
-      "documentNumber": "string",
-      "supplier": {
-        "id": "string",
-        "number": "string",
-        "customerNumberAtSupplier": "string",
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string",
-        "email": "string",
-        "telephone": "string",
-        "telefax": "string"
-      },
-      "bodyIntroduction": "string",
-      "bodyOutroduction": "string",
-      "requestForQuotation": null,
-      "suppliersOfferReference": "string",
-      "internalDesignation": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "salesOrderConfirmationReference": "string",
-      "isConfirmationRequested": false,
-      "isConfirmed": false,
-      "confirmedVia": "string",
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "total": {
-          "currency": "string",
-          "amount": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0,
-          "paymentTargetDiscountAmount": 0,
-          "isPaymentTargetDiscountApplied": true
-        },
-        "costCenter": "string",
-        "tax": {
-          "taxation": "string",
-          "vatId": "string",
-          "taxDisplay": "string"
-        }
-      },
-      "delivery": {
-        "deliveryTerms": null,
-        "hasDifferentDeliveryAddress": true,
-        "deliveryAddress": {
-          "honorific": "string",
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "extraAddressLine": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "contactPerson": "string"
-        },
-        "dates": {
-          "desiredDeliveryDate": null,
-          "confirmedDeliveryDate": null
-        }
-      },
-      "formatting": {
-        "hideLetterHead": false,
-        "hidePrices": false,
-        "hideProductNumbers": false,
-        "showLongProductNumbers": false,
-        "hideProductDescriptions": false,
-        "showOwnProductNumberInColumn": false
-      },
-      "internalComment": "string",
-      "liabilitiesInfo": "string"
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "project": {
-        "id": "string"
-      },
-      "status": "string",
-      "documentNumber": "string",
-      "supplier": {
-        "id": "string",
-        "number": "string",
-        "customerNumberAtSupplier": "string",
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string",
-        "email": "string",
-        "telephone": "string",
-        "telefax": "string"
-      },
-      "bodyIntroduction": "string",
-      "bodyOutroduction": "string",
-      "requestForQuotation": null,
-      "suppliersOfferReference": "string",
-      "internalDesignation": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "salesOrderConfirmationReference": "string",
-      "isConfirmationRequested": false,
-      "isConfirmed": false,
-      "confirmedVia": "string",
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "total": {
-          "currency": "string",
-          "amount": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0,
-          "paymentTargetDiscountAmount": 0,
-          "isPaymentTargetDiscountApplied": true
-        },
-        "costCenter": "string",
-        "tax": {
-          "taxation": "string",
-          "vatId": "string",
-          "taxDisplay": "string"
-        }
-      },
-      "delivery": {
-        "deliveryTerms": null,
-        "hasDifferentDeliveryAddress": true,
-        "deliveryAddress": {
-          "honorific": "string",
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "extraAddressLine": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "contactPerson": "string"
-        },
-        "dates": {
-          "desiredDeliveryDate": null,
-          "confirmedDeliveryDate": null
-        }
-      },
-      "formatting": {
-        "hideLetterHead": false,
-        "hidePrices": false,
-        "hideProductNumbers": false,
-        "showLongProductNumbers": false,
-        "hideProductDescriptions": false,
-        "showOwnProductNumberInColumn": false
-      },
-      "internalComment": "string",
-      "liabilitiesInfo": "string"
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "project": {
-        "id": "string"
-      },
-      "status": "string",
-      "documentNumber": "string",
-      "supplier": {
-        "id": "string",
-        "number": "string",
-        "customerNumberAtSupplier": "string",
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string",
-        "email": "string",
-        "telephone": "string",
-        "telefax": "string"
-      },
-      "bodyIntroduction": "string",
-      "bodyOutroduction": "string",
-      "requestForQuotation": null,
-      "suppliersOfferReference": "string",
-      "internalDesignation": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "salesOrderConfirmationReference": "string",
-      "isConfirmationRequested": false,
-      "isConfirmed": false,
-      "confirmedVia": "string",
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "total": {
-          "currency": "string",
-          "amount": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0,
-          "paymentTargetDiscountAmount": 0,
-          "isPaymentTargetDiscountApplied": true
-        },
-        "costCenter": "string",
-        "tax": {
-          "taxation": "string",
-          "vatId": "string",
-          "taxDisplay": "string"
-        }
-      },
-      "delivery": {
-        "deliveryTerms": null,
-        "hasDifferentDeliveryAddress": true,
-        "deliveryAddress": {
-          "honorific": "string",
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "extraAddressLine": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "contactPerson": "string"
-        },
-        "dates": {
-          "desiredDeliveryDate": null,
-          "confirmedDeliveryDate": null
-        }
-      },
-      "formatting": {
-        "hideLetterHead": false,
-        "hidePrices": false,
-        "hideProductNumbers": false,
-        "showLongProductNumbers": false,
-        "hideProductDescriptions": false,
-        "showOwnProductNumberInColumn": false
-      },
-      "internalComment": "string",
-      "liabilitiesInfo": "string"
-    }
-  ],
-  "extra": {
-    "totalCount": 0,
-    "page": {
-      "number": 0,
-      "size": 0
-    }
-  }
-}
+"string"
diff --git a/src/api-tester/expected/Get_List_Returns_updated.json b/src/api-tester/expected/Get_List_Returns_updated.json
index 8827454..ace2d72 100644
--- a/src/api-tester/expected/Get_List_Returns_updated.json
+++ b/src/api-tester/expected/Get_List_Returns_updated.json
@@ -1,267 +1 @@
-{
-  "data": [
-    {
-      "id": "string",
-      "date": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "documentNumber": "string",
-      "tags": [],
-      "status": "string",
-      "salesOrder": {
-        "id": "string"
-      },
-      "progress": "string",
-      "shippingMethod": {
-        "id": "string",
-        "name": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "bodyOutroduction": null,
-      "internalComment": null
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "documentNumber": "string",
-      "tags": [],
-      "status": "string",
-      "salesOrder": {
-        "id": "string"
-      },
-      "progress": "string",
-      "shippingMethod": {
-        "id": "string",
-        "name": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "bodyOutroduction": null,
-      "internalComment": null
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "documentNumber": "string",
-      "tags": [],
-      "status": "string",
-      "salesOrder": {
-        "id": "string"
-      },
-      "progress": "string",
-      "shippingMethod": {
-        "id": "string",
-        "name": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "bodyOutroduction": null,
-      "internalComment": null
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "documentNumber": "string",
-      "tags": [],
-      "status": "string",
-      "salesOrder": null,
-      "progress": "string",
-      "shippingMethod": {
-        "id": "string",
-        "name": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "bodyOutroduction": null,
-      "internalComment": null
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "documentNumber": "string",
-      "tags": [],
-      "status": "string",
-      "salesOrder": {
-        "id": "string"
-      },
-      "progress": "string",
-      "shippingMethod": {
-        "id": "string",
-        "name": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "bodyOutroduction": null,
-      "internalComment": null
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "documentNumber": "string",
-      "tags": [],
-      "status": "string",
-      "salesOrder": {
-        "id": "string"
-      },
-      "progress": "string",
-      "shippingMethod": {
-        "id": "string",
-        "name": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "bodyOutroduction": null,
-      "internalComment": null
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "documentNumber": "string",
-      "tags": [
-        {
-          "id": "string",
-          "name": "string",
-          "color": "string"
-        }
-      ],
-      "status": "string",
-      "salesOrder": {
-        "id": "string"
-      },
-      "progress": "string",
-      "shippingMethod": {
-        "id": "string",
-        "name": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "bodyOutroduction": null,
-      "internalComment": null
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "documentNumber": "string",
-      "tags": [],
-      "status": "string",
-      "salesOrder": {
-        "id": "string"
-      },
-      "progress": "string",
-      "shippingMethod": {
-        "id": "string",
-        "name": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "bodyOutroduction": null,
-      "internalComment": null
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "documentNumber": "string",
-      "tags": [
-        {
-          "id": "string",
-          "name": "string",
-          "color": "string"
-        }
-      ],
-      "status": "string",
-      "salesOrder": null,
-      "progress": "string",
-      "shippingMethod": {
-        "id": "string",
-        "name": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "bodyOutroduction": null,
-      "internalComment": null
-    },
-    {
-      "id": "string",
-      "date": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "documentNumber": "string",
-      "tags": [],
-      "status": "string",
-      "salesOrder": null,
-      "progress": "string",
-      "shippingMethod": {
-        "id": "string",
-        "name": "string"
-      },
-      "project": {
-        "id": "string",
-        "name": "string"
-      },
-      "bodyOutroduction": null,
-      "internalComment": null
-    }
-  ],
-  "extra": {
-    "totalCount": 0,
-    "page": {
-      "number": 0,
-      "size": 0
-    }
-  }
-}
+"string"
diff --git a/src/api-tester/expected/Get_List_Sales_Orders_updated.json b/src/api-tester/expected/Get_List_Sales_Orders_updated.json
index 5f9d22f..ace2d72 100644
--- a/src/api-tester/expected/Get_List_Sales_Orders_updated.json
+++ b/src/api-tester/expected/Get_List_Sales_Orders_updated.json
@@ -1,111 +1 @@
-{
-  "data": [
-    {
-      "id": "string",
-      "documentNumber": "string",
-      "externalOrderNumber": "string",
-      "customerOrderNumber": "string",
-      "transactionNumber": "string",
-      "externalOrderId": "string",
-      "date": "string",
-      "netSales": 0,
-      "total": 0,
-      "desiredDeliveryDate": null,
-      "desiredDeliveryDateAsCalendarWeek": false,
-      "reservationDate": null,
-      "editor": "string",
-      "sales": {
-        "id": 0,
-        "name": "string"
-      },
-      "status": "string",
-      "customer": {
-        "id": "string",
-        "number": "string"
-      },
-      "comment": "string",
-      "project": {
-        "id": "string"
-      },
-      "bodyOutroduction": "string",
-      "language": {
-        "iso2": "string"
-      },
-      "financials": {
-        "paymentMethod": {
-          "id": "string"
-        },
-        "currency": "string",
-        "billingAddress": {
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "type": "string",
-          "title": "string",
-          "contactPerson": "string",
-          "addressSupplement": "string",
-          "fax": "string",
-          "email": "string",
-          "salutation": "string",
-          "gln": "string",
-          "phoneNumber": "string"
-        },
-        "paymentTerms": {
-          "paymentTargetDiscount": 0,
-          "paymentTargetDays": 0,
-          "paymentTargetDiscountDays": 0
-        }
-      },
-      "delivery": {
-        "email": "string",
-        "conditions": "string",
-        "autoShipping": true,
-        "fastLane": false,
-        "desiredDeliveryDate": "string",
-        "shippingMethod": {
-          "id": "string"
-        },
-        "shippingAddress": {
-          "name": "string",
-          "department": "string",
-          "subDepartment": "string",
-          "street": "string",
-          "zipCode": "string",
-          "city": "string",
-          "state": "string",
-          "country": "string",
-          "gln": "string"
-        }
-      },
-      "log": {
-        "createdAt": "string",
-        "createdBy": {
-          "id": "string",
-          "name": "string"
-        }
-      },
-      "isBeingEdited": false,
-      "subsequentDelivery": false,
-      "shippingDateOk": true,
-      "creditLimitOk": true,
-      "shippingLockOk": true,
-      "prepaidOk": true,
-      "postageOk": true,
-      "customerCheckOk": true,
-      "vatOk": true,
-      "stockOk": false
-    }
-  ],
-  "extra": {
-    "totalCount": 0,
-    "page": {
-      "number": 0,
-      "size": 0
-    }
-  }
-}
+"string"
diff --git a/src/api-tester/expected/Get_List_Sales_Orders_updated_v1.json b/src/api-tester/expected/Get_List_Sales_Orders_updated_v1.json
new file mode 100644
index 0000000..757f99d
--- /dev/null
+++ b/src/api-tester/expected/Get_List_Sales_Orders_updated_v1.json
@@ -0,0 +1,113 @@
+{
+  "data": [
+    {
+      "id": "string",
+      "documentNumber": "string",
+      "externalOrderNumber": "string",
+      "customerOrderNumber": "string",
+      "transactionNumber": "string",
+      "externalOrderId": "string",
+      "date": "string",
+      "netSales": 0,
+      "total": 0,
+      "desiredDeliveryDate": null,
+      "desiredDeliveryDateAsCalendarWeek": false,
+      "reservationDate": null,
+      "editor": "string",
+      "sales": {
+        "id": 0,
+        "name": "string"
+      },
+      "status": "string",
+      "customer": {
+        "id": "string",
+        "number": "string"
+      },
+      "comment": "string",
+      "project": {
+        "id": "string"
+      },
+      "bodyOutroduction": "string",
+      "language": {
+        "iso2": "string"
+      },
+      "financials": {
+        "paymentMethod": {
+          "id": "string"
+        },
+        "currency": "string",
+        "billingAddress": {
+          "name": "string",
+          "department": "string",
+          "subDepartment": "string",
+          "street": "string",
+          "zipCode": "string",
+          "city": "string",
+          "state": "string",
+          "country": "string",
+          "type": "string",
+          "title": "string",
+          "contactPerson": "string",
+          "addressSupplement": "string",
+          "fax": "string",
+          "email": "string",
+          "salutation": "string",
+          "gln": "string",
+          "phoneNumber": "string"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0
+        }
+      },
+      "delivery": {
+        "email": "string",
+        "conditions": "string",
+        "autoShipping": true,
+        "fastLane": false,
+        "desiredDeliveryDate": "string",
+        "shippingMethod": {
+          "id": "string"
+        },
+        "preferredWarehouse": null,
+        "storageCountry": null,
+        "shippingAddress": {
+          "name": "string",
+          "department": "string",
+          "subDepartment": "string",
+          "street": "string",
+          "zipCode": "string",
+          "city": "string",
+          "state": "string",
+          "country": "string",
+          "gln": "string"
+        }
+      },
+      "log": {
+        "createdAt": "string",
+        "createdBy": {
+          "id": "string",
+          "name": "string"
+        }
+      },
+      "isBeingEdited": false,
+      "subsequentDelivery": false,
+      "shippingDateOk": true,
+      "creditLimitOk": true,
+      "shippingLockOk": true,
+      "prepaidOk": true,
+      "postageOk": true,
+      "customerCheckOk": true,
+      "vatOk": true,
+      "stockOk": false
+    }
+  ],
+  "extra": {
+    "totalCount": 0,
+    "page": {
+      "number": 0,
+      "size": 0
+    }
+  }
+}
diff --git a/src/api-tester/expected/Get_View_Address_updated.json b/src/api-tester/expected/Get_View_Address_updated.json
deleted file mode 100644
index de878bc..0000000
--- a/src/api-tester/expected/Get_View_Address_updated.json
+++ /dev/null
@@ -1,25 +0,0 @@
-{
-  "data": {
-    "id": "string",
-    "type": "string",
-    "name": "string",
-    "street": "string",
-    "zip": "string",
-    "city": "string",
-    "country": "string",
-    "state": "string",
-    "addressSupplement": "string",
-    "department": "string",
-    "subDepartment": "string",
-    "contactDetails": {
-      "email": "string",
-      "phone": "string",
-      "gln": null
-    },
-    "deliveryDetails": null
-  },
-  "links": {
-    "self": "string",
-    "customer": "string"
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Credit_Note.json b/src/api-tester/expected/Get_View_Credit_Note.json
deleted file mode 100644
index 1a36bdc..0000000
--- a/src/api-tester/expected/Get_View_Credit_Note.json
+++ /dev/null
@@ -1,71 +0,0 @@
-{
-  "data": {
-    "id": "string",
-    "number": "string",
-    "date": "string",
-    "createdAt": "string",
-    "createdBy": {
-      "name": "string"
-    },
-    "sentAt": null,
-    "sentBy": null,
-    "updatedAt": "string",
-    "grossValue": {
-      "amount": "string",
-      "currency": "string"
-    },
-    "netValue": {
-      "amount": "string",
-      "currency": "string"
-    },
-    "costCenter": "string",
-    "status": "string",
-    "tags": [],
-    "project": {
-      "id": "string",
-      "name": "string"
-    },
-    "customer": {
-      "id": "string",
-      "name": "string"
-    },
-    "externalOrderReference": "string",
-    "devCustomer": "string",
-    "billingAddress": {
-      "name": "string",
-      "contactPerson": "string",
-      "department": "string",
-      "subdivision": "string",
-      "street": "string",
-      "additionalDetails": "string",
-      "city": "string",
-      "zipCode": "string",
-      "country": "string"
-    },
-    "paymentMethodName": "string",
-    "paymentStatus": "string",
-    "gln": "string",
-    "taxation": 0,
-    "positions": [
-      {
-        "id": 0,
-        "position": 0,
-        "salesOrderPosition": {
-          "id": "string"
-        },
-        "createdAt": "string",
-        "productId": 0,
-        "productNumber": "string",
-        "description": "string",
-        "quantity": 0,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "vatCategory": "string",
-        "taxRate": 0,
-        "discount": 0
-      }
-    ]
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Customer.json b/src/api-tester/expected/Get_View_Customer.json
index 13efc33..a4d04b1 100644
--- a/src/api-tester/expected/Get_View_Customer.json
+++ b/src/api-tester/expected/Get_View_Customer.json
@@ -1,25 +1,27 @@
 {
   "data": {
-    "id": "string",
-    "uuid": "string",
-    "customerType": "string",
-    "name": "string",
-    "firstname": "string",
-    "lastname": "string",
-    "title": "string",
-    "salutation": "string",
-    "salutationPhrase": "string",
+    "id": "440",
+    "uuid": "",
+    "number": "16",
+    "deviatingCustomerNumber": "",
+    "customerType": "person",
+    "name": "DimasTest",
+    "firstname": "",
+    "lastname": "",
+    "title": "",
+    "salutation": "other",
+    "salutationPhrase": "",
     "birthdate": null,
-    "department": "string",
-    "subDepartment": "string",
+    "department": "",
+    "subDepartment": "",
     "projects": [
       {
-        "id": "string"
+        "id": "32"
       }
     ],
     "groups": [],
     "contactDetails": {
-      "email": "string",
+      "email": "",
       "phone": null,
       "mobile": null,
       "fax": null,
@@ -28,14 +30,12 @@
     },
     "accountManager": null,
     "salesManager": null,
-    "lead": {
-      "isLead": false,
-      "status": "string"
-    }
+    "isLead": false,
+    "contactPerson": ""
   },
   "links": {
-    "self": "string",
-    "contactPersons": "string",
-    "addresses": "string"
+    "self": "https://636a1d639f14e.xentral.biz/api/v2/customers/440",
+    "contactPersons": "https://636a1d639f14e.xentral.biz/api/customers/440/contactPerson",
+    "addresses": "https://636a1d639f14e.xentral.biz/api/v2/customers/440/addresses"
   }
 }
diff --git a/src/api-tester/expected/Get_View_Customer_updated.json b/src/api-tester/expected/Get_View_Customer_updated.json
deleted file mode 100644
index 259f66d..0000000
--- a/src/api-tester/expected/Get_View_Customer_updated.json
+++ /dev/null
@@ -1,41 +0,0 @@
-{
-  "data": {
-    "id": "string",
-    "uuid": "string",
-    "number": "string",
-    "deviatingCustomerNumber": "string",
-    "customerType": "string",
-    "name": "string",
-    "firstname": "string",
-    "lastname": "string",
-    "title": "string",
-    "salutation": "string",
-    "salutationPhrase": "string",
-    "birthdate": null,
-    "department": "string",
-    "subDepartment": "string",
-    "projects": [
-      {
-        "id": "string"
-      }
-    ],
-    "groups": [],
-    "contactDetails": {
-      "email": "string",
-      "phone": null,
-      "mobile": null,
-      "fax": null,
-      "website": null,
-      "additionalData": []
-    },
-    "accountManager": null,
-    "salesManager": null,
-    "isLead": false,
-    "contactPerson": "string"
-  },
-  "links": {
-    "self": "string",
-    "contactPersons": "string",
-    "addresses": "string"
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Customer_v1.json b/src/api-tester/expected/Get_View_Customer_v1.json
new file mode 100644
index 0000000..a4d04b1
--- /dev/null
+++ b/src/api-tester/expected/Get_View_Customer_v1.json
@@ -0,0 +1,41 @@
+{
+  "data": {
+    "id": "440",
+    "uuid": "",
+    "number": "16",
+    "deviatingCustomerNumber": "",
+    "customerType": "person",
+    "name": "DimasTest",
+    "firstname": "",
+    "lastname": "",
+    "title": "",
+    "salutation": "other",
+    "salutationPhrase": "",
+    "birthdate": null,
+    "department": "",
+    "subDepartment": "",
+    "projects": [
+      {
+        "id": "32"
+      }
+    ],
+    "groups": [],
+    "contactDetails": {
+      "email": "",
+      "phone": null,
+      "mobile": null,
+      "fax": null,
+      "website": null,
+      "additionalData": []
+    },
+    "accountManager": null,
+    "salesManager": null,
+    "isLead": false,
+    "contactPerson": ""
+  },
+  "links": {
+    "self": "https://636a1d639f14e.xentral.biz/api/v2/customers/440",
+    "contactPersons": "https://636a1d639f14e.xentral.biz/api/customers/440/contactPerson",
+    "addresses": "https://636a1d639f14e.xentral.biz/api/v2/customers/440/addresses"
+  }
+}
diff --git a/src/api-tester/expected/Get_View_Delivery_Note.json b/src/api-tester/expected/Get_View_Delivery_Note.json
deleted file mode 100644
index 6cf7c96..0000000
--- a/src/api-tester/expected/Get_View_Delivery_Note.json
+++ /dev/null
@@ -1,227 +0,0 @@
-{
-  "data": {
-    "id": "string",
-    "documentNumber": "string",
-    "salesOrder": {
-      "id": "string"
-    },
-    "customerOrderNumber": "",
-    "updatedAt": "string",
-    "date": "string",
-    "status": "string",
-    "customer": {
-      "id": "string",
-      "number": "string"
-    },
-    "comment": "string",
-    "project": {
-      "id": "string"
-    },
-    "bodyOutroduction": "string",
-    "bodyIntroduction": "string",
-    "internalDesignation": "string",
-    "language": {
-      "iso2": "string"
-    },
-    "delivery": {
-      "shippingMethod": {
-        "id": "string"
-      },
-      "shippingAddress": {
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "gln": "string"
-      },
-      "deliveryTerms": null
-    },
-    "positions": [
-      {
-        "id": "string",
-        "quantity": 0,
-        "comment": "string",
-        "product": {
-          "id": "string",
-          "number": "string",
-          "name": "string",
-          "description": "string",
-          "freeFields": [
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            }
-          ]
-        }
-      }
-    ],
-    "log": {
-      "createdAt": "string",
-      "createdBy": {
-        "id": "string",
-        "name": "string"
-      }
-    },
-    "tags": []
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Invoice.json b/src/api-tester/expected/Get_View_Invoice.json
deleted file mode 100644
index e2c74c9..0000000
--- a/src/api-tester/expected/Get_View_Invoice.json
+++ /dev/null
@@ -1,84 +0,0 @@
-{
-  "data": {
-    "id": "string",
-    "documentNumber": "string",
-    "documentDate": "string",
-    "log": {
-      "createdBy": {
-        "name": "string"
-      },
-      "sentBy": {
-        "name": "string"
-      },
-      "createdAt": "string",
-      "sentAt": null,
-      "updatedAt": "string"
-    },
-    "amountGross": 0,
-    "amountNet": 0,
-    "costCenter": "",
-    "status": "string",
-    "project": {
-      "id": "string",
-      "name": "string",
-      "abbreviation": "string"
-    },
-    "customer": {
-      "id": "string",
-      "name": "string"
-    },
-    "externalOrderReference": "",
-    "devCustomer": "string",
-    "billingAddress": {
-      "id": "string",
-      "name": "string",
-      "contactPerson": "",
-      "department": "",
-      "subdivision": "",
-      "street": "string",
-      "additionalDetails": "",
-      "city": "string",
-      "zipCode": "string",
-      "country": "string",
-      "email": "string"
-    },
-    "paymentMethodName": "string",
-    "paymentStatus": "string",
-    "dunning": "string",
-    "dunningDate": "string",
-    "gln": "",
-    "taxation": 0,
-    "tags": [],
-    "positions": [
-      {
-        "id": 0,
-        "position": 0,
-        "saleOrderPositionId": 0,
-        "createdAt": "string",
-        "productId": 0,
-        "productNumber": "string",
-        "description": "string",
-        "quantity": 0,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "vatCategory": "",
-        "taxRate": 0,
-        "discount": 0
-      }
-    ],
-    "paymentTerms": {
-      "earlyPaymentDiscount": 0,
-      "earlyPaymentDate": "string",
-      "dueDate": "string"
-    },
-    "dunningSettings": {
-      "level": "string",
-      "date": "string",
-      "comment": "",
-      "sent": false
-    },
-    "dunningManualSettings": null
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Liability.json b/src/api-tester/expected/Get_View_Liability.json
deleted file mode 100644
index 3de230a..0000000
--- a/src/api-tester/expected/Get_View_Liability.json
+++ /dev/null
@@ -1,85 +0,0 @@
-{
-  "data": {
-    "id": "string",
-    "documentNumber": "string",
-    "date": "string",
-    "createdAt": "string",
-    "createdBy": {
-      "name": "string"
-    },
-    "updatedAt": "string",
-    "status": "string",
-    "supplier": {
-      "id": "string"
-    },
-    "supplierInvoiceNumber": "string",
-    "receiptDate": "string",
-    "serviceDate": null,
-    "financials": {
-      "amountGross": {
-        "amount": "string",
-        "currency": "string"
-      },
-      "amountNet": {
-        "amount": "string",
-        "currency": "string"
-      },
-      "freightCharge": 0,
-      "taxation": "string",
-      "taxes": {
-        "normalTax": {
-          "rate": 0,
-          "amount": 0
-        },
-        "reducedTax": {
-          "rate": 0,
-          "amount": 0
-        },
-        "customTax1": {
-          "rate": 0,
-          "amount": 0
-        },
-        "customTax2": {
-          "rate": 0,
-          "amount": 0
-        }
-      },
-      "paymentTerms": {
-        "dueDate": "string",
-        "earlyPaymentDate": "string",
-        "earlyPaymentDiscount": 0,
-        "earlyPaymentDiscountAmount": 0
-      },
-      "bookingText": "string",
-      "payment": {
-        "methodName": "string",
-        "paidAmount": 0,
-        "paidOnDate": "string",
-        "discountReceived": 0
-      },
-      "costCenter": "string",
-      "glAccount": "string"
-    },
-    "purchaseOrder": null,
-    "assignedPurchaseOrders": [],
-    "project": {
-      "id": "string"
-    },
-    "accounting": [
-      {
-        "glAccount": "string",
-        "bookingText": "string",
-        "amount": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "tax": {
-          "rate": 0
-        },
-        "costCenter": "string"
-      }
-    ],
-    "positions": [],
-    "purpose": null
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Media.json b/src/api-tester/expected/Get_View_Media.json
deleted file mode 100644
index fc90e70..0000000
--- a/src/api-tester/expected/Get_View_Media.json
+++ /dev/null
@@ -1,31 +0,0 @@
-{
-  "data": [
-    {
-      "id": "string",
-      "product": {
-        "id": "string"
-      },
-      "title": "string",
-      "description": "string",
-      "keyword": "string",
-      "sort": 0,
-      "currentVersion": {
-        "id": "string",
-        "version": 0,
-        "url": "string",
-        "remark": "string",
-        "filename": "string",
-        "size": 0,
-        "updatedAt": "string"
-      },
-      "updatedAt": "string"
-    }
-  ],
-  "extra": {
-    "totalCount": 0,
-    "page": {
-      "number": 0,
-      "size": 0
-    }
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Options_of_a_Product.json b/src/api-tester/expected/Get_View_Options_of_a_Product.json
deleted file mode 100644
index 26f636a..0000000
--- a/src/api-tester/expected/Get_View_Options_of_a_Product.json
+++ /dev/null
@@ -1,71 +0,0 @@
-{
-  "data": [
-    {
-      "id": "string",
-      "name": "string",
-      "sort": 0,
-      "createdAt": "string"
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "sort": 0,
-      "createdAt": "string"
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "sort": 0,
-      "createdAt": "string"
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "sort": 0,
-      "createdAt": "string"
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "sort": 0,
-      "createdAt": "string"
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "sort": 0,
-      "createdAt": "string"
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "sort": 0,
-      "createdAt": "string"
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "sort": 0,
-      "createdAt": "string"
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "sort": 0,
-      "createdAt": "string"
-    },
-    {
-      "id": "string",
-      "name": "string",
-      "sort": 0,
-      "createdAt": "string"
-    }
-  ],
-  "extra": {
-    "totalCount": 0,
-    "page": {
-      "number": 0,
-      "size": 0
-    }
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Product.json b/src/api-tester/expected/Get_View_Product.json
deleted file mode 100644
index 80b70e3..0000000
--- a/src/api-tester/expected/Get_View_Product.json
+++ /dev/null
@@ -1,153 +0,0 @@
-{
-  "data": {
-    "id": "string",
-    "uuid": "string",
-    "name": "string",
-    "description": "string",
-    "shortDescription": null,
-    "number": "string",
-    "project": {
-      "id": "string",
-      "name": "string"
-    },
-    "category": {
-      "id": "string",
-      "name": "string"
-    },
-    "standardSupplier": {
-      "id": "string"
-    },
-    "stockCount": 0,
-    "shopPriceDisplay": "string",
-    "ean": "string",
-    "manufacturer": {
-      "name": "string",
-      "number": null,
-      "url": null
-    },
-    "customsTariffNumber": "string",
-    "options": [],
-    "selectedOptions": [],
-    "variants": [],
-    "isVariant": false,
-    "variantOf": null,
-    "mainVariant": null,
-    "thumbnailUrl": "string",
-    "thumbnailId": "string",
-    "tags": [
-      {
-        "id": "string",
-        "name": "string",
-        "color": "string"
-      }
-    ],
-    "freeFields": [
-      {
-        "id": "string",
-        "name": "string",
-        "value": "string"
-      },
-      {
-        "id": "string",
-        "name": "string",
-        "value": "string"
-      },
-      {
-        "id": "string",
-        "name": "string",
-        "value": "string"
-      },
-      {
-        "id": "string",
-        "name": "string",
-        "value": "string"
-      },
-      {
-        "id": "string",
-        "name": "string",
-        "value": "string"
-      },
-      {
-        "id": "string",
-        "name": "string",
-        "value": "string"
-      }
-    ],
-    "countryOfOrigin": "string",
-    "regionOfOrigin": "string",
-    "internalComment": "string",
-    "isDeleted": false,
-    "measurements": {
-      "weight": {
-        "value": 0,
-        "unit": "string"
-      },
-      "netWeight": {
-        "value": 0,
-        "unit": "string"
-      },
-      "length": {
-        "value": 0,
-        "unit": "string"
-      },
-      "width": {
-        "value": 0,
-        "unit": "string"
-      },
-      "height": {
-        "value": 0,
-        "unit": "string"
-      }
-    },
-    "minimumOrderQuantity": 0,
-    "minimumStorageQuantity": 0,
-    "salesTax": "string",
-    "hasBatches": false,
-    "serialNumbersMode": "string",
-    "hasBestBeforeDate": false,
-    "hasBillOfMaterials": false,
-    "isAssembledJustInTime": false,
-    "isProductionProduct": false,
-    "isExternallyProduced": false,
-    "allowPurchaseFromAllSuppliers": false,
-    "isDisabled": false,
-    "disabledReason": null,
-    "hidePriceOnDocuments": false,
-    "ageRating": null,
-    "isStockItem": true,
-    "defaultStorageLocation": {
-      "id": "string",
-      "designation": "string",
-      "warehouse": {
-        "id": "string",
-        "designation": "string"
-      }
-    },
-    "isStockTakingDisabled": false,
-    "isCustomProduct": false,
-    "hideJustInTimeItemsOnDocuments": false,
-    "markAsSoldOut": false,
-    "markAsInactive": false,
-    "isRemainingQuantity": false,
-    "isShippingCostsProduct": false,
-    "discount": {
-      "isDiscountProduct": false,
-      "discountPercentage": 0
-    },
-    "stockTaking": {
-      "hasStockTakingValue": false,
-      "stockTakingValue": 0
-    },
-    "calculatedPurchasePrice": {
-      "hasCalculatedPurchasePrice": true,
-      "price": {
-        "amount": "string",
-        "currency": "string"
-      }
-    },
-    "unit": {
-      "name": "string"
-    },
-    "updatedAt": "string"
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Purchase_Order.json b/src/api-tester/expected/Get_View_Purchase_Order.json
deleted file mode 100644
index b2944e2..0000000
--- a/src/api-tester/expected/Get_View_Purchase_Order.json
+++ /dev/null
@@ -1,150 +0,0 @@
-{
-  "data": {
-    "id": "string",
-    "date": "string",
-    "project": {
-      "id": "string"
-    },
-    "status": "string",
-    "documentNumber": "string",
-    "supplier": {
-      "id": "string",
-      "number": "string",
-      "customerNumberAtSupplier": "string",
-      "honorific": "string",
-      "name": "string",
-      "department": "string",
-      "subDepartment": "string",
-      "extraAddressLine": "string",
-      "street": "string",
-      "zipCode": "string",
-      "city": "string",
-      "state": "string",
-      "country": "string",
-      "contactPerson": "string",
-      "email": "string",
-      "telephone": "string",
-      "telefax": "string"
-    },
-    "bodyIntroduction": "string",
-    "bodyOutroduction": "string",
-    "requestForQuotation": null,
-    "suppliersOfferReference": "string",
-    "internalDesignation": "string",
-    "language": {
-      "iso2": "string"
-    },
-    "salesOrderConfirmationReference": "string",
-    "isConfirmationRequested": false,
-    "isConfirmed": false,
-    "confirmedVia": "string",
-    "financials": {
-      "paymentMethod": {
-        "id": "string"
-      },
-      "total": {
-        "currency": "string",
-        "amount": "string"
-      },
-      "paymentTerms": {
-        "paymentTargetDiscount": 0,
-        "paymentTargetDays": 0,
-        "paymentTargetDiscountDays": 0,
-        "paymentTargetDiscountAmount": 0,
-        "isPaymentTargetDiscountApplied": false
-      },
-      "costCenter": "string",
-      "tax": {
-        "taxation": "string",
-        "vatId": "string",
-        "taxDisplay": "string"
-      }
-    },
-    "delivery": {
-      "deliveryTerms": null,
-      "hasDifferentDeliveryAddress": false,
-      "deliveryAddress": {
-        "honorific": "string",
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "extraAddressLine": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "contactPerson": "string"
-      },
-      "dates": {
-        "desiredDeliveryDate": null,
-        "confirmedDeliveryDate": null
-      }
-    },
-    "formatting": {
-      "hideLetterHead": false,
-      "hidePrices": false,
-      "hideProductNumbers": false,
-      "showLongProductNumbers": false,
-      "hideProductDescriptions": false,
-      "showOwnProductNumberInColumn": false
-    },
-    "internalComment": "string",
-    "liabilitiesInfo": "string",
-    "positions": [
-      {
-        "id": "string",
-        "project": {
-          "id": "string"
-        },
-        "product": {
-          "id": "string"
-        },
-        "name": "string",
-        "description": "string",
-        "quantity": 0,
-        "delivered": 0,
-        "salesOrderPosition": null,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "tax": {
-          "vatCategory": "string",
-          "taxText": "string",
-          "rate": 0
-        }
-      },
-      {
-        "id": "string",
-        "project": {
-          "id": "string"
-        },
-        "product": {
-          "id": "string"
-        },
-        "name": "string",
-        "description": "string",
-        "quantity": 0,
-        "delivered": 0,
-        "salesOrderPosition": null,
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "tax": {
-          "vatCategory": "string",
-          "taxText": "string",
-          "rate": 0
-        }
-      }
-    ],
-    "log": {
-      "createdAt": "string",
-      "isSent": false,
-      "sentAt": null,
-      "sentBy": "string",
-      "sentVia": "string"
-    }
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Return.json b/src/api-tester/expected/Get_View_Return.json
deleted file mode 100644
index 594d960..0000000
--- a/src/api-tester/expected/Get_View_Return.json
+++ /dev/null
@@ -1,39 +0,0 @@
-{
-  "data": {
-    "id": "string",
-    "date": "string",
-    "documentNumber": "string",
-    "progress": "string",
-    "shippingMethod": {
-      "id": 0,
-      "name": "string"
-    },
-    "project": {
-      "id": 0,
-      "name": "string"
-    },
-    "status": "string",
-    "bodyOutroduction": "string",
-    "internalComment": "string",
-    "salesOrder": {
-      "id": "string"
-    },
-    "positions": [
-      {
-        "id": "string",
-        "salesOrderPosition": {
-          "id": "string"
-        },
-        "product": {
-          "id": "string",
-          "number": "string",
-          "name": "string"
-        },
-        "quantity": 0,
-        "returnReason": {
-          "designation": "string"
-        }
-      }
-    ]
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Sales_Order_updated_v1.json b/src/api-tester/expected/Get_View_Sales_Order_updated_v1.json
deleted file mode 100644
index bdde2e2..0000000
--- a/src/api-tester/expected/Get_View_Sales_Order_updated_v1.json
+++ /dev/null
@@ -1,321 +0,0 @@
-{
-  "data": {
-    "id": "string",
-    "documentNumber": "string",
-    "externalOrderNumber": "string",
-    "customerOrderNumber": "string",
-    "transactionNumber": "string",
-    "externalOrderId": "string",
-    "autoCreateDocuments": "string",
-    "date": "string",
-    "earliestFulfillmentDate": null,
-    "desiredDeliveryDate": null,
-    "desiredDeliveryDateCw": false,
-    "reservationDate": null,
-    "editor": "string",
-    "sales": {
-      "id": null,
-      "name": null
-    },
-    "status": "string",
-    "customer": {
-      "id": "string",
-      "number": "string"
-    },
-    "comment": "string",
-    "project": {
-      "id": "string"
-    },
-    "bodyOutroduction": "string",
-    "bodyIntroduction": "string",
-    "internalDesignation": "string",
-    "language": {
-      "iso2": "string"
-    },
-    "financials": {
-      "paymentMethod": {
-        "id": "string"
-      },
-      "currency": "string",
-      "costCenter": null,
-      "billingAddress": {
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "type": "string",
-        "title": "string",
-        "contactPerson": "string",
-        "addressSupplement": "string",
-        "fax": "string",
-        "email": "string",
-        "salutation": "string",
-        "gln": "string",
-        "phoneNumber": "string"
-      },
-      "paymentTerms": {
-        "paymentTargetDiscount": 0,
-        "paymentTargetDays": 0,
-        "paymentTargetDiscountDays": 0
-      }
-    },
-    "delivery": {
-      "email": "string",
-      "conditions": "string",
-      "autoShipping": true,
-      "fastLane": false,
-      "shippingMethod": {
-        "id": "string"
-      },
-      "deliveryTerms": null,
-      "shippingAddress": {
-        "name": "string",
-        "department": "string",
-        "subDepartment": "string",
-        "street": "string",
-        "zipCode": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string",
-        "gln": "string"
-      },
-      "preferredWarehouse": null,
-      "storageCountry": null
-    },
-    "netSales": {
-      "amount": "string",
-      "currency": "string"
-    },
-    "total": {
-      "amount": "string",
-      "currency": "string"
-    },
-    "positions": [
-      {
-        "id": "string",
-        "quantity": 0,
-        "discount": 0,
-        "comment": "string",
-        "product": {
-          "id": "string",
-          "number": "string",
-          "name": "string",
-          "description": "string",
-          "freeFields": [
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            },
-            {
-              "id": "string",
-              "value": "string"
-            }
-          ]
-        },
-        "tax": {
-          "vatCategory": "string",
-          "taxText": "string",
-          "effectiveVatRate": 0
-        },
-        "price": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "netRevenueSingle": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "netRevenueTotal": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "grossRevenueSingle": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "grossRevenueTotal": {
-          "amount": "string",
-          "currency": "string"
-        },
-        "webId": "string",
-        "hasChildren": false,
-        "parent": null,
-        "sort": 0
-      }
-    ],
-    "log": {
-      "createdAt": "string",
-      "createdBy": {
-        "id": "string",
-        "name": "string"
-      }
-    },
-    "tags": [
-      {
-        "id": "string",
-        "type": "string",
-        "title": "string"
-      }
-    ],
-    "salesChannel": {
-      "id": "string",
-      "name": "string"
-    }
-  }
-}
diff --git a/src/api-tester/expected/Get_View_Suppliers.json b/src/api-tester/expected/Get_View_Suppliers.json
index 8bb983f..ace2d72 100644
--- a/src/api-tester/expected/Get_View_Suppliers.json
+++ b/src/api-tester/expected/Get_View_Suppliers.json
@@ -1,18 +1 @@
-{
-  "data": {
-    "id": "string",
-    "type": "string",
-    "general": {
-      "name": "string",
-      "address": {
-        "note": "string",
-        "street": "string",
-        "zip": "string",
-        "city": "string",
-        "state": "string",
-        "country": "string"
-      }
-    },
-    "tags": []
-  }
-}
+"string"
diff --git a/src/api-tester/responses/Delete_Product.json b/src/api-tester/responses/Delete_Product.json
new file mode 100644
index 0000000..19765bd
--- /dev/null
+++ b/src/api-tester/responses/Delete_Product.json
@@ -0,0 +1 @@
+null
diff --git a/src/api-tester/responses/Get_List_Customers.json b/src/api-tester/responses/Get_List_Customers.json
new file mode 100644
index 0000000..13e0fb0
--- /dev/null
+++ b/src/api-tester/responses/Get_List_Customers.json
@@ -0,0 +1,463 @@
+{
+  "data": [
+    {
+      "id": "5",
+      "uuid": "",
+      "number": "10002",
+      "deviatingCustomerNumber": "666",
+      "customerType": "person",
+      "name": "Kassen Mitarbeiter",
+      "firstname": "",
+      "lastname": "",
+      "title": "",
+      "salutation": null,
+      "birthdate": null,
+      "department": "",
+      "subDepartment": "",
+      "projects": [
+        {
+          "id": "3"
+        }
+      ],
+      "contactDetails": {
+        "email": "",
+        "phone": null,
+        "fax": null,
+        "website": null,
+        "additionalData": []
+      },
+      "accountManager": null,
+      "salesManager": {
+        "id": "1"
+      },
+      "isLead": false,
+      "contactPerson": ""
+    },
+    {
+      "id": "7",
+      "uuid": "",
+      "number": "10003",
+      "deviatingCustomerNumber": "78888",
+      "customerType": "person",
+      "name": "Testkunde ABC",
+      "firstname": "",
+      "lastname": "",
+      "title": "",
+      "salutation": null,
+      "birthdate": null,
+      "department": "",
+      "subDepartment": "",
+      "projects": [
+        {
+          "id": "1"
+        },
+        {
+          "id": "53"
+        }
+      ],
+      "contactDetails": {
+        "email": "",
+        "phone": "243523452452",
+        "fax": "234523452",
+        "website": null,
+        "additionalData": []
+      },
+      "accountManager": null,
+      "salesManager": {
+        "id": "5"
+      },
+      "isLead": false,
+      "contactPerson": ""
+    },
+    {
+      "id": "8",
+      "uuid": "",
+      "number": "10004",
+      "deviatingCustomerNumber": "123",
+      "customerType": "person",
+      "name": "Christian Hofmann",
+      "firstname": "",
+      "lastname": "",
+      "title": "",
+      "salutation": "mr",
+      "birthdate": null,
+      "department": "",
+      "subDepartment": "",
+      "projects": [
+        {
+          "id": "1"
+        }
+      ],
+      "contactDetails": {
+        "email": "christian@digitalxl.de",
+        "phone": "+491728317513",
+        "fax": null,
+        "website": null,
+        "additionalData": []
+      },
+      "accountManager": null,
+      "salesManager": null,
+      "isLead": false,
+      "contactPerson": ""
+    },
+    {
+      "id": "9",
+      "uuid": "",
+      "number": "10023",
+      "deviatingCustomerNumber": "777",
+      "customerType": "person",
+      "name": "EDI Testkunde Pascal mit GLN 4304768000002",
+      "firstname": "",
+      "lastname": "",
+      "title": "",
+      "salutation": "mr",
+      "birthdate": null,
+      "department": "",
+      "subDepartment": "",
+      "projects": [
+        {
+          "id": "0"
+        }
+      ],
+      "contactDetails": {
+        "email": "test@test.de",
+        "phone": null,
+        "fax": null,
+        "website": null,
+        "additionalData": []
+      },
+      "accountManager": null,
+      "salesManager": {
+        "id": "1"
+      },
+      "isLead": false,
+      "contactPerson": ""
+    },
+    {
+      "id": "13",
+      "uuid": "",
+      "number": "10005",
+      "deviatingCustomerNumber": "777",
+      "customerType": "person",
+      "name": "Kunde AT",
+      "firstname": "",
+      "lastname": "",
+      "title": "",
+      "salutation": null,
+      "birthdate": null,
+      "department": "",
+      "subDepartment": "",
+      "projects": [
+        {
+          "id": "1"
+        }
+      ],
+      "contactDetails": {
+        "email": "",
+        "phone": null,
+        "fax": null,
+        "website": null,
+        "additionalData": []
+      },
+      "accountManager": null,
+      "salesManager": {
+        "id": "1"
+      },
+      "isLead": false,
+      "contactPerson": ""
+    },
+    {
+      "id": "14",
+      "uuid": "",
+      "number": "10006",
+      "deviatingCustomerNumber": "",
+      "customerType": "person",
+      "name": "Kunde mit US$ Währung",
+      "firstname": "",
+      "lastname": "",
+      "title": "",
+      "salutation": null,
+      "birthdate": null,
+      "department": "",
+      "subDepartment": "",
+      "projects": [
+        {
+          "id": "0"
+        }
+      ],
+      "contactDetails": {
+        "email": "",
+        "phone": null,
+        "fax": null,
+        "website": null,
+        "additionalData": []
+      },
+      "accountManager": null,
+      "salesManager": {
+        "id": "5"
+      },
+      "isLead": false,
+      "contactPerson": ""
+    },
+    {
+      "id": "15",
+      "uuid": "",
+      "number": "10007",
+      "deviatingCustomerNumber": "666",
+      "customerType": "person",
+      "name": "Lawn Care",
+      "firstname": "",
+      "lastname": "",
+      "title": null,
+      "salutation": null,
+      "birthdate": null,
+      "department": "",
+      "subDepartment": "",
+      "projects": [
+        {
+          "id": "1"
+        }
+      ],
+      "contactDetails": {
+        "email": "lawncare.swiss@gmail.com",
+        "phone": "01732652905",
+        "fax": null,
+        "website": null,
+        "additionalData": []
+      },
+      "accountManager": null,
+      "salesManager": null,
+      "isLead": false,
+      "contactPerson": "Patrick Raschle"
+    },
+    {
+      "id": "17",
+      "uuid": "",
+      "number": "10008",
+      "deviatingCustomerNumber": "78888",
+      "customerType": "person",
+      "name": "Ricki",
+      "firstname": "",
+      "lastname": "",
+      "title": "",
+      "salutation": null,
+      "birthdate": null,
+      "department": "",
+      "subDepartment": "",
+      "projects": [
+        {
+          "id": "1"
+        },
+        {
+          "id": "2"
+        },
+        {
+          "id": "3"
+        },
+        {
+          "id": "4"
+        },
+        {
+          "id": "5"
+        },
+        {
+          "id": "6"
+        },
+        {
+          "id": "9"
+        },
+        {
+          "id": "12"
+        },
+        {
+          "id": "17"
+        },
+        {
+          "id": "18"
+        },
+        {
+          "id": "19"
+        },
+        {
+          "id": "20"
+        },
+        {
+          "id": "21"
+        },
+        {
+          "id": "22"
+        },
+        {
+          "id": "23"
+        },
+        {
+          "id": "24"
+        },
+        {
+          "id": "25"
+        },
+        {
+          "id": "26"
+        },
+        {
+          "id": "27"
+        },
+        {
+          "id": "28"
+        },
+        {
+          "id": "29"
+        },
+        {
+          "id": "30"
+        },
+        {
+          "id": "31"
+        },
+        {
+          "id": "32"
+        },
+        {
+          "id": "33"
+        },
+        {
+          "id": "39"
+        },
+        {
+          "id": "40"
+        },
+        {
+          "id": "41"
+        },
+        {
+          "id": "42"
+        },
+        {
+          "id": "43"
+        },
+        {
+          "id": "44"
+        },
+        {
+          "id": "45"
+        },
+        {
+          "id": "46"
+        },
+        {
+          "id": "47"
+        },
+        {
+          "id": "48"
+        },
+        {
+          "id": "49"
+        },
+        {
+          "id": "50"
+        },
+        {
+          "id": "51"
+        },
+        {
+          "id": "52"
+        },
+        {
+          "id": "53"
+        },
+        {
+          "id": "54"
+        },
+        {
+          "id": "55"
+        }
+      ],
+      "contactDetails": {
+        "email": "",
+        "phone": null,
+        "fax": null,
+        "website": null,
+        "additionalData": []
+      },
+      "accountManager": null,
+      "salesManager": {
+        "id": "1"
+      },
+      "isLead": false,
+      "contactPerson": ""
+    },
+    {
+      "id": "18",
+      "uuid": "",
+      "number": "19329",
+      "deviatingCustomerNumber": "777",
+      "customerType": "company",
+      "name": "T4D",
+      "firstname": "",
+      "lastname": "",
+      "title": "",
+      "salutation": "company",
+      "birthdate": null,
+      "department": "",
+      "subDepartment": "",
+      "projects": [
+        {
+          "id": "1"
+        }
+      ],
+      "contactDetails": {
+        "email": "",
+        "phone": null,
+        "fax": null,
+        "website": null,
+        "additionalData": []
+      },
+      "accountManager": null,
+      "salesManager": {
+        "id": "1"
+      },
+      "isLead": false,
+      "contactPerson": ""
+    },
+    {
+      "id": "19",
+      "uuid": "",
+      "number": "10009",
+      "deviatingCustomerNumber": "",
+      "customerType": "person",
+      "name": "Laufkundschaft",
+      "firstname": "",
+      "lastname": "",
+      "title": "",
+      "salutation": "other",
+      "birthdate": null,
+      "department": "",
+      "subDepartment": "",
+      "projects": [
+        {
+          "id": "1"
+        }
+      ],
+      "contactDetails": {
+        "email": "",
+        "phone": null,
+        "fax": null,
+        "website": null,
+        "additionalData": []
+      },
+      "accountManager": null,
+      "salesManager": {
+        "id": "1"
+      },
+      "isLead": false,
+      "contactPerson": ""
+    }
+  ],
+  "extra": {
+    "totalCount": 256,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/api-tester/responses/Get_List_Invoices.json b/src/api-tester/responses/Get_List_Invoices.json
new file mode 100644
index 0000000..779f611
--- /dev/null
+++ b/src/api-tester/responses/Get_List_Invoices.json
@@ -0,0 +1,411 @@
+{
+  "data": [
+    {
+      "id": "1",
+      "number": "400000",
+      "date": "2023-01-23T00:00:00+01:00",
+      "status": "partialCancellation",
+      "tags": [],
+      "address": {
+        "name": "Test Kunde",
+        "customerNumber": "10004",
+        "country": "DE"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt",
+        "abbreviation": "STANDARD"
+      },
+      "payment": {
+        "method": "paymentInAdvance",
+        "status": "paid",
+        "debit": {
+          "amount": "1.90",
+          "currency": "EUR"
+        },
+        "balance": {
+          "amount": "46.30",
+          "currency": "EUR"
+        }
+      },
+      "updatedBy": {
+        "id": "28"
+      },
+      "updatedAt": "2024-12-10T15:24:58+01:00",
+      "additionalFields": [],
+      "dunningSettings": {
+        "level": "reminder1",
+        "date": "2023-04-26",
+        "comment": "",
+        "sent": false
+      }
+    },
+    {
+      "id": "2",
+      "number": "400001",
+      "date": "2023-01-23T00:00:00+01:00",
+      "status": "canceled",
+      "tags": [],
+      "address": {
+        "name": "Test Kunde",
+        "customerNumber": "10004",
+        "country": "DE"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt",
+        "abbreviation": "STANDARD"
+      },
+      "payment": {
+        "method": "paymentInAdvance",
+        "status": "paid",
+        "debit": {
+          "amount": "0.95",
+          "currency": "EUR"
+        },
+        "balance": {
+          "amount": "0.00",
+          "currency": "EUR"
+        }
+      },
+      "updatedBy": {
+        "id": "4"
+      },
+      "updatedAt": "2023-03-09T11:51:26+01:00",
+      "additionalFields": [],
+      "dunningSettings": {
+        "level": "reminder1",
+        "date": "2023-05-17",
+        "comment": "Automatisch als bezahlt markiert am: 17.05.2023",
+        "sent": false
+      }
+    },
+    {
+      "id": "3",
+      "number": "400002",
+      "date": "2023-01-25T00:00:00+01:00",
+      "status": "partialCancellation",
+      "tags": [],
+      "address": {
+        "name": "Test Kunde",
+        "customerNumber": "10004",
+        "country": "DE"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt",
+        "abbreviation": "STANDARD"
+      },
+      "payment": {
+        "method": "paymentInAdvance",
+        "status": "paid",
+        "debit": {
+          "amount": "6.60",
+          "currency": "EUR"
+        },
+        "balance": {
+          "amount": "0.00",
+          "currency": "EUR"
+        }
+      },
+      "updatedBy": {
+        "id": "1"
+      },
+      "updatedAt": "2024-01-31T18:21:10+01:00",
+      "additionalFields": [],
+      "dunningSettings": {
+        "level": "reminder1",
+        "date": "2023-05-17",
+        "comment": "Automatisch als bezahlt markiert am: 17.05.2023",
+        "sent": false
+      }
+    },
+    {
+      "id": "4",
+      "number": "400003",
+      "date": "2023-01-25T00:00:00+01:00",
+      "status": "sent",
+      "tags": [],
+      "address": {
+        "name": "Test Kunde",
+        "customerNumber": "10004",
+        "country": "DE"
+      },
+      "project": {
+        "id": "3",
+        "name": "Kasse",
+        "abbreviation": "KASSE"
+      },
+      "payment": {
+        "method": "invoice",
+        "status": "pending",
+        "debit": {
+          "amount": "15.00",
+          "currency": "EUR"
+        },
+        "balance": {
+          "amount": "-15.00",
+          "currency": "EUR"
+        }
+      },
+      "updatedBy": {
+        "id": ""
+      },
+      "updatedAt": null,
+      "additionalFields": [],
+      "dunningSettings": {
+        "level": "reminder1",
+        "date": "2025-06-03",
+        "comment": "",
+        "sent": false
+      }
+    },
+    {
+      "id": "5",
+      "number": "400004",
+      "date": "2023-01-25T00:00:00+01:00",
+      "status": "sent",
+      "tags": [],
+      "address": {
+        "name": "Test Kunde",
+        "customerNumber": "10004",
+        "country": "DE"
+      },
+      "project": {
+        "id": "3",
+        "name": "Kasse",
+        "abbreviation": "KASSE"
+      },
+      "payment": {
+        "method": "invoice",
+        "status": "pending",
+        "debit": {
+          "amount": "15.00",
+          "currency": "EUR"
+        },
+        "balance": {
+          "amount": "-15.00",
+          "currency": "EUR"
+        }
+      },
+      "updatedBy": {
+        "id": ""
+      },
+      "updatedAt": null,
+      "additionalFields": [],
+      "dunningSettings": {
+        "level": "reminder1",
+        "date": "2025-06-03",
+        "comment": "",
+        "sent": false
+      }
+    },
+    {
+      "id": "6",
+      "number": "400005",
+      "date": "2023-01-26T00:00:00+01:00",
+      "status": "canceled",
+      "tags": [],
+      "address": {
+        "name": "Karlo Kunde GmbH & Co. KG",
+        "customerNumber": "10000",
+        "country": "DE"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt",
+        "abbreviation": "STANDARD"
+      },
+      "payment": {
+        "method": "invoice",
+        "status": "partlyPaid",
+        "debit": {
+          "amount": "11.90",
+          "currency": "EUR"
+        },
+        "balance": {
+          "amount": "-5.95",
+          "currency": "EUR"
+        }
+      },
+      "updatedBy": {
+        "id": "62"
+      },
+      "updatedAt": "2024-12-19T15:41:27+01:00",
+      "additionalFields": [],
+      "dunningSettings": {
+        "level": "reminder1",
+        "date": "2025-06-03",
+        "comment": "",
+        "sent": false
+      }
+    },
+    {
+      "id": "7",
+      "number": "400006",
+      "date": "2023-01-26T00:00:00+01:00",
+      "status": "sent",
+      "tags": [],
+      "address": {
+        "name": "Karlo Kunde GmbH & Co. KG",
+        "customerNumber": "10000",
+        "country": "DE"
+      },
+      "project": {
+        "id": "4",
+        "name": "Knut Test",
+        "abbreviation": "DM"
+      },
+      "payment": {
+        "method": "invoice",
+        "status": "pending",
+        "debit": {
+          "amount": "11.90",
+          "currency": "EUR"
+        },
+        "balance": {
+          "amount": "-11.90",
+          "currency": "EUR"
+        }
+      },
+      "updatedBy": {
+        "id": "4"
+      },
+      "updatedAt": "2023-01-26T08:15:20+01:00",
+      "additionalFields": [],
+      "dunningSettings": {
+        "level": "reminder1",
+        "date": "2025-06-03",
+        "comment": "",
+        "sent": false
+      }
+    },
+    {
+      "id": "8",
+      "number": "400007",
+      "date": "2023-01-30T00:00:00+01:00",
+      "status": "canceled",
+      "tags": [],
+      "address": {
+        "name": "Karlo Kunde GmbH & Co. KG",
+        "customerNumber": "10000",
+        "country": "DE"
+      },
+      "project": {
+        "id": "4",
+        "name": "Knut Test",
+        "abbreviation": "DM"
+      },
+      "payment": {
+        "method": "invoice",
+        "status": "paid",
+        "debit": {
+          "amount": "11.90",
+          "currency": "EUR"
+        },
+        "balance": {
+          "amount": "0.00",
+          "currency": "EUR"
+        }
+      },
+      "updatedBy": {
+        "id": "4"
+      },
+      "updatedAt": null,
+      "additionalFields": [],
+      "dunningSettings": {
+        "level": "reminder1",
+        "date": "2023-08-01",
+        "comment": "",
+        "sent": false
+      }
+    },
+    {
+      "id": "9",
+      "number": "400008",
+      "date": "2023-01-30T00:00:00+01:00",
+      "status": "sent",
+      "tags": [],
+      "address": {
+        "name": "Karlo Kunde GmbH & Co. KG",
+        "customerNumber": "10000",
+        "country": "DE"
+      },
+      "project": {
+        "id": "4",
+        "name": "Knut Test",
+        "abbreviation": "DM"
+      },
+      "payment": {
+        "method": "invoice",
+        "status": "pending",
+        "debit": {
+          "amount": "23.80",
+          "currency": "EUR"
+        },
+        "balance": {
+          "amount": "-23.80",
+          "currency": "EUR"
+        }
+      },
+      "updatedBy": {
+        "id": "4"
+      },
+      "updatedAt": null,
+      "additionalFields": [],
+      "dunningSettings": {
+        "level": "reminder1",
+        "date": "2025-06-03",
+        "comment": "",
+        "sent": false
+      }
+    },
+    {
+      "id": "10",
+      "number": "400009",
+      "date": "2023-01-31T00:00:00+01:00",
+      "status": "sent",
+      "tags": [],
+      "address": {
+        "name": "Karlo Kunde GmbH & Co. KG",
+        "customerNumber": "10000",
+        "country": "DE"
+      },
+      "project": {
+        "id": "4",
+        "name": "Knut Test",
+        "abbreviation": "DM"
+      },
+      "payment": {
+        "method": "invoice",
+        "status": "pending",
+        "debit": {
+          "amount": "17.85",
+          "currency": "EUR"
+        },
+        "balance": {
+          "amount": "-17.85",
+          "currency": "EUR"
+        }
+      },
+      "updatedBy": {
+        "id": "4"
+      },
+      "updatedAt": null,
+      "additionalFields": [],
+      "dunningSettings": {
+        "level": "reminder1",
+        "date": "2025-06-03",
+        "comment": "",
+        "sent": false
+      }
+    }
+  ],
+  "extra": {
+    "totalCount": 666,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/api-tester/responses/Get_List_Products.json b/src/api-tester/responses/Get_List_Products.json
new file mode 100644
index 0000000..9bd4732
--- /dev/null
+++ b/src/api-tester/responses/Get_List_Products.json
@@ -0,0 +1,1427 @@
+{
+  "data": [
+    {
+      "id": "1752",
+      "uuid": "019734e6-2680-7ef7-a736-1a04f4074375",
+      "name": "Mahle X20 Innenlager TCS BB92;inkl. Drehmoment und Trittfrequenzsensor;",
+      "description": "Mahle X20 Innenlager TCS BB92;inkl. Drehmoment und Trittfrequenzsensor;",
+      "shortDescription": null,
+      "number": "283",
+      "project": {
+        "id": "45",
+        "name": "veloxl_test"
+      },
+      "category": null,
+      "standardSupplier": {
+        "id": "335"
+      },
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "2.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "135.6800"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "161.4592"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "168.0300"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "199.9557"
+      },
+      "shopPriceDisplay": "199.95",
+      "ean": "8435635800664",
+      "manufacturerName": "",
+      "manufacturerNumber": "41010400002000",
+      "customsTariffNumber": "",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": "https://636a1d639f14e.xentral.biz/index.php?module=artikel&action=thumbnail&id=1752&bildvorschau=17401_100_100",
+      "thumbnailId": "17401",
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": true,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-06-03T10:46:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Mahle X20 Innenlager TCS BB92;inkl. Drehmoment und Trittfrequenzsensor;",
+          "shortDescription": "",
+          "description": "Mahle X20 Innenlager TCS BB92;inkl. Drehmoment und Trittfrequenzsensor;",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1751",
+      "uuid": "019734e6-1ddd-72f2-bdaa-b3bfda5a2a38",
+      "name": "Mahle X20 Innenlager TCS PF 46-30;inkl. Drehmoment und Trittfrequenzsensor;",
+      "description": "Mahle X20 Innenlager TCS PF 46-30;inkl. Drehmoment und Trittfrequenzsensor;",
+      "shortDescription": null,
+      "number": "282",
+      "project": {
+        "id": "45",
+        "name": "veloxl_test"
+      },
+      "category": null,
+      "standardSupplier": {
+        "id": "335"
+      },
+      "stockCount": 5,
+      "stockStats": {
+        "purchasedCount": "2.0000",
+        "totalCount": "5.0000",
+        "availableCount": "5.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "145.8600"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "173.5734"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "180.6300"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "214.9497"
+      },
+      "shopPriceDisplay": "214.95",
+      "ean": "8435635800626",
+      "manufacturerName": "",
+      "manufacturerNumber": "41010400001000",
+      "customsTariffNumber": "",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": "https://636a1d639f14e.xentral.biz/index.php?module=artikel&action=thumbnail&id=1751&bildvorschau=17400_100_100",
+      "thumbnailId": "17400",
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": true,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-06-03T10:46:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Mahle X20 Innenlager TCS PF 46-30;inkl. Drehmoment und Trittfrequenzsensor;",
+          "shortDescription": "",
+          "description": "Mahle X20 Innenlager TCS PF 46-30;inkl. Drehmoment und Trittfrequenzsensor;",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1750",
+      "uuid": "019734ce-0cd4-7e8c-9ad2-0838a85b4a12",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000651",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-06-03T10:15:09+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1747",
+      "uuid": "01972fa7-b33a-7651-be08-603fb1c3b1ce",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000650",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-06-02T10:27:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1746",
+      "uuid": "01972161-6115-7fc4-b302-c73e02dbe7f2",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000649",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-30T15:48:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1745",
+      "uuid": "019715e7-f2d4-79f9-a806-ccf32ff0d432",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000648",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-28T10:04:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1744",
+      "uuid": "019710c1-91a3-70e1-932e-3d42099b6c75",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000647",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-27T10:18:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1743",
+      "uuid": "01970d22-ba57-7ded-a797-f29170eb7b8f",
+      "name": "7iDP Handschuh Transition;S, grün;",
+      "description": "7iDP Handschuh Transition;S, grün;",
+      "shortDescription": null,
+      "number": "279",
+      "project": {
+        "id": "45",
+        "name": "veloxl_test"
+      },
+      "category": null,
+      "standardSupplier": {
+        "id": "335"
+      },
+      "stockCount": 10,
+      "stockStats": {
+        "purchasedCount": "2.0000",
+        "totalCount": "10.0000",
+        "availableCount": "10.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "8.9900"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "10.6981"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": "24.95",
+      "ean": "5055356349322",
+      "manufacturerName": "",
+      "manufacturerNumber": "7308-06-008",
+      "customsTariffNumber": "",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": "https://636a1d639f14e.xentral.biz/index.php?module=artikel&action=thumbnail&id=1743&bildvorschau=17397_100_100",
+      "thumbnailId": "17397",
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": true,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-26T17:15:10+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "7iDP Handschuh Transition;S, grün;",
+          "shortDescription": "",
+          "description": "7iDP Handschuh Transition;S, grün;",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1742",
+      "uuid": "01970c00-5ff9-7713-92df-e7020dc4bd77",
+      "name": "7iDP Handschuh Transition;S, blau;",
+      "description": "7iDP Handschuh Transition;S, blau;",
+      "shortDescription": null,
+      "number": "278",
+      "project": {
+        "id": "45",
+        "name": "veloxl_test"
+      },
+      "category": null,
+      "standardSupplier": {
+        "id": "335"
+      },
+      "stockCount": 5,
+      "stockStats": {
+        "purchasedCount": "6.0000",
+        "totalCount": "5.0000",
+        "availableCount": "5.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "8.9900"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "10.6981"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": "24.95",
+      "ean": "5055356349261",
+      "manufacturerName": "",
+      "manufacturerNumber": "7308-03-008",
+      "customsTariffNumber": "",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": "https://636a1d639f14e.xentral.biz/index.php?module=artikel&action=thumbnail&id=1742&bildvorschau=17388_100_100",
+      "thumbnailId": "17388",
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": true,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-26T12:05:08+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "7iDP Handschuh Transition;S, blau;",
+          "shortDescription": "",
+          "description": "7iDP Handschuh Transition;S, blau;",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1741",
+      "uuid": "01970b9b-368e-7f1c-9e59-9552555a3699",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000646",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-26T10:01:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    }
+  ],
+  "extra": {
+    "totalCount": 1164,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/api-tester/responses/Get_List_Projects.json b/src/api-tester/responses/Get_List_Projects.json
new file mode 100644
index 0000000..5291fad
--- /dev/null
+++ b/src/api-tester/responses/Get_List_Projects.json
@@ -0,0 +1,541 @@
+{
+  "data": [
+    {
+      "id": "1",
+      "name": "Standard Projekt",
+      "keyName": "STANDARD",
+      "description": "Standard Projekt",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteWarehouseScan",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": "1"
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": "1"
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "2",
+      "name": "Golfshop",
+      "keyName": "GOLFSHOP",
+      "description": "Standard Projekt",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteWarehouse",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "3",
+      "name": "Kasse",
+      "keyName": "KASSE",
+      "description": "Standard Projekt",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "orderPos",
+      "pickingProcess": "shipmentNoteScan",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "4",
+      "name": "Knut Test",
+      "keyName": "DM",
+      "description": "",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteWarehouse",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "5",
+      "name": "Paul",
+      "keyName": "PR",
+      "description": "",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteWarehouseScan",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": "3"
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "6",
+      "name": "test",
+      "keyName": "TEST",
+      "description": "",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteWarehouse",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "9",
+      "name": "OneDayBaby",
+      "keyName": "STANDARD-1",
+      "description": "Standard Projekt",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNote",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "12",
+      "name": "POS",
+      "keyName": "POS",
+      "description": "",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "order",
+      "pickingProcess": "shipmentNote",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "17",
+      "name": "Pascal",
+      "keyName": "PASCAL",
+      "description": "",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "orderPos",
+      "pickingProcess": "shipmentNoteWarehouseScan",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": ""
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": ""
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    },
+    {
+      "id": "18",
+      "name": "Christian",
+      "keyName": "CH-1",
+      "description": "Standard Projekt",
+      "currency": "EUR",
+      "normalTaxRate": 19,
+      "reducedTaxRate": 7,
+      "storageProcess": "none",
+      "pickingProcess": "shipmentNoteScan",
+      "freeFields": [
+        {
+          "id": "1",
+          "value": "0"
+        },
+        {
+          "id": "2",
+          "value": ""
+        },
+        {
+          "id": "3",
+          "value": ""
+        },
+        {
+          "id": "4",
+          "value": ""
+        },
+        {
+          "id": "5",
+          "value": "0"
+        },
+        {
+          "id": "6",
+          "value": ""
+        },
+        {
+          "id": "7",
+          "value": ""
+        },
+        {
+          "id": "8",
+          "value": ""
+        },
+        {
+          "id": "9",
+          "value": ""
+        },
+        {
+          "id": "10",
+          "value": ""
+        }
+      ]
+    }
+  ],
+  "extra": {
+    "totalCount": 42,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/api-tester/responses/Get_List_Purchase_Orders.json b/src/api-tester/responses/Get_List_Purchase_Orders.json
new file mode 100644
index 0000000..5e52061
--- /dev/null
+++ b/src/api-tester/responses/Get_List_Purchase_Orders.json
@@ -0,0 +1,941 @@
+{
+  "data": [
+    {
+      "id": "1",
+      "date": "2023-01-13",
+      "project": {
+        "id": "33"
+      },
+      "status": "created",
+      "documentNumber": "",
+      "supplier": {
+        "id": "20",
+        "number": "70015",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Paul Kunde",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "Turmweg 23",
+        "zipCode": "79341",
+        "city": "Kenzingen",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "0.0000"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": false,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Musterfirma GmbH",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "Eric-Stumpf-Platz 6",
+          "zipCode": "21432",
+          "city": "Münster",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "3",
+      "date": "2023-01-31",
+      "project": {
+        "id": "1"
+      },
+      "status": "canceled",
+      "documentNumber": "100000",
+      "supplier": {
+        "id": "3",
+        "number": "70000",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Schrauben Meier",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "113.0500"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": false,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Musterfirma GmbH",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "Eric-Stumpf-Platz 6",
+          "zipCode": "21432",
+          "city": "Münster",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "4",
+      "date": "2023-02-03",
+      "project": {
+        "id": "1"
+      },
+      "status": "completed",
+      "documentNumber": "100001",
+      "supplier": {
+        "id": "12",
+        "number": "70002",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Lieferant AT",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "AT",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "3.0000"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "EU delivery",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": true,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Lager AT",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "",
+          "zipCode": "",
+          "city": "",
+          "state": "",
+          "country": "AT",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "5",
+      "date": "2023-02-03",
+      "project": {
+        "id": "1"
+      },
+      "status": "created",
+      "documentNumber": "",
+      "supplier": {
+        "id": "12",
+        "number": "70002",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Lieferant AT",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "AT",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "0.0000"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "EU delivery",
+          "vatId": "AT232323",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": true,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Lager AT",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "",
+          "zipCode": "",
+          "city": "",
+          "state": "",
+          "country": "AT",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "6",
+      "date": "2023-02-08",
+      "project": {
+        "id": "1"
+      },
+      "status": "completed",
+      "documentNumber": "B-2332",
+      "supplier": {
+        "id": "11",
+        "number": "70001",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": true,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "AUD",
+          "amount": "157.0800"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": " 1234",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": false,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Musterfirma GmbH",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "Eric-Stumpf-Platz 6",
+          "zipCode": "21432",
+          "city": "Münster",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "7",
+      "date": "2023-02-08",
+      "project": {
+        "id": "1"
+      },
+      "status": "completed",
+      "documentNumber": "100002",
+      "supplier": {
+        "id": "11",
+        "number": "70001",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "3.5700"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": true
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": false,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Musterfirma GmbH",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "Eric-Stumpf-Platz 6",
+          "zipCode": "21432",
+          "city": "Münster",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "8",
+      "date": "2023-03-06",
+      "project": {
+        "id": "1"
+      },
+      "status": "completed",
+      "documentNumber": "100003",
+      "supplier": {
+        "id": "11",
+        "number": "70001",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "17.8500"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": false
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": false,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Musterfirma GmbH",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "Eric-Stumpf-Platz 6",
+          "zipCode": "21432",
+          "city": "Münster",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "9",
+      "date": "2023-03-07",
+      "project": {
+        "id": "11"
+      },
+      "status": "completed",
+      "documentNumber": "100004",
+      "supplier": {
+        "id": "11",
+        "number": "",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "5.9500"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": true
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": true,
+        "deliveryAddress": {
+          "honorific": "",
+          "name": "Testkunde ABC",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "",
+          "street": "",
+          "zipCode": "",
+          "city": "",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "10",
+      "date": "2023-03-07",
+      "project": {
+        "id": "11"
+      },
+      "status": "completed",
+      "documentNumber": "100005",
+      "supplier": {
+        "id": "11",
+        "number": "",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "5.9500"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": true
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": true,
+        "deliveryAddress": {
+          "honorific": "Dr.",
+          "name": "Karlo Kunde",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "Angelegt durch die API",
+          "street": "Beispielstrasse 1",
+          "zipCode": "81245",
+          "city": "München",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    },
+    {
+      "id": "11",
+      "date": "2023-03-07",
+      "project": {
+        "id": "11"
+      },
+      "status": "completed",
+      "documentNumber": "100006",
+      "supplier": {
+        "id": "11",
+        "number": "",
+        "customerNumberAtSupplier": "",
+        "honorific": "",
+        "name": "Ich-Liefer-Alles",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "",
+        "zipCode": "",
+        "city": "",
+        "state": "",
+        "country": "DE",
+        "contactPerson": "",
+        "email": "",
+        "telephone": "",
+        "telefax": ""
+      },
+      "bodyIntroduction": "",
+      "bodyOutroduction": "",
+      "requestForQuotation": null,
+      "suppliersOfferReference": "",
+      "internalDesignation": "",
+      "language": {
+        "iso2": "DE"
+      },
+      "salesOrderConfirmationReference": "",
+      "isConfirmationRequested": false,
+      "isConfirmed": false,
+      "confirmedVia": "Internet",
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "total": {
+          "currency": "EUR",
+          "amount": "8.3300"
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 0,
+          "paymentTargetDiscountDays": 0,
+          "paymentTargetDiscountAmount": 0,
+          "isPaymentTargetDiscountApplied": true
+        },
+        "costCenter": "",
+        "tax": {
+          "taxation": "Domestic",
+          "vatId": "",
+          "taxDisplay": "Automatic"
+        }
+      },
+      "delivery": {
+        "deliveryTerms": null,
+        "hasDifferentDeliveryAddress": true,
+        "deliveryAddress": {
+          "honorific": "Dr.",
+          "name": "Karlo Kunde",
+          "department": "",
+          "subDepartment": "",
+          "extraAddressLine": "Angelegt durch die API",
+          "street": "Beispielstrasse 1",
+          "zipCode": "81245",
+          "city": "München",
+          "state": "",
+          "country": "DE",
+          "contactPerson": ""
+        },
+        "dates": {
+          "desiredDeliveryDate": null,
+          "confirmedDeliveryDate": null
+        }
+      },
+      "formatting": {
+        "hideLetterHead": false,
+        "hidePrices": false,
+        "hideProductNumbers": false,
+        "showLongProductNumbers": false,
+        "hideProductDescriptions": false,
+        "showOwnProductNumberInColumn": false
+      },
+      "internalComment": "",
+      "liabilitiesInfo": ""
+    }
+  ],
+  "extra": {
+    "totalCount": 264,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/api-tester/responses/Get_List_Returns.json b/src/api-tester/responses/Get_List_Returns.json
new file mode 100644
index 0000000..d96c2c0
--- /dev/null
+++ b/src/api-tester/responses/Get_List_Returns.json
@@ -0,0 +1,267 @@
+{
+  "data": [
+    {
+      "id": "1",
+      "date": "2023-01-23",
+      "customer": {
+        "id": "8",
+        "number": "10004"
+      },
+      "documentNumber": "500001",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "19"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "2",
+      "date": "2023-01-23",
+      "customer": {
+        "id": "8",
+        "number": "10004"
+      },
+      "documentNumber": "500002",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "20"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "3",
+      "date": "2023-01-25",
+      "customer": {
+        "id": "8",
+        "number": "10004"
+      },
+      "documentNumber": "500003",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "21"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "4",
+      "date": "2023-02-02",
+      "customer": {
+        "id": "7",
+        "number": "10003"
+      },
+      "documentNumber": "500005",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": null,
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "5",
+      "date": "2023-01-31",
+      "customer": {
+        "id": "8",
+        "number": "10004"
+      },
+      "documentNumber": "500004",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "33"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "6",
+      "date": "2023-02-02",
+      "customer": {
+        "id": "8",
+        "number": "10004"
+      },
+      "documentNumber": "500006",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "33"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "8",
+      "date": "2024-08-07",
+      "customer": {
+        "id": "4",
+        "number": "100018"
+      },
+      "documentNumber": "DE20245008",
+      "tags": [
+        {
+          "id": "20",
+          "name": "Neues Tag via API",
+          "color": "a9ca45"
+        }
+      ],
+      "status": "released",
+      "salesOrder": {
+        "id": "79"
+      },
+      "progress": "announced",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "5",
+        "name": "Paul"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "9",
+      "date": "2023-02-28",
+      "customer": {
+        "id": "4",
+        "number": "100018"
+      },
+      "documentNumber": "500007",
+      "tags": [],
+      "status": "completed",
+      "salesOrder": {
+        "id": "79"
+      },
+      "progress": "done",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "5",
+        "name": "Paul"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "10",
+      "date": "2025-04-10",
+      "customer": {
+        "id": "2",
+        "number": "10000"
+      },
+      "documentNumber": "2025 - 500046",
+      "tags": [
+        {
+          "id": "20",
+          "name": "Neues Tag via API",
+          "color": "a9ca45"
+        }
+      ],
+      "status": "released",
+      "salesOrder": null,
+      "progress": "announced",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "1",
+        "name": "Standard Projekt"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    },
+    {
+      "id": "11",
+      "date": "2023-04-27",
+      "customer": {
+        "id": "17",
+        "number": "10008"
+      },
+      "documentNumber": "1",
+      "tags": [],
+      "status": "released",
+      "salesOrder": null,
+      "progress": "announced",
+      "shippingMethod": {
+        "id": "1",
+        "name": "DHL"
+      },
+      "project": {
+        "id": "4",
+        "name": "Knut Test"
+      },
+      "bodyOutroduction": null,
+      "internalComment": null
+    }
+  ],
+  "extra": {
+    "totalCount": 83,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/api-tester/responses/Get_List_Sales_Orders.json b/src/api-tester/responses/Get_List_Sales_Orders.json
new file mode 100644
index 0000000..daba68a
--- /dev/null
+++ b/src/api-tester/responses/Get_List_Sales_Orders.json
@@ -0,0 +1,114 @@
+{
+  "data": [
+    {
+      "id": "1508",
+      "documentNumber": "86",
+      "externalOrderNumber": "",
+      "customerOrderNumber": "",
+      "transactionNumber": "",
+      "externalOrderId": "",
+      "date": "2025-02-25",
+      "netSales": 34.25,
+      "total": 40.76,
+      "desiredDeliveryDate": null,
+      "desiredDeliveryDateAsCalendarWeek": false,
+      "reservationDate": null,
+      "editor": "Dimas ",
+      "sales": {
+        "id": 345,
+        "name": "Dimas "
+      },
+      "status": "completed",
+      "customer": {
+        "id": "440",
+        "number": "16"
+      },
+      "comment": "",
+      "project": {
+        "id": "32"
+      },
+      "bodyOutroduction": "",
+      "language": {
+        "iso2": "deutsch"
+      },
+      "financials": {
+        "paymentMethod": {
+          "id": "13"
+        },
+        "currency": "EUR",
+        "costCenter": null,
+        "billingAddress": {
+          "name": "DimasTest",
+          "department": "",
+          "subDepartment": "",
+          "street": "",
+          "zipCode": "86165",
+          "city": "Augsburg",
+          "state": "BY",
+          "country": "DE",
+          "type": "other",
+          "title": "",
+          "contactPerson": "",
+          "addressSupplement": "",
+          "fax": "",
+          "email": "",
+          "salutation": "",
+          "gln": "",
+          "phoneNumber": ""
+        },
+        "paymentTerms": {
+          "paymentTargetDiscount": 0,
+          "paymentTargetDays": 14,
+          "paymentTargetDiscountDays": 7
+        }
+      },
+      "delivery": {
+        "email": "",
+        "conditions": "",
+        "autoShipping": true,
+        "fastLane": false,
+        "desiredDeliveryDate": "0000-00-00",
+        "shippingMethod": {
+          "id": "1"
+        },
+        "preferredWarehouse": null,
+        "storageCountry": null,
+        "shippingAddress": {
+          "name": "DimasTest",
+          "department": "",
+          "subDepartment": "",
+          "street": "",
+          "zipCode": "86165",
+          "city": "Augsburg",
+          "state": "BY",
+          "country": "DE",
+          "gln": ""
+        }
+      },
+      "log": {
+        "createdAt": "2025-02-25T12:42:30+01:00",
+        "createdBy": {
+          "id": "345",
+          "name": "Dimas "
+        }
+      },
+      "isBeingEdited": false,
+      "subsequentDelivery": false,
+      "shippingDateOk": true,
+      "creditLimitOk": true,
+      "shippingLockOk": true,
+      "prepaidOk": true,
+      "postageOk": true,
+      "customerCheckOk": true,
+      "vatOk": true,
+      "stockOk": false
+    }
+  ],
+  "extra": {
+    "totalCount": 1,
+    "page": {
+      "number": 1,
+      "size": 50
+    }
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Address.json b/src/api-tester/responses/Get_View_Address.json
new file mode 100644
index 0000000..00a8f7c
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Address.json
@@ -0,0 +1,25 @@
+{
+  "data": {
+    "id": "2",
+    "type": "masterdata",
+    "name": "Karlo Kunde GmbH & Co. KG",
+    "street": "Beispielstrasse 1",
+    "zip": "81245",
+    "city": "München",
+    "country": "DE",
+    "state": "BY",
+    "addressSupplement": "Adresszusatz",
+    "department": "Geschäftsführung",
+    "subDepartment": "Unterabteilung",
+    "contactDetails": {
+      "email": "me@example.com",
+      "phone": "089 111222333",
+      "gln": null
+    },
+    "deliveryDetails": null
+  },
+  "links": {
+    "self": "https://636a1d639f14e.xentral.biz/api/v2/customers/2/addresses/masterdata",
+    "customer": "https://636a1d639f14e.xentral.biz/api/v2/customers/2"
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Credit_Note.json b/src/api-tester/responses/Get_View_Credit_Note.json
new file mode 100644
index 0000000..6c25561
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Credit_Note.json
@@ -0,0 +1,71 @@
+{
+  "data": {
+    "id": "1",
+    "number": "900000",
+    "date": "2023-01-23",
+    "createdAt": "2023-01-23T11:02:56+01:00",
+    "createdBy": {
+      "name": "Kassen Mitarbeiter"
+    },
+    "sentAt": null,
+    "sentBy": null,
+    "updatedAt": "2023-04-26T16:40:36+02:00",
+    "grossValue": {
+      "amount": "48.20",
+      "currency": "EUR"
+    },
+    "netValue": {
+      "amount": "40.50",
+      "currency": "EUR"
+    },
+    "costCenter": "",
+    "status": "approved",
+    "tags": [],
+    "project": {
+      "id": "1",
+      "name": "Standard Projekt"
+    },
+    "customer": {
+      "id": "8",
+      "name": "Test Kunde"
+    },
+    "externalOrderReference": "10035",
+    "devCustomer": "",
+    "billingAddress": {
+      "name": "Test Kunde",
+      "contactPerson": "",
+      "department": "",
+      "subdivision": "",
+      "street": "Werner-von-Siemens-Straße 6",
+      "additionalDetails": "Gebäude 15 L",
+      "city": "Augsburg",
+      "zipCode": "86159",
+      "country": "DE"
+    },
+    "paymentMethodName": "payment_in_advance",
+    "paymentStatus": "unknown",
+    "gln": "",
+    "taxation": 0,
+    "positions": [
+      {
+        "id": 1,
+        "position": 1,
+        "salesOrderPosition": {
+          "id": "2"
+        },
+        "createdAt": "2023-01-31T10:49:08+01:00",
+        "productId": 89,
+        "productNumber": "700001",
+        "description": "Schraube M10x20",
+        "quantity": 3,
+        "price": {
+          "amount": "15.00000000",
+          "currency": "EUR"
+        },
+        "vatCategory": "",
+        "taxRate": -1,
+        "discount": 10
+      }
+    ]
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Customer.json b/src/api-tester/responses/Get_View_Customer.json
new file mode 100644
index 0000000..a4d04b1
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Customer.json
@@ -0,0 +1,41 @@
+{
+  "data": {
+    "id": "440",
+    "uuid": "",
+    "number": "16",
+    "deviatingCustomerNumber": "",
+    "customerType": "person",
+    "name": "DimasTest",
+    "firstname": "",
+    "lastname": "",
+    "title": "",
+    "salutation": "other",
+    "salutationPhrase": "",
+    "birthdate": null,
+    "department": "",
+    "subDepartment": "",
+    "projects": [
+      {
+        "id": "32"
+      }
+    ],
+    "groups": [],
+    "contactDetails": {
+      "email": "",
+      "phone": null,
+      "mobile": null,
+      "fax": null,
+      "website": null,
+      "additionalData": []
+    },
+    "accountManager": null,
+    "salesManager": null,
+    "isLead": false,
+    "contactPerson": ""
+  },
+  "links": {
+    "self": "https://636a1d639f14e.xentral.biz/api/v2/customers/440",
+    "contactPersons": "https://636a1d639f14e.xentral.biz/api/customers/440/contactPerson",
+    "addresses": "https://636a1d639f14e.xentral.biz/api/v2/customers/440/addresses"
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Delivery_Note.json b/src/api-tester/responses/Get_View_Delivery_Note.json
new file mode 100644
index 0000000..5d6cca2
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Delivery_Note.json
@@ -0,0 +1,227 @@
+{
+  "data": {
+    "id": "1",
+    "documentNumber": "300000",
+    "salesOrder": {
+      "id": "19"
+    },
+    "customerOrderNumber": "",
+    "updatedAt": "2024-08-13 12:01:14",
+    "date": "2023-01-23",
+    "status": "sent",
+    "customer": {
+      "id": "8",
+      "number": "10004"
+    },
+    "comment": "",
+    "project": {
+      "id": "1"
+    },
+    "bodyOutroduction": "",
+    "bodyIntroduction": "",
+    "internalDesignation": "",
+    "language": {
+      "iso2": "DE"
+    },
+    "delivery": {
+      "shippingMethod": {
+        "id": "1"
+      },
+      "shippingAddress": {
+        "name": "Test Kunde",
+        "department": "",
+        "subDepartment": "",
+        "street": "Werner-von-Siemens-Straße 6",
+        "zipCode": "86159",
+        "city": "Augsburg",
+        "state": "BY",
+        "country": "DE",
+        "gln": ""
+      },
+      "deliveryTerms": null
+    },
+    "positions": [
+      {
+        "id": "1",
+        "quantity": 10,
+        "comment": "",
+        "product": {
+          "id": "89",
+          "number": "700001",
+          "name": "Schraube M10x20",
+          "description": "",
+          "freeFields": [
+            {
+              "id": "1",
+              "value": ""
+            },
+            {
+              "id": "2",
+              "value": ""
+            },
+            {
+              "id": "3",
+              "value": ""
+            },
+            {
+              "id": "4",
+              "value": ""
+            },
+            {
+              "id": "5",
+              "value": ""
+            },
+            {
+              "id": "6",
+              "value": ""
+            },
+            {
+              "id": "7",
+              "value": ""
+            },
+            {
+              "id": "8",
+              "value": ""
+            },
+            {
+              "id": "9",
+              "value": ""
+            },
+            {
+              "id": "10",
+              "value": ""
+            },
+            {
+              "id": "11",
+              "value": ""
+            },
+            {
+              "id": "12",
+              "value": ""
+            },
+            {
+              "id": "13",
+              "value": ""
+            },
+            {
+              "id": "14",
+              "value": ""
+            },
+            {
+              "id": "15",
+              "value": ""
+            },
+            {
+              "id": "16",
+              "value": ""
+            },
+            {
+              "id": "17",
+              "value": ""
+            },
+            {
+              "id": "18",
+              "value": ""
+            },
+            {
+              "id": "19",
+              "value": ""
+            },
+            {
+              "id": "20",
+              "value": ""
+            },
+            {
+              "id": "21",
+              "value": ""
+            },
+            {
+              "id": "22",
+              "value": ""
+            },
+            {
+              "id": "23",
+              "value": ""
+            },
+            {
+              "id": "24",
+              "value": ""
+            },
+            {
+              "id": "25",
+              "value": ""
+            },
+            {
+              "id": "26",
+              "value": ""
+            },
+            {
+              "id": "27",
+              "value": ""
+            },
+            {
+              "id": "28",
+              "value": ""
+            },
+            {
+              "id": "29",
+              "value": ""
+            },
+            {
+              "id": "30",
+              "value": ""
+            },
+            {
+              "id": "31",
+              "value": ""
+            },
+            {
+              "id": "32",
+              "value": ""
+            },
+            {
+              "id": "33",
+              "value": ""
+            },
+            {
+              "id": "34",
+              "value": ""
+            },
+            {
+              "id": "35",
+              "value": ""
+            },
+            {
+              "id": "36",
+              "value": ""
+            },
+            {
+              "id": "37",
+              "value": ""
+            },
+            {
+              "id": "38",
+              "value": ""
+            },
+            {
+              "id": "39",
+              "value": ""
+            },
+            {
+              "id": "40",
+              "value": ""
+            }
+          ]
+        }
+      }
+    ],
+    "log": {
+      "createdAt": "2023-01-23T11:01:49+01:00",
+      "createdBy": {
+        "id": "5",
+        "name": "Kassen Mitarbeiter"
+      }
+    },
+    "tags": []
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Invoice.json b/src/api-tester/responses/Get_View_Invoice.json
new file mode 100644
index 0000000..05fdf4d
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Invoice.json
@@ -0,0 +1,84 @@
+{
+  "data": {
+    "id": "44",
+    "documentNumber": "400039",
+    "documentDate": "2023-03-01T00:00:00+01:00",
+    "log": {
+      "createdBy": {
+        "name": ""
+      },
+      "sentBy": {
+        "name": "Administrator"
+      },
+      "createdAt": "2023-03-01T12:37:04+01:00",
+      "sentAt": null,
+      "updatedAt": "2025-06-03T01:55:08+02:00"
+    },
+    "amountGross": 82.47,
+    "amountNet": 69.3,
+    "costCenter": "",
+    "status": "released",
+    "project": {
+      "id": "1",
+      "name": "Standard Projekt",
+      "abbreviation": "STANDARD"
+    },
+    "customer": {
+      "id": "8",
+      "name": "Christian Hofmann"
+    },
+    "externalOrderReference": "",
+    "devCustomer": "10004",
+    "billingAddress": {
+      "id": "8",
+      "name": "Christian Hofmann",
+      "contactPerson": "",
+      "department": "",
+      "subdivision": "",
+      "street": "Werner-von-Siemens-Straße 6",
+      "additionalDetails": "",
+      "city": "Augsburg",
+      "zipCode": "86159",
+      "country": "DE",
+      "email": "christian@digitalxl.de"
+    },
+    "paymentMethodName": "invoice",
+    "paymentStatus": "pending",
+    "dunning": "mahnung1",
+    "dunningDate": "2025-06-03",
+    "gln": "",
+    "taxation": 0,
+    "tags": [],
+    "positions": [
+      {
+        "id": 60,
+        "position": 1,
+        "saleOrderPositionId": 139,
+        "createdAt": "2023-03-01T12:37:05+01:00",
+        "productId": 91,
+        "productNumber": "1234",
+        "description": "Mutter 5mm",
+        "quantity": 1,
+        "price": {
+          "amount": "83.16",
+          "currency": "EUR"
+        },
+        "vatCategory": "",
+        "taxRate": 20,
+        "discount": 10
+      }
+    ],
+    "paymentTerms": {
+      "earlyPaymentDiscount": 2,
+      "earlyPaymentDate": "2023-03-11T00:00:00+01:00",
+      "dueDate": "2023-03-15T00:00:00+01:00"
+    },
+    "dunningSettings": {
+      "level": "reminder1",
+      "date": "2025-06-03",
+      "comment": "",
+      "sent": false
+    },
+    "dunningManualSettings": null
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Liability.json b/src/api-tester/responses/Get_View_Liability.json
new file mode 100644
index 0000000..f573f69
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Liability.json
@@ -0,0 +1,85 @@
+{
+  "data": {
+    "id": "1",
+    "documentNumber": "2024 - 10013",
+    "date": "2023-01-30",
+    "createdAt": "2023-01-30 15:03:48+01:00",
+    "createdBy": {
+      "name": "Administrator"
+    },
+    "updatedAt": "2024-11-12 00:31:22+01:00",
+    "status": "PAID",
+    "supplier": {
+      "id": "3"
+    },
+    "supplierInvoiceNumber": "45234525",
+    "receiptDate": "2023-01-30 00:00:00+01:00",
+    "serviceDate": null,
+    "financials": {
+      "amountGross": {
+        "amount": "500.00",
+        "currency": ""
+      },
+      "amountNet": {
+        "amount": "420.17",
+        "currency": ""
+      },
+      "freightCharge": 0,
+      "taxation": "inland",
+      "taxes": {
+        "normalTax": {
+          "rate": 19,
+          "amount": 79.83
+        },
+        "reducedTax": {
+          "rate": 7,
+          "amount": 0
+        },
+        "customTax1": {
+          "rate": -1,
+          "amount": 0
+        },
+        "customTax2": {
+          "rate": -1,
+          "amount": 0
+        }
+      },
+      "paymentTerms": {
+        "dueDate": "2023-01-30",
+        "earlyPaymentDate": "2023-01-30",
+        "earlyPaymentDiscount": 0,
+        "earlyPaymentDiscountAmount": 0
+      },
+      "bookingText": "",
+      "payment": {
+        "methodName": "vorkasse",
+        "paidAmount": -613.74,
+        "paidOnDate": "2023-05-19",
+        "discountReceived": 0
+      },
+      "costCenter": "3445",
+      "glAccount": "1234"
+    },
+    "purchaseOrder": null,
+    "assignedPurchaseOrders": [],
+    "project": {
+      "id": "1"
+    },
+    "accounting": [
+      {
+        "glAccount": " 907643",
+        "bookingText": "",
+        "amount": {
+          "amount": "307.87",
+          "currency": "EUR"
+        },
+        "tax": {
+          "rate": 19
+        },
+        "costCenter": ""
+      }
+    ],
+    "positions": [],
+    "purpose": null
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Media.json b/src/api-tester/responses/Get_View_Media.json
new file mode 100644
index 0000000..0ef0012
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Media.json
@@ -0,0 +1,31 @@
+{
+  "data": [
+    {
+      "id": "94",
+      "product": {
+        "id": "1"
+      },
+      "title": "",
+      "description": "",
+      "keyword": "defaultImage",
+      "sort": 1,
+      "currentVersion": {
+        "id": "94",
+        "version": 1,
+        "url": "/api/productMedia/94/versions/1",
+        "remark": "Initiale Version",
+        "filename": "schraube.jpeg",
+        "size": 30491,
+        "updatedAt": "2023-01-04T10:06:09+01:00"
+      },
+      "updatedAt": "2023-01-04T10:06:09+01:00"
+    }
+  ],
+  "extra": {
+    "totalCount": 1,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Options_of_a_Product.json b/src/api-tester/responses/Get_View_Options_of_a_Product.json
new file mode 100644
index 0000000..e1db50b
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Options_of_a_Product.json
@@ -0,0 +1,71 @@
+{
+  "data": [
+    {
+      "id": "1",
+      "name": "Größe",
+      "sort": 0,
+      "createdAt": "2022-11-25T11:52:28+01:00"
+    },
+    {
+      "id": "3",
+      "name": "Farbe",
+      "sort": 0,
+      "createdAt": "2023-01-19T14:34:44+01:00"
+    },
+    {
+      "id": "4",
+      "name": "Größe",
+      "sort": 1,
+      "createdAt": "2023-01-19T14:35:00+01:00"
+    },
+    {
+      "id": "5",
+      "name": "Jahrgang",
+      "sort": 1,
+      "createdAt": "2023-02-06T11:13:53+01:00"
+    },
+    {
+      "id": "6",
+      "name": "Farbe",
+      "sort": 1,
+      "createdAt": "2023-03-03T14:47:20+01:00"
+    },
+    {
+      "id": "7",
+      "name": "Größe",
+      "sort": 2,
+      "createdAt": "2023-03-03T14:48:16+01:00"
+    },
+    {
+      "id": "8",
+      "name": "Farbe",
+      "sort": 1,
+      "createdAt": "2023-03-03T14:58:42+01:00"
+    },
+    {
+      "id": "9",
+      "name": "Größe",
+      "sort": 2,
+      "createdAt": "2023-03-03T14:59:22+01:00"
+    },
+    {
+      "id": "10",
+      "name": "Farbe",
+      "sort": 1,
+      "createdAt": "2023-03-03T15:02:35+01:00"
+    },
+    {
+      "id": "11",
+      "name": "Größe",
+      "sort": 2,
+      "createdAt": "2023-03-03T15:03:08+01:00"
+    }
+  ],
+  "extra": {
+    "totalCount": 83,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/api-tester/expected/Get_View_Parts.json b/src/api-tester/responses/Get_View_Parts.json
similarity index 60%
rename from src/api-tester/expected/Get_View_Parts.json
rename to src/api-tester/responses/Get_View_Parts.json
index 5b70b8d..872cd86 100644
--- a/src/api-tester/expected/Get_View_Parts.json
+++ b/src/api-tester/responses/Get_View_Parts.json
@@ -2,8 +2,8 @@
   "data": [],
   "extra": {
     "page": {
-      "number": 0,
-      "size": 0
+      "number": 1,
+      "size": 10
     }
   }
 }
diff --git a/src/api-tester/responses/Get_View_Product.json b/src/api-tester/responses/Get_View_Product.json
new file mode 100644
index 0000000..f73383d
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Product.json
@@ -0,0 +1,153 @@
+{
+  "data": {
+    "id": "1",
+    "uuid": "018a98cc-c6e3-7457-ba0e-cb7e18deaac9",
+    "name": "Schraube TEST Uebertragenmodul",
+    "description": "Schrauben sind unsichtbare Helden des Alltags, die uns in vielen Bereichen des Lebens unterstützen. Sie halten Dinge zusammen und befestigen sie. Im Notfall können sie sogar als Werkzeug dienen. Sammler schätzen besondere und seltene Schrauben in ihrer Sammlung. Schrauben sind also mehr als nur ein einfaches Bauteil, sie sind wahre Allrounder und wichtiger Bestandteil unseres Alltags.",
+    "shortDescription": null,
+    "number": "Xentral--Ticket012313",
+    "project": {
+      "id": "32",
+      "name": "DEV"
+    },
+    "category": {
+      "id": "1",
+      "name": "Handelsware (100000)"
+    },
+    "standardSupplier": {
+      "id": "3"
+    },
+    "stockCount": 67.48,
+    "shopPriceDisplay": "0.00",
+    "ean": "7284242",
+    "manufacturer": {
+      "name": "Hersteller 123",
+      "number": null,
+      "url": null
+    },
+    "customsTariffNumber": "ZTN_47110815",
+    "options": [],
+    "selectedOptions": [],
+    "variants": [],
+    "isVariant": false,
+    "variantOf": null,
+    "mainVariant": null,
+    "thumbnailUrl": "https://636a1d639f14e.xentral.biz/index.php?module=artikel&action=thumbnail&id=1&bildvorschau=94_100_100",
+    "thumbnailId": "94",
+    "tags": [
+      {
+        "id": "1",
+        "name": "Erledigt",
+        "color": "339966"
+      }
+    ],
+    "freeFields": [
+      {
+        "id": "1",
+        "name": "Info",
+        "value": "1"
+      },
+      {
+        "id": "2",
+        "name": "Testnummer",
+        "value": "CLS1000002"
+      },
+      {
+        "id": "11",
+        "name": "Variante ausblenden",
+        "value": "1"
+      },
+      {
+        "id": "28",
+        "name": "TestFreiFeld28",
+        "value": "P700001"
+      },
+      {
+        "id": "30",
+        "name": "Leistungsdatum",
+        "value": "01.10.2025"
+      },
+      {
+        "id": "36",
+        "name": "Date",
+        "value": "test"
+      }
+    ],
+    "countryOfOrigin": "CN",
+    "regionOfOrigin": "ausländischer Ursprung",
+    "internalComment": "",
+    "isDeleted": false,
+    "measurements": {
+      "weight": {
+        "value": 0,
+        "unit": "kg"
+      },
+      "netWeight": {
+        "value": 0,
+        "unit": "kg"
+      },
+      "length": {
+        "value": 0,
+        "unit": "cm"
+      },
+      "width": {
+        "value": 0,
+        "unit": "cm"
+      },
+      "height": {
+        "value": 0,
+        "unit": "cm"
+      }
+    },
+    "minimumOrderQuantity": 0,
+    "minimumStorageQuantity": 0,
+    "salesTax": "standard",
+    "hasBatches": false,
+    "serialNumbersMode": "disabled",
+    "hasBestBeforeDate": false,
+    "hasBillOfMaterials": false,
+    "isAssembledJustInTime": false,
+    "isProductionProduct": false,
+    "isExternallyProduced": false,
+    "allowPurchaseFromAllSuppliers": false,
+    "isDisabled": false,
+    "disabledReason": null,
+    "hidePriceOnDocuments": false,
+    "ageRating": null,
+    "isStockItem": true,
+    "defaultStorageLocation": {
+      "id": "116",
+      "designation": "3",
+      "warehouse": {
+        "id": "1",
+        "designation": "Hauptlager"
+      }
+    },
+    "isStockTakingDisabled": false,
+    "isCustomProduct": false,
+    "hideJustInTimeItemsOnDocuments": false,
+    "markAsSoldOut": false,
+    "markAsInactive": false,
+    "isRemainingQuantity": false,
+    "isShippingCostsProduct": false,
+    "discount": {
+      "isDiscountProduct": false,
+      "discountPercentage": 0
+    },
+    "stockTaking": {
+      "hasStockTakingValue": false,
+      "stockTakingValue": 0
+    },
+    "calculatedPurchasePrice": {
+      "hasCalculatedPurchasePrice": true,
+      "price": {
+        "amount": "0.0000",
+        "currency": "EUR"
+      }
+    },
+    "unit": {
+      "name": "Stk"
+    },
+    "updatedAt": "2025-06-03T10:04:04+02:00"
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Product_response.json b/src/api-tester/responses/Get_View_Product_response.json
deleted file mode 100644
index 7c21397..0000000
--- a/src/api-tester/responses/Get_View_Product_response.json
+++ /dev/null
@@ -1,107 +0,0 @@
-{
-  "data": {
-    "id": "1345",
-    "uuid": "0195469b-803a-7ca1-b03d-5c31b4371aa4",
-    "name": "Grüße aus API-Tester",
-    "description": "Neue Beschreibung für das Produkt",
-    "shortDescription": null,
-    "number": "1000021000288",
-    "project": {
-      "id": "3",
-      "name": "Kasse"
-    },
-    "category": {
-      "id": "1",
-      "name": "Handelsware (100000)"
-    },
-    "standardSupplier": null,
-    "stockCount": 0,
-    "shopPriceDisplay": null,
-    "ean": "1234567890123",
-    "manufacturer": {
-      "name": null,
-      "number": null,
-      "url": null
-    },
-    "customsTariffNumber": "12345678",
-    "options": [],
-    "selectedOptions": [],
-    "variants": [],
-    "isVariant": false,
-    "variantOf": null,
-    "mainVariant": null,
-    "thumbnailUrl": null,
-    "thumbnailId": null,
-    "tags": [],
-    "freeFields": [],
-    "countryOfOrigin": null,
-    "regionOfOrigin": "",
-    "internalComment": "",
-    "isDeleted": false,
-    "measurements": {
-      "weight": {
-        "value": 0,
-        "unit": "kg"
-      },
-      "netWeight": {
-        "value": 0,
-        "unit": "kg"
-      },
-      "length": {
-        "value": 0,
-        "unit": "cm"
-      },
-      "width": {
-        "value": 0,
-        "unit": "cm"
-      },
-      "height": {
-        "value": 0,
-        "unit": "cm"
-      }
-    },
-    "minimumOrderQuantity": 0,
-    "minimumStorageQuantity": 0,
-    "salesTax": "standard",
-    "hasBatches": false,
-    "serialNumbersMode": "disabled",
-    "hasBestBeforeDate": false,
-    "hasBillOfMaterials": false,
-    "isAssembledJustInTime": false,
-    "isProductionProduct": false,
-    "isExternallyProduced": false,
-    "allowPurchaseFromAllSuppliers": false,
-    "isDisabled": false,
-    "disabledReason": null,
-    "hidePriceOnDocuments": false,
-    "ageRating": null,
-    "isStockItem": false,
-    "defaultStorageLocation": null,
-    "isStockTakingDisabled": false,
-    "isCustomProduct": false,
-    "hideJustInTimeItemsOnDocuments": false,
-    "markAsSoldOut": false,
-    "markAsInactive": false,
-    "isRemainingQuantity": false,
-    "isShippingCostsProduct": false,
-    "discount": {
-      "isDiscountProduct": true,
-      "discountPercentage": 10.5
-    },
-    "stockTaking": {
-      "hasStockTakingValue": true,
-      "stockTakingValue": 50
-    },
-    "calculatedPurchasePrice": {
-      "hasCalculatedPurchasePrice": false,
-      "price": {
-        "amount": "0.0000",
-        "currency": "EUR"
-      }
-    },
-    "unit": {
-      "name": ""
-    },
-    "updatedAt": "2025-03-25T11:03:28+01:00"
-  }
-}
diff --git a/src/api-tester/responses/Get_View_Purchase_Order.json b/src/api-tester/responses/Get_View_Purchase_Order.json
new file mode 100644
index 0000000..288b878
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Purchase_Order.json
@@ -0,0 +1,150 @@
+{
+  "data": {
+    "id": "1",
+    "date": "2023-01-13",
+    "project": {
+      "id": "33"
+    },
+    "status": "created",
+    "documentNumber": "",
+    "supplier": {
+      "id": "20",
+      "number": "70015",
+      "customerNumberAtSupplier": "",
+      "honorific": "",
+      "name": "Paul Kunde",
+      "department": "",
+      "subDepartment": "",
+      "extraAddressLine": "",
+      "street": "Turmweg 23",
+      "zipCode": "79341",
+      "city": "Kenzingen",
+      "state": "",
+      "country": "DE",
+      "contactPerson": "",
+      "email": "",
+      "telephone": "",
+      "telefax": ""
+    },
+    "bodyIntroduction": "",
+    "bodyOutroduction": "",
+    "requestForQuotation": null,
+    "suppliersOfferReference": "",
+    "internalDesignation": "",
+    "language": {
+      "iso2": "DE"
+    },
+    "salesOrderConfirmationReference": "",
+    "isConfirmationRequested": false,
+    "isConfirmed": false,
+    "confirmedVia": "Internet",
+    "financials": {
+      "paymentMethod": {
+        "id": "13"
+      },
+      "total": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "paymentTerms": {
+        "paymentTargetDiscount": 0,
+        "paymentTargetDays": 0,
+        "paymentTargetDiscountDays": 0,
+        "paymentTargetDiscountAmount": 0,
+        "isPaymentTargetDiscountApplied": false
+      },
+      "costCenter": "",
+      "tax": {
+        "taxation": "Domestic",
+        "vatId": "",
+        "taxDisplay": "Automatic"
+      }
+    },
+    "delivery": {
+      "deliveryTerms": null,
+      "hasDifferentDeliveryAddress": false,
+      "deliveryAddress": {
+        "honorific": "",
+        "name": "Musterfirma GmbH",
+        "department": "",
+        "subDepartment": "",
+        "extraAddressLine": "",
+        "street": "Eric-Stumpf-Platz 6",
+        "zipCode": "21432",
+        "city": "Münster",
+        "state": "",
+        "country": "DE",
+        "contactPerson": ""
+      },
+      "dates": {
+        "desiredDeliveryDate": null,
+        "confirmedDeliveryDate": null
+      }
+    },
+    "formatting": {
+      "hideLetterHead": false,
+      "hidePrices": false,
+      "hideProductNumbers": false,
+      "showLongProductNumbers": false,
+      "hideProductDescriptions": false,
+      "showOwnProductNumberInColumn": false
+    },
+    "internalComment": "",
+    "liabilitiesInfo": "",
+    "positions": [
+      {
+        "id": "242",
+        "project": {
+          "id": "1"
+        },
+        "product": {
+          "id": "110"
+        },
+        "name": "Karton",
+        "description": "",
+        "quantity": 1000,
+        "delivered": 0,
+        "salesOrderPosition": null,
+        "price": {
+          "amount": "0.25000000",
+          "currency": "EUR"
+        },
+        "tax": {
+          "vatCategory": "standard",
+          "taxText": "",
+          "rate": 19
+        }
+      },
+      {
+        "id": "244",
+        "project": {
+          "id": "1"
+        },
+        "product": {
+          "id": "572"
+        },
+        "name": "Bausatz ohne EK",
+        "description": "",
+        "quantity": 155,
+        "delivered": 0,
+        "salesOrderPosition": null,
+        "price": {
+          "amount": "1.34000000",
+          "currency": "EUR"
+        },
+        "tax": {
+          "vatCategory": "standard",
+          "taxText": "",
+          "rate": 19
+        }
+      }
+    ],
+    "log": {
+      "createdAt": "2023-01-13T12:49:37+01:00",
+      "isSent": false,
+      "sentAt": null,
+      "sentBy": "",
+      "sentVia": ""
+    }
+  }
+}
diff --git a/src/api-tester/expected/Get_View_Purchase_Prices.json b/src/api-tester/responses/Get_View_Purchase_Prices.json
similarity index 61%
rename from src/api-tester/expected/Get_View_Purchase_Prices.json
rename to src/api-tester/responses/Get_View_Purchase_Prices.json
index 10e0541..0620a90 100644
--- a/src/api-tester/expected/Get_View_Purchase_Prices.json
+++ b/src/api-tester/responses/Get_View_Purchase_Prices.json
@@ -1,19 +1,19 @@
 {
   "data": [
     {
-      "id": "string",
-      "amount": 0,
+      "id": "113",
+      "amount": 10,
       "supplier": {
-        "id": "string",
-        "name": "string"
+        "id": "67",
+        "name": "BLANCO GmbH + Co KG"
       },
       "price": {
-        "amount": "string",
-        "currency": "string"
+        "amount": "0.55000000",
+        "currency": "EUR"
       },
       "additionalInformation": {
         "supplierAvailableStock": 0,
-        "supplierAvailableStockDate": "string",
+        "supplierAvailableStockDate": "0000-00-00",
         "safetyStock": 0,
         "standardDeliveryTime": 0,
         "standardDeliveryTimeUnit": null,
@@ -22,19 +22,19 @@
       }
     },
     {
-      "id": "string",
-      "amount": 0,
+      "id": "112",
+      "amount": 1,
       "supplier": {
-        "id": "string",
-        "name": "string"
+        "id": "67",
+        "name": "BLANCO GmbH + Co KG"
       },
       "price": {
-        "amount": "string",
-        "currency": "string"
+        "amount": "0.88000000",
+        "currency": "EUR"
       },
       "additionalInformation": {
         "supplierAvailableStock": 0,
-        "supplierAvailableStockDate": "string",
+        "supplierAvailableStockDate": "0000-00-00",
         "safetyStock": 0,
         "standardDeliveryTime": 0,
         "standardDeliveryTimeUnit": null,
@@ -43,19 +43,19 @@
       }
     },
     {
-      "id": "string",
-      "amount": 0,
+      "id": "106",
+      "amount": 1,
       "supplier": {
-        "id": "string",
-        "name": "string"
+        "id": "3",
+        "name": "Schrauben Meier"
       },
       "price": {
-        "amount": "string",
-        "currency": "string"
+        "amount": "15.00000000",
+        "currency": "EUR"
       },
       "additionalInformation": {
         "supplierAvailableStock": 0,
-        "supplierAvailableStockDate": "string",
+        "supplierAvailableStockDate": "0000-00-00",
         "safetyStock": 0,
         "standardDeliveryTime": 0,
         "standardDeliveryTimeUnit": null,
@@ -64,19 +64,19 @@
       }
     },
     {
-      "id": "string",
-      "amount": 0,
+      "id": "151",
+      "amount": 1,
       "supplier": {
-        "id": "string",
-        "name": "string"
+        "id": "3",
+        "name": "Schrauben Meier"
       },
       "price": {
-        "amount": "string",
-        "currency": "string"
+        "amount": "12.99000000",
+        "currency": "EUR"
       },
       "additionalInformation": {
         "supplierAvailableStock": 0,
-        "supplierAvailableStockDate": "string",
+        "supplierAvailableStockDate": "0000-00-00",
         "safetyStock": 0,
         "standardDeliveryTime": 0,
         "standardDeliveryTimeUnit": null,
@@ -87,8 +87,8 @@
   ],
   "extra": {
     "page": {
-      "number": 0,
-      "size": 0
+      "number": 1,
+      "size": 10
     }
   }
 }
diff --git a/src/api-tester/responses/Get_View_Return.json b/src/api-tester/responses/Get_View_Return.json
new file mode 100644
index 0000000..8972387
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Return.json
@@ -0,0 +1,39 @@
+{
+  "data": {
+    "id": "1",
+    "date": "2023-01-23",
+    "documentNumber": "500001",
+    "progress": "done",
+    "shippingMethod": {
+      "id": 1,
+      "name": "DHL"
+    },
+    "project": {
+      "id": 1,
+      "name": "Standard Projekt"
+    },
+    "status": "completed",
+    "bodyOutroduction": "",
+    "internalComment": "",
+    "salesOrder": {
+      "id": "19"
+    },
+    "positions": [
+      {
+        "id": "1",
+        "salesOrderPosition": {
+          "id": "2"
+        },
+        "product": {
+          "id": "89",
+          "number": "700001",
+          "name": "Schraube M10x20"
+        },
+        "quantity": 3,
+        "returnReason": {
+          "designation": "14 Tage Rückgaberecht"
+        }
+      }
+    ]
+  }
+}
diff --git a/src/api-tester/responses/Get_View_Sales_Order.json b/src/api-tester/responses/Get_View_Sales_Order.json
new file mode 100644
index 0000000..bba1dca
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Sales_Order.json
@@ -0,0 +1,321 @@
+{
+  "data": {
+    "id": "19",
+    "documentNumber": "200000",
+    "externalOrderNumber": "10035",
+    "customerOrderNumber": "",
+    "transactionNumber": "",
+    "externalOrderId": "4503c227e47d43f5895c7447eeeb44f4",
+    "autoCreateDocuments": "deliveryNote+invoice",
+    "date": "2023-01-23",
+    "earliestFulfillmentDate": null,
+    "desiredDeliveryDate": null,
+    "desiredDeliveryDateCw": false,
+    "reservationDate": null,
+    "editor": "Kassen Mitarbeiter",
+    "sales": {
+      "id": null,
+      "name": null
+    },
+    "status": "completed",
+    "customer": {
+      "id": "8",
+      "number": "10004"
+    },
+    "comment": "",
+    "project": {
+      "id": "1"
+    },
+    "bodyOutroduction": "",
+    "bodyIntroduction": "",
+    "internalDesignation": "",
+    "language": {
+      "iso2": "DE"
+    },
+    "financials": {
+      "paymentMethod": {
+        "id": "11"
+      },
+      "currency": "EUR",
+      "costCenter": null,
+      "billingAddress": {
+        "name": "Test Kunde",
+        "department": "",
+        "subDepartment": "",
+        "street": "Werner-von-Siemens-Straße 6",
+        "zipCode": "86159",
+        "city": "Augsburg",
+        "state": "BY",
+        "country": "DE",
+        "type": "herr",
+        "title": "",
+        "contactPerson": "",
+        "addressSupplement": "Gebäude 15 L",
+        "fax": "",
+        "email": "christian@digitalxl.de",
+        "salutation": "",
+        "gln": "",
+        "phoneNumber": ""
+      },
+      "paymentTerms": {
+        "paymentTargetDiscount": 0,
+        "paymentTargetDays": 14,
+        "paymentTargetDiscountDays": 10
+      }
+    },
+    "delivery": {
+      "email": "",
+      "conditions": "",
+      "autoShipping": true,
+      "fastLane": false,
+      "shippingMethod": {
+        "id": "1"
+      },
+      "deliveryTerms": null,
+      "shippingAddress": {
+        "name": "Test Kunde",
+        "department": "",
+        "subDepartment": "",
+        "street": "Werner-von-Siemens-Straße 6",
+        "zipCode": "86159",
+        "city": "Augsburg",
+        "state": "BY",
+        "country": "DE",
+        "gln": ""
+      },
+      "preferredWarehouse": null,
+      "storageCountry": null
+    },
+    "netSales": {
+      "amount": "1.60",
+      "currency": "EUR"
+    },
+    "total": {
+      "amount": "1.90",
+      "currency": "EUR"
+    },
+    "positions": [
+      {
+        "id": "2",
+        "quantity": 10,
+        "discount": 0,
+        "comment": "",
+        "product": {
+          "id": "89",
+          "number": "700001",
+          "name": "Schraube M10x20",
+          "description": "",
+          "freeFields": [
+            {
+              "id": "1",
+              "value": ""
+            },
+            {
+              "id": "2",
+              "value": ""
+            },
+            {
+              "id": "3",
+              "value": ""
+            },
+            {
+              "id": "4",
+              "value": ""
+            },
+            {
+              "id": "5",
+              "value": ""
+            },
+            {
+              "id": "6",
+              "value": ""
+            },
+            {
+              "id": "7",
+              "value": ""
+            },
+            {
+              "id": "8",
+              "value": ""
+            },
+            {
+              "id": "9",
+              "value": ""
+            },
+            {
+              "id": "10",
+              "value": ""
+            },
+            {
+              "id": "11",
+              "value": ""
+            },
+            {
+              "id": "12",
+              "value": ""
+            },
+            {
+              "id": "13",
+              "value": ""
+            },
+            {
+              "id": "14",
+              "value": ""
+            },
+            {
+              "id": "15",
+              "value": ""
+            },
+            {
+              "id": "16",
+              "value": ""
+            },
+            {
+              "id": "17",
+              "value": ""
+            },
+            {
+              "id": "18",
+              "value": ""
+            },
+            {
+              "id": "19",
+              "value": ""
+            },
+            {
+              "id": "20",
+              "value": ""
+            },
+            {
+              "id": "21",
+              "value": ""
+            },
+            {
+              "id": "22",
+              "value": ""
+            },
+            {
+              "id": "23",
+              "value": ""
+            },
+            {
+              "id": "24",
+              "value": ""
+            },
+            {
+              "id": "25",
+              "value": ""
+            },
+            {
+              "id": "26",
+              "value": ""
+            },
+            {
+              "id": "27",
+              "value": ""
+            },
+            {
+              "id": "28",
+              "value": ""
+            },
+            {
+              "id": "29",
+              "value": ""
+            },
+            {
+              "id": "30",
+              "value": ""
+            },
+            {
+              "id": "31",
+              "value": ""
+            },
+            {
+              "id": "32",
+              "value": ""
+            },
+            {
+              "id": "33",
+              "value": ""
+            },
+            {
+              "id": "34",
+              "value": ""
+            },
+            {
+              "id": "35",
+              "value": ""
+            },
+            {
+              "id": "36",
+              "value": ""
+            },
+            {
+              "id": "37",
+              "value": ""
+            },
+            {
+              "id": "38",
+              "value": ""
+            },
+            {
+              "id": "39",
+              "value": ""
+            },
+            {
+              "id": "40",
+              "value": ""
+            }
+          ]
+        },
+        "tax": {
+          "vatCategory": "normal",
+          "taxText": "",
+          "effectiveVatRate": 19
+        },
+        "price": {
+          "amount": "0.15966400",
+          "currency": "EUR"
+        },
+        "netRevenueSingle": {
+          "amount": "0.1597",
+          "currency": "EUR"
+        },
+        "netRevenueTotal": {
+          "amount": "1.5966",
+          "currency": "EUR"
+        },
+        "grossRevenueSingle": {
+          "amount": "0.1900",
+          "currency": "EUR"
+        },
+        "grossRevenueTotal": {
+          "amount": "1.9000",
+          "currency": "EUR"
+        },
+        "webId": "",
+        "hasChildren": false,
+        "parent": null,
+        "sort": 1
+      }
+    ],
+    "log": {
+      "createdAt": "-0001-11-30T00:00:00+00:53",
+      "createdBy": {
+        "id": "5",
+        "name": "Kassen Mitarbeiter"
+      }
+    },
+    "tags": [
+      {
+        "id": "19",
+        "type": "pruefen",
+        "title": "Prüfen"
+      }
+    ],
+    "salesChannel": {
+      "id": "1",
+      "name": "Shopware 6 Testshop"
+    }
+  }
+}
diff --git a/src/api-tester/expected/Get_View_Sales_Prices.json b/src/api-tester/responses/Get_View_Sales_Prices.json
similarity index 51%
rename from src/api-tester/expected/Get_View_Sales_Prices.json
rename to src/api-tester/responses/Get_View_Sales_Prices.json
index c081e88..9486467 100644
--- a/src/api-tester/expected/Get_View_Sales_Prices.json
+++ b/src/api-tester/responses/Get_View_Sales_Prices.json
@@ -1,81 +1,81 @@
 {
   "data": [
     {
-      "id": "string",
+      "id": "501",
       "customer": null,
       "customerGroup": {
-        "id": "string",
-        "name": "string",
-        "reference": "string"
+        "id": "6",
+        "name": "Händler",
+        "reference": "HK"
       },
       "validFrom": null,
       "expiresAt": null,
-      "amount": 0,
+      "amount": 1,
       "price": {
-        "amount": "string",
-        "currency": "string"
+        "amount": "10.00000000",
+        "currency": "EUR"
       }
     },
     {
-      "id": "string",
+      "id": "474",
       "customer": null,
       "customerGroup": {
-        "id": "string",
-        "name": "string",
-        "reference": "string"
+        "id": "6",
+        "name": "Händler",
+        "reference": "HK"
       },
       "validFrom": null,
       "expiresAt": null,
-      "amount": 0,
+      "amount": 100,
       "price": {
-        "amount": "string",
-        "currency": "string"
+        "amount": "7.50000000",
+        "currency": "EUR"
       }
     },
     {
-      "id": "string",
+      "id": "472",
       "customer": null,
       "customerGroup": null,
       "validFrom": null,
       "expiresAt": null,
-      "amount": 0,
+      "amount": 1,
       "price": {
-        "amount": "string",
-        "currency": "string"
+        "amount": "0.18000000",
+        "currency": "EUR"
       }
     },
     {
-      "id": "string",
+      "id": "473",
       "customer": null,
       "customerGroup": null,
       "validFrom": null,
       "expiresAt": null,
-      "amount": 0,
+      "amount": 2,
       "price": {
-        "amount": "string",
-        "currency": "string"
+        "amount": "1.80000000",
+        "currency": "EUR"
       }
     },
     {
-      "id": "string",
+      "id": "515",
       "customer": {
-        "id": "string",
-        "name": "string"
+        "id": "2",
+        "name": "Karlo Kunde GmbH & Co. KG"
       },
       "customerGroup": null,
       "validFrom": null,
       "expiresAt": null,
-      "amount": 0,
+      "amount": 1,
       "price": {
-        "amount": "string",
-        "currency": "string"
+        "amount": "5.00000000",
+        "currency": "EUR"
       }
     }
   ],
   "extra": {
     "page": {
-      "number": 0,
-      "size": 0
+      "number": 1,
+      "size": 10
     }
   }
 }
diff --git a/src/api-tester/responses/Get_View_Suppliers.json b/src/api-tester/responses/Get_View_Suppliers.json
new file mode 100644
index 0000000..9801ad4
--- /dev/null
+++ b/src/api-tester/responses/Get_View_Suppliers.json
@@ -0,0 +1,18 @@
+{
+  "data": {
+    "id": "11",
+    "type": "company",
+    "general": {
+      "name": "Ich-Liefer-Alles",
+      "address": {
+        "note": "",
+        "street": "Heustätter Str. 25",
+        "zip": "70000",
+        "city": "Stuttgart",
+        "state": "",
+        "country": "DE"
+      }
+    },
+    "tags": []
+  }
+}
diff --git a/src/expected/Get_List_Products_updated.json b/src/expected/Get_List_Products_updated.json
new file mode 100644
index 0000000..aad5963
--- /dev/null
+++ b/src/expected/Get_List_Products_updated.json
@@ -0,0 +1,1430 @@
+{
+  "data": [
+    {
+      "id": "1742",
+      "uuid": "01970c00-5ff9-7713-92df-e7020dc4bd77",
+      "name": "7iDP Handschuh Transition;S, blau;",
+      "description": "7iDP Handschuh Transition;S, blau;",
+      "shortDescription": null,
+      "number": "278",
+      "project": {
+        "id": "45",
+        "name": "veloxl_test"
+      },
+      "category": null,
+      "standardSupplier": {
+        "id": "335"
+      },
+      "stockCount": 5,
+      "stockStats": {
+        "purchasedCount": "1.0000",
+        "totalCount": "5.0000",
+        "availableCount": "5.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "8.9900"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "10.6981"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "20.9700"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "24.9543"
+      },
+      "shopPriceDisplay": "24.95",
+      "ean": "5055356349261",
+      "manufacturerName": "",
+      "manufacturerNumber": "7308-03-008",
+      "customsTariffNumber": "",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": "https://636a1d639f14e.xentral.biz/index.php?module=artikel&action=thumbnail&id=1742&bildvorschau=17388_100_100",
+      "thumbnailId": "17388",
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": true,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-26T12:05:08+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "7iDP Handschuh Transition;S, blau;",
+          "shortDescription": "",
+          "description": "7iDP Handschuh Transition;S, blau;",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1741",
+      "uuid": "01970b9b-368e-7f1c-9e59-9552555a3699",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000646",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-26T10:01:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1740",
+      "uuid": "0196fd1d-7ba6-7c4e-88e1-139f42007d31",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000645",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-23T14:49:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1739",
+      "uuid": "0196fd1d-167c-7f04-89d3-9580f2406bfb",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000644",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-23T14:49:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1738",
+      "uuid": "0196fd0d-144c-7002-960d-922859856d8f",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000643",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-23T14:18:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1737",
+      "uuid": "0196f701-cc44-7490-aaee-3cc3bb06d38f",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000642",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-22T10:24:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1736",
+      "uuid": "0196f1db-72ea-75b1-9968-4e8c041b4371",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000641",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-21T10:07:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1735",
+      "uuid": "0196ecb5-18f8-7aa4-a639-668ae27623cd",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000640",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-20T10:21:05+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1734",
+      "uuid": "0196e78e-c176-7c07-b310-ed5f894130f2",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000639",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-19T10:04:04+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    },
+    {
+      "id": "1733",
+      "uuid": "0196d911-3fae-731a-90c6-52a3bfaddc90",
+      "name": "Testprodukt API",
+      "description": "Dieses Produkt wurde über die API erstellt.",
+      "shortDescription": null,
+      "number": "1000021000638",
+      "project": {
+        "id": "3",
+        "name": "Kasse"
+      },
+      "category": {
+        "id": "1",
+        "name": "Handelsware (100000)"
+      },
+      "standardSupplier": null,
+      "stockCount": 0,
+      "stockStats": {
+        "purchasedCount": "0.0000",
+        "totalCount": null,
+        "availableCount": "0.0000",
+        "inProductionCount": "0.0000"
+      },
+      "purchasePriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "purchasePriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceNet": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "salesPriceGross": {
+        "currency": "EUR",
+        "amount": "0.0000"
+      },
+      "shopPriceDisplay": null,
+      "ean": "1234567890123",
+      "manufacturerName": "",
+      "manufacturerNumber": "",
+      "customsTariffNumber": "12345678",
+      "options": [],
+      "selectedOptions": [],
+      "variants": [],
+      "isVariant": false,
+      "variantOf": null,
+      "thumbnailUrl": null,
+      "thumbnailId": null,
+      "tags": [],
+      "freeFields": [],
+      "countryOfOrigin": null,
+      "regionOfOrigin": "",
+      "internalComment": "",
+      "measurements": {
+        "weight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "netWeight": {
+          "value": 0,
+          "unit": "kg"
+        },
+        "length": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "width": {
+          "value": 0,
+          "unit": "cm"
+        },
+        "height": {
+          "value": 0,
+          "unit": "cm"
+        }
+      },
+      "minimumOrderQuantity": 0,
+      "minimumStorageQuantity": 0,
+      "salesTax": "standard",
+      "hasBatches": false,
+      "serialNumbersMode": "disabled",
+      "hasBestBeforeDate": false,
+      "hasBillOfMaterials": false,
+      "isAssembledJustInTime": false,
+      "isProductionProduct": false,
+      "isExternallyProduced": false,
+      "allowPurchaseFromAllSuppliers": false,
+      "isDisabled": false,
+      "disabledReason": "",
+      "hidePriceOnDocuments": false,
+      "ageRating": null,
+      "isStockItem": false,
+      "isStockTakingDisabled": false,
+      "hideJustInTimeItemsOnDocuments": false,
+      "isShippingCostsProduct": false,
+      "discount": {
+        "isDiscountProduct": false,
+        "discountPercentage": 0
+      },
+      "stockTaking": {
+        "hasStockTakingValue": false,
+        "stockTakingValue": 0
+      },
+      "calculatedPurchasePrice": {
+        "hasCalculatedPurchasePrice": false,
+        "price": {
+          "amount": "0.0000",
+          "currency": "EUR"
+        }
+      },
+      "unit": {
+        "name": ""
+      },
+      "updatedAt": "2025-05-16T14:54:09+02:00",
+      "textsAndDescriptions": {
+        "inCatalog": false,
+        "primaryLanguage": {
+          "name": "Testprodukt API",
+          "shortDescription": "",
+          "description": "Dieses Produkt wurde über die API erstellt.",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        },
+        "english": {
+          "name": "",
+          "shortDescription": "",
+          "description": "",
+          "shopDescription": "",
+          "metaTitle": "",
+          "metaDescription": "",
+          "metaKeywords": "",
+          "catalogName": "",
+          "catalogText": ""
+        }
+      }
+    }
+  ],
+  "extra": {
+    "totalCount": 1156,
+    "page": {
+      "number": 1,
+      "size": 10
+    }
+  }
+}
diff --git a/src/expected/Get_View_Customer_updated.json b/src/expected/Get_View_Customer_updated.json
new file mode 100644
index 0000000..a4d04b1
--- /dev/null
+++ b/src/expected/Get_View_Customer_updated.json
@@ -0,0 +1,41 @@
+{
+  "data": {
+    "id": "440",
+    "uuid": "",
+    "number": "16",
+    "deviatingCustomerNumber": "",
+    "customerType": "person",
+    "name": "DimasTest",
+    "firstname": "",
+    "lastname": "",
+    "title": "",
+    "salutation": "other",
+    "salutationPhrase": "",
+    "birthdate": null,
+    "department": "",
+    "subDepartment": "",
+    "projects": [
+      {
+        "id": "32"
+      }
+    ],
+    "groups": [],
+    "contactDetails": {
+      "email": "",
+      "phone": null,
+      "mobile": null,
+      "fax": null,
+      "website": null,
+      "additionalData": []
+    },
+    "accountManager": null,
+    "salesManager": null,
+    "isLead": false,
+    "contactPerson": ""
+  },
+  "links": {
+    "self": "https://636a1d639f14e.xentral.biz/api/v2/customers/440",
+    "contactPersons": "https://636a1d639f14e.xentral.biz/api/customers/440/contactPerson",
+    "addresses": "https://636a1d639f14e.xentral.biz/api/v2/customers/440/addresses"
+  }
+}
